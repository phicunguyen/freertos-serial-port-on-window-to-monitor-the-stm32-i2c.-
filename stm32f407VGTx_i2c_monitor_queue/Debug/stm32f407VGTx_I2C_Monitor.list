
stm32f407VGTx_I2C_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000492c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004b50  08004b50  00014b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004b58  08004b58  00014b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004b5c  08004b5c  00014b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  08004b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
  8 .bss          000062e0  200001e0  200001e0  000201e0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200064c0  200064c0  000201e0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00025810  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000052f8  00000000  00000000  00045a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000d873  00000000  00000000  0004ad18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001378  00000000  00000000  00058590  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016c0  00000000  00000000  00059908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000099a8  00000000  00000000  0005afc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000072f0  00000000  00000000  00064970  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0006bc60  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003834  00000000  00000000  0006bcdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004aa4 	.word	0x08004aa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08004aa4 	.word	0x08004aa4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x30>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f82f 	bl	8000560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f003 feb6 	bl	8004274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f003 fe92 	bl	8004230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800050c:	2000      	movs	r0, #0
 800050e:	bd08      	pop	{r3, pc}
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x10>)
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_IncTick+0x14>)
 8000518:	6811      	ldr	r1, [r2, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	440b      	add	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	200043cc 	.word	0x200043cc
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200043cc 	.word	0x200043cc

08000538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000538:	b538      	push	{r3, r4, r5, lr}
 800053a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800053c:	f7ff fff6 	bl	800052c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000540:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000542:	bf1c      	itt	ne
 8000544:	4b05      	ldrne	r3, [pc, #20]	; (800055c <HAL_Delay+0x24>)
 8000546:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000548:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800054a:	bf18      	it	ne
 800054c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800054e:	f7ff ffed 	bl	800052c <HAL_GetTick>
 8000552:	1b40      	subs	r0, r0, r5
 8000554:	4284      	cmp	r4, r0
 8000556:	d8fa      	bhi.n	800054e <HAL_Delay+0x16>
  {
  }
}
 8000558:	bd38      	pop	{r3, r4, r5, pc}
 800055a:	bf00      	nop
 800055c:	20000000 	.word	0x20000000

08000560 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000560:	4a07      	ldr	r2, [pc, #28]	; (8000580 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000562:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000564:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000568:	041b      	lsls	r3, r3, #16
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000570:	0200      	lsls	r0, r0, #8
 8000572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000576:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800057a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800057c:	60d3      	str	r3, [r2, #12]
 800057e:	4770      	bx	lr
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	68dc      	ldr	r4, [r3, #12]
 800058a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000592:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000594:	2b04      	cmp	r3, #4
 8000596:	bf28      	it	cs
 8000598:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059c:	f04f 0501 	mov.w	r5, #1
 80005a0:	fa05 f303 	lsl.w	r3, r5, r3
 80005a4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a8:	bf8c      	ite	hi
 80005aa:	3c03      	subhi	r4, #3
 80005ac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ae:	4019      	ands	r1, r3
 80005b0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005b2:	fa05 f404 	lsl.w	r4, r5, r4
 80005b6:	3c01      	subs	r4, #1
 80005b8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005ba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005bc:	ea42 0201 	orr.w	r2, r2, r1
 80005c0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c4:	bfad      	iteet	ge
 80005c6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	f000 000f 	andlt.w	r0, r0, #15
 80005ce:	4b06      	ldrlt	r3, [pc, #24]	; (80005e8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	bfb5      	itete	lt
 80005d6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop
 80005e4:	e000ed00 	.word	0xe000ed00
 80005e8:	e000ed14 	.word	0xe000ed14

080005ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005ec:	2800      	cmp	r0, #0
 80005ee:	db08      	blt.n	8000602 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005f0:	0942      	lsrs	r2, r0, #5
 80005f2:	2301      	movs	r3, #1
 80005f4:	f000 001f 	and.w	r0, r0, #31
 80005f8:	fa03 f000 	lsl.w	r0, r3, r0
 80005fc:	4b01      	ldr	r3, [pc, #4]	; (8000604 <HAL_NVIC_EnableIRQ+0x18>)
 80005fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000602:	4770      	bx	lr
 8000604:	e000e100 	.word	0xe000e100

08000608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800060e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000610:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80007c0 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000614:	4a68      	ldr	r2, [pc, #416]	; (80007b8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000616:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80007c4 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800061a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800061c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800061e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000622:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000624:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000628:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800062c:	45b6      	cmp	lr, r6
 800062e:	f040 80ae 	bne.w	800078e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000632:	684c      	ldr	r4, [r1, #4]
 8000634:	f024 0710 	bic.w	r7, r4, #16
 8000638:	2f02      	cmp	r7, #2
 800063a:	d116      	bne.n	800066a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800063c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000640:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000644:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000648:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800064c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000650:	f04f 0c0f 	mov.w	ip, #15
 8000654:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000658:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800065c:	690d      	ldr	r5, [r1, #16]
 800065e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000662:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000666:	f8ca 5020 	str.w	r5, [sl, #32]
 800066a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800066e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000670:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000674:	fa05 f50a 	lsl.w	r5, r5, sl
 8000678:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800067a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800067e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000682:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000686:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000688:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800068c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800068e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000692:	d811      	bhi.n	80006b8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000694:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000696:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800069a:	68cf      	ldr	r7, [r1, #12]
 800069c:	fa07 fc0a 	lsl.w	ip, r7, sl
 80006a0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80006a4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006a6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006a8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006ac:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006b0:	409f      	lsls	r7, r3
 80006b2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006b6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006b8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006ba:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006bc:	688f      	ldr	r7, [r1, #8]
 80006be:	fa07 f70a 	lsl.w	r7, r7, sl
 80006c2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006c4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006c6:	00e5      	lsls	r5, r4, #3
 80006c8:	d561      	bpl.n	800078e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	f04f 0b00 	mov.w	fp, #0
 80006ce:	f8cd b00c 	str.w	fp, [sp, #12]
 80006d2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006d6:	4d39      	ldr	r5, [pc, #228]	; (80007bc <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006dc:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006e0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006e4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006e8:	9703      	str	r7, [sp, #12]
 80006ea:	9f03      	ldr	r7, [sp, #12]
 80006ec:	f023 0703 	bic.w	r7, r3, #3
 80006f0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006f4:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006f8:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80006fc:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000700:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000704:	f04f 0e0f 	mov.w	lr, #15
 8000708:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800070c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800070e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000712:	d043      	beq.n	800079c <HAL_GPIO_Init+0x194>
 8000714:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000718:	42a8      	cmp	r0, r5
 800071a:	d041      	beq.n	80007a0 <HAL_GPIO_Init+0x198>
 800071c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000720:	42a8      	cmp	r0, r5
 8000722:	d03f      	beq.n	80007a4 <HAL_GPIO_Init+0x19c>
 8000724:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000728:	42a8      	cmp	r0, r5
 800072a:	d03d      	beq.n	80007a8 <HAL_GPIO_Init+0x1a0>
 800072c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000730:	42a8      	cmp	r0, r5
 8000732:	d03b      	beq.n	80007ac <HAL_GPIO_Init+0x1a4>
 8000734:	4548      	cmp	r0, r9
 8000736:	d03b      	beq.n	80007b0 <HAL_GPIO_Init+0x1a8>
 8000738:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800073c:	42a8      	cmp	r0, r5
 800073e:	d039      	beq.n	80007b4 <HAL_GPIO_Init+0x1ac>
 8000740:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000744:	42a8      	cmp	r0, r5
 8000746:	bf14      	ite	ne
 8000748:	2508      	movne	r5, #8
 800074a:	2507      	moveq	r5, #7
 800074c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000750:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000754:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000756:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000758:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800075a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800075e:	bf0c      	ite	eq
 8000760:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000762:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000764:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000766:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000768:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800076c:	bf0c      	ite	eq
 800076e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000770:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000772:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000774:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000776:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800077a:	bf0c      	ite	eq
 800077c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800077e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000780:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000782:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000784:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000786:	bf54      	ite	pl
 8000788:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800078a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800078c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800078e:	3301      	adds	r3, #1
 8000790:	2b10      	cmp	r3, #16
 8000792:	f47f af44 	bne.w	800061e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000796:	b005      	add	sp, #20
 8000798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079c:	465d      	mov	r5, fp
 800079e:	e7d5      	b.n	800074c <HAL_GPIO_Init+0x144>
 80007a0:	2501      	movs	r5, #1
 80007a2:	e7d3      	b.n	800074c <HAL_GPIO_Init+0x144>
 80007a4:	2502      	movs	r5, #2
 80007a6:	e7d1      	b.n	800074c <HAL_GPIO_Init+0x144>
 80007a8:	2503      	movs	r5, #3
 80007aa:	e7cf      	b.n	800074c <HAL_GPIO_Init+0x144>
 80007ac:	2504      	movs	r5, #4
 80007ae:	e7cd      	b.n	800074c <HAL_GPIO_Init+0x144>
 80007b0:	2505      	movs	r5, #5
 80007b2:	e7cb      	b.n	800074c <HAL_GPIO_Init+0x144>
 80007b4:	2506      	movs	r5, #6
 80007b6:	e7c9      	b.n	800074c <HAL_GPIO_Init+0x144>
 80007b8:	40013c00 	.word	0x40013c00
 80007bc:	40020000 	.word	0x40020000
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40021400 	.word	0x40021400

080007c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007c8:	6903      	ldr	r3, [r0, #16]
 80007ca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80007cc:	bf14      	ite	ne
 80007ce:	2001      	movne	r0, #1
 80007d0:	2000      	moveq	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007d4:	b10a      	cbz	r2, 80007da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007d6:	6181      	str	r1, [r0, #24]
 80007d8:	4770      	bx	lr
 80007da:	0409      	lsls	r1, r1, #16
 80007dc:	e7fb      	b.n	80007d6 <HAL_GPIO_WritePin+0x2>

080007de <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80007de:	6943      	ldr	r3, [r0, #20]
 80007e0:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80007e4:	bf08      	it	eq
 80007e6:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80007e8:	6181      	str	r1, [r0, #24]
 80007ea:	4770      	bx	lr

080007ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80007ec:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80007ee:	4b04      	ldr	r3, [pc, #16]	; (8000800 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80007f0:	6959      	ldr	r1, [r3, #20]
 80007f2:	4201      	tst	r1, r0
 80007f4:	d002      	beq.n	80007fc <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80007f6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007f8:	f003 fc18 	bl	800402c <HAL_GPIO_EXTI_Callback>
 80007fc:	bd08      	pop	{r3, pc}
 80007fe:	bf00      	nop
 8000800:	40013c00 	.word	0x40013c00

08000804 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000804:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000806:	4604      	mov	r4, r0
{
 8000808:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 800080a:	b360      	cbz	r0, 8000866 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800080c:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000810:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000812:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000816:	b91b      	cbnz	r3, 8000820 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000818:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800081c:	f003 fe2a 	bl	8004474 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000820:	2303      	movs	r3, #3
 8000822:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000826:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000828:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800082a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 800082e:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000832:	bf08      	it	eq
 8000834:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000836:	f001 f921 	bl	8001a7c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800083a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083c:	466e      	mov	r6, sp
 800083e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000842:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000844:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000848:	e886 0003 	stmia.w	r6, {r0, r1}
 800084c:	4625      	mov	r5, r4
 800084e:	1d27      	adds	r7, r4, #4
 8000850:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000854:	f855 0b10 	ldr.w	r0, [r5], #16
 8000858:	f001 f856 	bl	8001908 <USB_CoreInit>
 800085c:	4606      	mov	r6, r0
 800085e:	b120      	cbz	r0, 800086a <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000860:	2302      	movs	r3, #2
 8000862:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000866:	2501      	movs	r5, #1
 8000868:	e050      	b.n	800090c <HAL_PCD_Init+0x108>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800086a:	4601      	mov	r1, r0
 800086c:	6820      	ldr	r0, [r4, #0]
 800086e:	f001 f90b 	bl	8001a88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000872:	4630      	mov	r0, r6
 8000874:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000878:	261c      	movs	r6, #28
 800087a:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800087e:	4601      	mov	r1, r0
 8000880:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000882:	4596      	cmp	lr, r2
 8000884:	f100 0001 	add.w	r0, r0, #1
 8000888:	d81c      	bhi.n	80008c4 <HAL_PCD_Init+0xc0>
 800088a:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800088c:	261c      	movs	r6, #28
 800088e:	4619      	mov	r1, r3
 8000890:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000892:	4586      	cmp	lr, r0
 8000894:	f103 0301 	add.w	r3, r3, #1
 8000898:	d822      	bhi.n	80008e0 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800089a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089c:	466e      	mov	r6, sp
 800089e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008a8:	e886 0003 	stmia.w	r6, {r0, r1}
 80008ac:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80008b0:	6820      	ldr	r0, [r4, #0]
 80008b2:	f001 f92b 	bl	8001b0c <USB_DevInit>
 80008b6:	2301      	movs	r3, #1
 80008b8:	4605      	mov	r5, r0
 80008ba:	b300      	cbz	r0, 80008fe <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80008bc:	2202      	movs	r2, #2
 80008be:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 80008c2:	e7d0      	b.n	8000866 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 80008c4:	fb06 4302 	mla	r3, r6, r2, r4
 80008c8:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80008cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80008d0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80008d4:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80008d8:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80008da:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80008dc:	6519      	str	r1, [r3, #80]	; 0x50
 80008de:	e7cf      	b.n	8000880 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 80008e0:	fb06 4200 	mla	r2, r6, r0, r4
 80008e4:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80008e8:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80008ec:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80008f0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80008f4:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80008f8:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 80008fc:	e7c8      	b.n	8000890 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80008fe:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000902:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000906:	6820      	ldr	r0, [r4, #0]
 8000908:	f001 fc52 	bl	80021b0 <USB_DevDisconnect>

  return HAL_OK;
}
 800090c:	4628      	mov	r0, r5
 800090e:	b00b      	add	sp, #44	; 0x2c
 8000910:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000912 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000912:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8000916:	2b01      	cmp	r3, #1
{
 8000918:	b510      	push	{r4, lr}
 800091a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800091c:	d016      	beq.n	800094c <HAL_PCD_Start+0x3a>
 800091e:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000920:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8000922:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000926:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000928:	2b01      	cmp	r3, #1
 800092a:	d106      	bne.n	800093a <HAL_PCD_Start+0x28>
 800092c:	69a3      	ldr	r3, [r4, #24]
 800092e:	2b01      	cmp	r3, #1
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000930:	bf1e      	ittt	ne
 8000932:	6b83      	ldrne	r3, [r0, #56]	; 0x38
 8000934:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 8000938:	6383      	strne	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800093a:	f001 fc2d 	bl	8002198 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800093e:	6820      	ldr	r0, [r4, #0]
 8000940:	f001 f896 	bl	8001a70 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000944:	2000      	movs	r0, #0
 8000946:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800094a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800094c:	2002      	movs	r0, #2
}
 800094e:	bd10      	pop	{r4, pc}

08000950 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000954:	6806      	ldr	r6, [r0, #0]
{
 8000956:	b087      	sub	sp, #28
 8000958:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800095a:	4630      	mov	r0, r6
 800095c:	f001 fc63 	bl	8002226 <USB_GetMode>
 8000960:	9002      	str	r0, [sp, #8]
 8000962:	2800      	cmp	r0, #0
 8000964:	f040 8122 	bne.w	8000bac <HAL_PCD_IRQHandler+0x25c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000968:	6820      	ldr	r0, [r4, #0]
 800096a:	f001 fc2d 	bl	80021c8 <USB_ReadInterrupts>
 800096e:	2800      	cmp	r0, #0
 8000970:	f000 811c 	beq.w	8000bac <HAL_PCD_IRQHandler+0x25c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000974:	6820      	ldr	r0, [r4, #0]
 8000976:	f001 fc27 	bl	80021c8 <USB_ReadInterrupts>
 800097a:	0783      	lsls	r3, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800097c:	bf48      	it	mi
 800097e:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000980:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000982:	bf42      	ittt	mi
 8000984:	6953      	ldrmi	r3, [r2, #20]
 8000986:	f003 0302 	andmi.w	r3, r3, #2
 800098a:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800098c:	f001 fc1c 	bl	80021c8 <USB_ReadInterrupts>
 8000990:	0307      	lsls	r7, r0, #12
 8000992:	f100 810e 	bmi.w	8000bb2 <HAL_PCD_IRQHandler+0x262>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000996:	6820      	ldr	r0, [r4, #0]
 8000998:	f001 fc16 	bl	80021c8 <USB_ReadInterrupts>
 800099c:	0345      	lsls	r5, r0, #13
 800099e:	d50c      	bpl.n	80009ba <HAL_PCD_IRQHandler+0x6a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80009a0:	6820      	ldr	r0, [r4, #0]
 80009a2:	f001 fc1d 	bl	80021e0 <USB_ReadDevAllInEpInterrupt>
 80009a6:	4625      	mov	r5, r4
 80009a8:	4683      	mov	fp, r0
 80009aa:	f506 6a10 	add.w	sl, r6, #2304	; 0x900

      epnum = 0U;
 80009ae:	f04f 0900 	mov.w	r9, #0

      while (ep_intr != 0U)
 80009b2:	f1bb 0f00 	cmp.w	fp, #0
 80009b6:	f040 81bc 	bne.w	8000d32 <HAL_PCD_IRQHandler+0x3e2>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80009ba:	6820      	ldr	r0, [r4, #0]
 80009bc:	f001 fc04 	bl	80021c8 <USB_ReadInterrupts>
 80009c0:	2800      	cmp	r0, #0
 80009c2:	da15      	bge.n	80009f0 <HAL_PCD_IRQHandler+0xa0>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80009c4:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 80009c8:	f023 0301 	bic.w	r3, r3, #1
 80009cc:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 80009d0:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	f040 8241 	bne.w	8000e5c <HAL_PCD_IRQHandler+0x50c>
      {
        hpcd->LPM_State = LPM_L0;
 80009da:	2100      	movs	r1, #0
 80009dc:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80009e0:	4620      	mov	r0, r4
 80009e2:	f000 fbbf 	bl	8001164 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80009e6:	6822      	ldr	r2, [r4, #0]
 80009e8:	6953      	ldr	r3, [r2, #20]
 80009ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80009ee:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80009f0:	6820      	ldr	r0, [r4, #0]
 80009f2:	f001 fbe9 	bl	80021c8 <USB_ReadInterrupts>
 80009f6:	0500      	lsls	r0, r0, #20
 80009f8:	d50b      	bpl.n	8000a12 <HAL_PCD_IRQHandler+0xc2>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80009fa:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 80009fe:	07d9      	lsls	r1, r3, #31
 8000a00:	d502      	bpl.n	8000a08 <HAL_PCD_IRQHandler+0xb8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8000a02:	4620      	mov	r0, r4
 8000a04:	f003 fda6 	bl	8004554 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000a08:	6822      	ldr	r2, [r4, #0]
 8000a0a:	6953      	ldr	r3, [r2, #20]
 8000a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a10:	6153      	str	r3, [r2, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000a12:	6820      	ldr	r0, [r4, #0]
 8000a14:	f001 fbd8 	bl	80021c8 <USB_ReadInterrupts>
 8000a18:	04c2      	lsls	r2, r0, #19
 8000a1a:	d535      	bpl.n	8000a88 <HAL_PCD_IRQHandler+0x138>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000a1c:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 8000a20:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000a22:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000a24:	f023 0301 	bic.w	r3, r3, #1
 8000a28:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	f001 f844 	bl	8001ab8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a30:	6860      	ldr	r0, [r4, #4]
 8000a32:	f506 6310 	add.w	r3, r6, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8000a36:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a3a:	9a02      	ldr	r2, [sp, #8]
 8000a3c:	4282      	cmp	r2, r0
 8000a3e:	f040 8211 	bne.w	8000e64 <HAL_PCD_IRQHandler+0x514>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000a42:	69eb      	ldr	r3, [r5, #28]
 8000a44:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000a48:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8000a4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 821b 	beq.w	8000e88 <HAL_PCD_IRQHandler+0x538>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8000a52:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8000a56:	f043 030b 	orr.w	r3, r3, #11
 8000a5a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8000a5e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000a60:	f043 030b 	orr.w	r3, r3, #11
 8000a64:	646b      	str	r3, [r5, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000a66:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8000a6a:	7c21      	ldrb	r1, [r4, #16]
 8000a6c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000a6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000a72:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8000a76:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000a7a:	f001 fbf3 	bl	8002264 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000a7e:	6822      	ldr	r2, [r4, #0]
 8000a80:	6953      	ldr	r3, [r2, #20]
 8000a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a86:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000a88:	6820      	ldr	r0, [r4, #0]
 8000a8a:	f001 fb9d 	bl	80021c8 <USB_ReadInterrupts>
 8000a8e:	0483      	lsls	r3, r0, #18
 8000a90:	d516      	bpl.n	8000ac0 <HAL_PCD_IRQHandler+0x170>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8000a92:	6820      	ldr	r0, [r4, #0]
 8000a94:	f001 fbcb 	bl	800222e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8000a98:	6820      	ldr	r0, [r4, #0]
 8000a9a:	f001 f8fb 	bl	8001c94 <USB_GetDevSpeed>
 8000a9e:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8000aa0:	6825      	ldr	r5, [r4, #0]
 8000aa2:	f000 fdab 	bl	80015fc <HAL_RCC_GetHCLKFreq>
 8000aa6:	7b22      	ldrb	r2, [r4, #12]
 8000aa8:	4601      	mov	r1, r0
 8000aaa:	4628      	mov	r0, r5
 8000aac:	f000 ff6c 	bl	8001988 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	f003 fd3c 	bl	800452e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000ab6:	6822      	ldr	r2, [r4, #0]
 8000ab8:	6953      	ldr	r3, [r2, #20]
 8000aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000abe:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000ac0:	6820      	ldr	r0, [r4, #0]
 8000ac2:	f001 fb81 	bl	80021c8 <USB_ReadInterrupts>
 8000ac6:	06c7      	lsls	r7, r0, #27
 8000ac8:	d52a      	bpl.n	8000b20 <HAL_PCD_IRQHandler+0x1d0>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000aca:	6822      	ldr	r2, [r4, #0]
 8000acc:	6993      	ldr	r3, [r2, #24]
 8000ace:	f023 0310 	bic.w	r3, r3, #16
 8000ad2:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8000ad4:	6a35      	ldr	r5, [r6, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000ad6:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8000ada:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000adc:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000ae0:	f040 81dd 	bne.w	8000e9e <HAL_PCD_IRQHandler+0x54e>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000ae4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000ae8:	421d      	tst	r5, r3
 8000aea:	d014      	beq.n	8000b16 <HAL_PCD_IRQHandler+0x1c6>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000aec:	231c      	movs	r3, #28
 8000aee:	fb03 4707 	mla	r7, r3, r7, r4
 8000af2:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8000af6:	462a      	mov	r2, r5
 8000af8:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8000afc:	4630      	mov	r0, r6
 8000afe:	f001 fad5 	bl	80020ac <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000b02:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000b06:	442b      	add	r3, r5
 8000b08:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000b0c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000b10:	441d      	add	r5, r3
 8000b12:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b16:	6822      	ldr	r2, [r4, #0]
 8000b18:	6993      	ldr	r3, [r2, #24]
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000b20:	6820      	ldr	r0, [r4, #0]
 8000b22:	f001 fb51 	bl	80021c8 <USB_ReadInterrupts>
 8000b26:	0706      	lsls	r6, r0, #28
 8000b28:	d507      	bpl.n	8000b3a <HAL_PCD_IRQHandler+0x1ea>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f003 fcfb 	bl	8004526 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000b30:	6822      	ldr	r2, [r4, #0]
 8000b32:	6953      	ldr	r3, [r2, #20]
 8000b34:	f003 0308 	and.w	r3, r3, #8
 8000b38:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000b3a:	6820      	ldr	r0, [r4, #0]
 8000b3c:	f001 fb44 	bl	80021c8 <USB_ReadInterrupts>
 8000b40:	02c5      	lsls	r5, r0, #11
 8000b42:	d508      	bpl.n	8000b56 <HAL_PCD_IRQHandler+0x206>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8000b44:	2100      	movs	r1, #0
 8000b46:	4620      	mov	r0, r4
 8000b48:	f003 fd24 	bl	8004594 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000b4c:	6822      	ldr	r2, [r4, #0]
 8000b4e:	6953      	ldr	r3, [r2, #20]
 8000b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b54:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000b56:	6820      	ldr	r0, [r4, #0]
 8000b58:	f001 fb36 	bl	80021c8 <USB_ReadInterrupts>
 8000b5c:	0280      	lsls	r0, r0, #10
 8000b5e:	d508      	bpl.n	8000b72 <HAL_PCD_IRQHandler+0x222>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000b60:	2100      	movs	r1, #0
 8000b62:	4620      	mov	r0, r4
 8000b64:	f003 fd12 	bl	800458c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000b68:	6822      	ldr	r2, [r4, #0]
 8000b6a:	6953      	ldr	r3, [r2, #20]
 8000b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b70:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000b72:	6820      	ldr	r0, [r4, #0]
 8000b74:	f001 fb28 	bl	80021c8 <USB_ReadInterrupts>
 8000b78:	0041      	lsls	r1, r0, #1
 8000b7a:	d507      	bpl.n	8000b8c <HAL_PCD_IRQHandler+0x23c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f003 fd0d 	bl	800459c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000b82:	6822      	ldr	r2, [r4, #0]
 8000b84:	6953      	ldr	r3, [r2, #20]
 8000b86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000b8a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000b8c:	6820      	ldr	r0, [r4, #0]
 8000b8e:	f001 fb1b 	bl	80021c8 <USB_ReadInterrupts>
 8000b92:	0742      	lsls	r2, r0, #29
 8000b94:	d50a      	bpl.n	8000bac <HAL_PCD_IRQHandler+0x25c>
    {
      temp = hpcd->Instance->GOTGINT;
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000b9a:	076b      	lsls	r3, r5, #29
 8000b9c:	d502      	bpl.n	8000ba4 <HAL_PCD_IRQHandler+0x254>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	f003 fd00 	bl	80045a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	4315      	orrs	r5, r2
 8000baa:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000bac:	b007      	add	sp, #28
 8000bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000bb2:	6820      	ldr	r0, [r4, #0]
 8000bb4:	f8df b308 	ldr.w	fp, [pc, #776]	; 8000ec0 <HAL_PCD_IRQHandler+0x570>
 8000bb8:	f001 fb0a 	bl	80021d0 <USB_ReadDevAllOutEpInterrupt>
 8000bbc:	f506 6530 	add.w	r5, r6, #2816	; 0xb00
 8000bc0:	4682      	mov	sl, r0
 8000bc2:	46a0      	mov	r8, r4
      epnum = 0U;
 8000bc4:	2700      	movs	r7, #0
      while (ep_intr != 0U)
 8000bc6:	f1ba 0f00 	cmp.w	sl, #0
 8000bca:	f43f aee4 	beq.w	8000996 <HAL_PCD_IRQHandler+0x46>
        if ((ep_intr & 0x1U) != 0U)
 8000bce:	f01a 0f01 	tst.w	sl, #1
 8000bd2:	f000 80a7 	beq.w	8000d24 <HAL_PCD_IRQHandler+0x3d4>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000bd6:	b2fa      	uxtb	r2, r7
 8000bd8:	4611      	mov	r1, r2
 8000bda:	6820      	ldr	r0, [r4, #0]
 8000bdc:	9203      	str	r2, [sp, #12]
 8000bde:	f001 fb07 	bl	80021f0 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000be2:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000be6:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000be8:	9a03      	ldr	r2, [sp, #12]
 8000bea:	d04c      	beq.n	8000c86 <HAL_PCD_IRQHandler+0x336>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000bec:	2301      	movs	r3, #1
 8000bee:	60ab      	str	r3, [r5, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000bf0:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8000bf2:	6920      	ldr	r0, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8000bf4:	f8d3 e040 	ldr.w	lr, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000bfc:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8000c00:	2801      	cmp	r0, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000c02:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8000c04:	d154      	bne.n	8000cb0 <HAL_PCD_IRQHandler+0x360>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8000c06:	0708      	lsls	r0, r1, #28
 8000c08:	d514      	bpl.n	8000c34 <HAL_PCD_IRQHandler+0x2e4>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000c0a:	45de      	cmp	lr, fp
 8000c0c:	d904      	bls.n	8000c18 <HAL_PCD_IRQHandler+0x2c8>
 8000c0e:	040a      	lsls	r2, r1, #16
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000c10:	bf44      	itt	mi
 8000c12:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 8000c16:	609a      	strmi	r2, [r3, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8000c18:	4620      	mov	r0, r4
 8000c1a:	9303      	str	r3, [sp, #12]
 8000c1c:	f003 fc6c 	bl	80044f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000c20:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000c24:	2101      	movs	r1, #1
 8000c26:	6820      	ldr	r0, [r4, #0]
 8000c28:	f001 fb1c 	bl	8002264 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000c2c:	9b03      	ldr	r3, [sp, #12]
 8000c2e:	2208      	movs	r2, #8
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	e028      	b.n	8000c86 <HAL_PCD_IRQHandler+0x336>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8000c34:	0688      	lsls	r0, r1, #26
 8000c36:	d501      	bpl.n	8000c3c <HAL_PCD_IRQHandler+0x2ec>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000c38:	2220      	movs	r2, #32
 8000c3a:	e7f9      	b.n	8000c30 <HAL_PCD_IRQHandler+0x2e0>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8000c3c:	f011 0f28 	tst.w	r1, #40	; 0x28
 8000c40:	d121      	bne.n	8000c86 <HAL_PCD_IRQHandler+0x336>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000c42:	45de      	cmp	lr, fp
 8000c44:	d904      	bls.n	8000c50 <HAL_PCD_IRQHandler+0x300>
 8000c46:	0409      	lsls	r1, r1, #16
 8000c48:	d502      	bpl.n	8000c50 <HAL_PCD_IRQHandler+0x300>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000c4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c4e:	e7ef      	b.n	8000c30 <HAL_PCD_IRQHandler+0x2e0>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8000c50:	691b      	ldr	r3, [r3, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 8000c52:	f8d8 1204 	ldr.w	r1, [r8, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8000c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8000c5a:	1acb      	subs	r3, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8000c5c:	f8c8 3214 	str.w	r3, [r8, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8000c60:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 8000c64:	4419      	add	r1, r3
 8000c66:	f8c8 1208 	str.w	r1, [r8, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	f003 fc49 	bl	8004504 <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000c72:	b947      	cbnz	r7, 8000c86 <HAL_PCD_IRQHandler+0x336>
 8000c74:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8000c78:	b92b      	cbnz	r3, 8000c86 <HAL_PCD_IRQHandler+0x336>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000c7a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000c7e:	2101      	movs	r1, #1
 8000c80:	6820      	ldr	r0, [r4, #0]
 8000c82:	f001 faef 	bl	8002264 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000c86:	f019 0f08 	tst.w	r9, #8
 8000c8a:	d033      	beq.n	8000cf4 <HAL_PCD_IRQHandler+0x3a4>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000c8c:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8000c8e:	6920      	ldr	r0, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8000c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000c96:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8000c9a:	2801      	cmp	r0, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000c9c:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8000c9e:	d115      	bne.n	8000ccc <HAL_PCD_IRQHandler+0x37c>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000ca0:	455a      	cmp	r2, fp
 8000ca2:	d916      	bls.n	8000cd2 <HAL_PCD_IRQHandler+0x382>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8000ca4:	0409      	lsls	r1, r1, #16
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000ca6:	bf44      	itt	mi
 8000ca8:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 8000cac:	6099      	strmi	r1, [r3, #8]
 8000cae:	e010      	b.n	8000cd2 <HAL_PCD_IRQHandler+0x382>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8000cb0:	4882      	ldr	r0, [pc, #520]	; (8000ebc <HAL_PCD_IRQHandler+0x56c>)
 8000cb2:	4586      	cmp	lr, r0
 8000cb4:	d105      	bne.n	8000cc2 <HAL_PCD_IRQHandler+0x372>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8000cb6:	0408      	lsls	r0, r1, #16
 8000cb8:	d4c7      	bmi.n	8000c4a <HAL_PCD_IRQHandler+0x2fa>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000cba:	0688      	lsls	r0, r1, #26
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000cbc:	bf44      	itt	mi
 8000cbe:	2120      	movmi	r1, #32
 8000cc0:	6099      	strmi	r1, [r3, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f003 fc1d 	bl	8004504 <HAL_PCD_DataOutStageCallback>
 8000cca:	e7dc      	b.n	8000c86 <HAL_PCD_IRQHandler+0x336>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8000ccc:	487b      	ldr	r0, [pc, #492]	; (8000ebc <HAL_PCD_IRQHandler+0x56c>)
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	d0e8      	beq.n	8000ca4 <HAL_PCD_IRQHandler+0x354>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	9203      	str	r2, [sp, #12]
 8000cd6:	f003 fc0f 	bl	80044f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8000cda:	9a03      	ldr	r2, [sp, #12]
 8000cdc:	455a      	cmp	r2, fp
 8000cde:	d907      	bls.n	8000cf0 <HAL_PCD_IRQHandler+0x3a0>
 8000ce0:	6921      	ldr	r1, [r4, #16]
 8000ce2:	2901      	cmp	r1, #1
 8000ce4:	d104      	bne.n	8000cf0 <HAL_PCD_IRQHandler+0x3a0>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000ce6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000cea:	6820      	ldr	r0, [r4, #0]
 8000cec:	f001 faba 	bl	8002264 <USB_EP0_OutStart>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	60ab      	str	r3, [r5, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000cf4:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000cf8:	bf1c      	itt	ne
 8000cfa:	2310      	movne	r3, #16
 8000cfc:	60ab      	strne	r3, [r5, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000cfe:	f019 0f20 	tst.w	r9, #32
 8000d02:	d009      	beq.n	8000d18 <HAL_PCD_IRQHandler+0x3c8>
            if (hpcd->Init.dma_enable == 1U)
 8000d04:	6921      	ldr	r1, [r4, #16]
 8000d06:	2901      	cmp	r1, #1
 8000d08:	d104      	bne.n	8000d14 <HAL_PCD_IRQHandler+0x3c4>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000d0a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000d0e:	6820      	ldr	r0, [r4, #0]
 8000d10:	f001 faa8 	bl	8002264 <USB_EP0_OutStart>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000d14:	2320      	movs	r3, #32
 8000d16:	60ab      	str	r3, [r5, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000d18:	f419 5f00 	tst.w	r9, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000d1c:	bf1c      	itt	ne
 8000d1e:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8000d22:	60ab      	strne	r3, [r5, #8]
        epnum++;
 8000d24:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 8000d26:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 8000d2a:	3520      	adds	r5, #32
 8000d2c:	f108 081c 	add.w	r8, r8, #28
 8000d30:	e749      	b.n	8000bc6 <HAL_PCD_IRQHandler+0x276>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8000d32:	f01b 0f01 	tst.w	fp, #1
 8000d36:	f000 8089 	beq.w	8000e4c <HAL_PCD_IRQHandler+0x4fc>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000d3a:	fa5f f389 	uxtb.w	r3, r9
 8000d3e:	4619      	mov	r1, r3
 8000d40:	6820      	ldr	r0, [r4, #0]
 8000d42:	9303      	str	r3, [sp, #12]
 8000d44:	f001 fa5d 	bl	8002202 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000d48:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000d4a:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000d4c:	d524      	bpl.n	8000d98 <HAL_PCD_IRQHandler+0x448>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d4e:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8000d52:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000d54:	2001      	movs	r0, #1
 8000d56:	f009 020f 	and.w	r2, r9, #15
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d5e:	ea23 0302 	bic.w	r3, r3, r2
 8000d62:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 8000d66:	6923      	ldr	r3, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000d68:	f8ca 0008 	str.w	r0, [sl, #8]
            if (hpcd->Init.dma_enable == 1U)
 8000d6c:	4283      	cmp	r3, r0
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8000d6e:	bf01      	itttt	eq
 8000d70:	6cab      	ldreq	r3, [r5, #72]	; 0x48
 8000d72:	6c6a      	ldreq	r2, [r5, #68]	; 0x44
 8000d74:	189b      	addeq	r3, r3, r2
 8000d76:	64ab      	streq	r3, [r5, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f003 fbcc 	bl	8004516 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8000d7e:	6921      	ldr	r1, [r4, #16]
 8000d80:	2901      	cmp	r1, #1
 8000d82:	d109      	bne.n	8000d98 <HAL_PCD_IRQHandler+0x448>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000d84:	f1b9 0f00 	cmp.w	r9, #0
 8000d88:	d106      	bne.n	8000d98 <HAL_PCD_IRQHandler+0x448>
 8000d8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000d8c:	b923      	cbnz	r3, 8000d98 <HAL_PCD_IRQHandler+0x448>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000d8e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000d92:	6820      	ldr	r0, [r4, #0]
 8000d94:	f001 fa66 	bl	8002264 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000d98:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000d9a:	bf44      	itt	mi
 8000d9c:	2308      	movmi	r3, #8
 8000d9e:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000da2:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000da4:	bf44      	itt	mi
 8000da6:	2310      	movmi	r3, #16
 8000da8:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000dac:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000dae:	bf44      	itt	mi
 8000db0:	2340      	movmi	r3, #64	; 0x40
 8000db2:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000db6:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000db8:	bf44      	itt	mi
 8000dba:	2302      	movmi	r3, #2
 8000dbc:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000dc0:	063f      	lsls	r7, r7, #24
 8000dc2:	d543      	bpl.n	8000e4c <HAL_PCD_IRQHandler+0x4fc>
  if (ep->xfer_count > ep->xfer_len)
 8000dc4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8000dc6:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8000dc8:	42bb      	cmp	r3, r7
 8000dca:	d83f      	bhi.n	8000e4c <HAL_PCD_IRQHandler+0x4fc>
  len = ep->xfer_len - ep->xfer_count;
 8000dcc:	1aff      	subs	r7, r7, r3
  len32b = (len + 3U) / 4U;
 8000dce:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000dd0:	6822      	ldr	r2, [r4, #0]
 8000dd2:	9204      	str	r2, [sp, #16]
  len32b = (len + 3U) / 4U;
 8000dd4:	429f      	cmp	r7, r3
 8000dd6:	bf28      	it	cs
 8000dd8:	461f      	movcs	r7, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000dda:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8000dde:	3703      	adds	r7, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000de0:	eb03 1349 	add.w	r3, r3, r9, lsl #5
  len32b = (len + 3U) / 4U;
 8000de4:	08bf      	lsrs	r7, r7, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000de6:	9305      	str	r3, [sp, #20]
 8000de8:	9b05      	ldr	r3, [sp, #20]
 8000dea:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	42bb      	cmp	r3, r7
 8000df2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000df4:	d328      	bcc.n	8000e48 <HAL_PCD_IRQHandler+0x4f8>
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d926      	bls.n	8000e48 <HAL_PCD_IRQHandler+0x4f8>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8000dfa:	b963      	cbnz	r3, 8000e16 <HAL_PCD_IRQHandler+0x4c6>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000dfc:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000dfe:	f009 010f 	and.w	r1, r9, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e02:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000e06:	2001      	movs	r0, #1
 8000e08:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e0c:	ea22 0201 	bic.w	r2, r2, r1
 8000e10:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8000e14:	e01a      	b.n	8000e4c <HAL_PCD_IRQHandler+0x4fc>
    len = ep->xfer_len - ep->xfer_count;
 8000e16:	eba3 0802 	sub.w	r8, r3, r2
 8000e1a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8000e1c:	9a03      	ldr	r2, [sp, #12]
 8000e1e:	9804      	ldr	r0, [sp, #16]
 8000e20:	4598      	cmp	r8, r3
 8000e22:	bf28      	it	cs
 8000e24:	4698      	movcs	r8, r3
 8000e26:	7c23      	ldrb	r3, [r4, #16]
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8000e2c:	fa1f f388 	uxth.w	r3, r8
 8000e30:	f001 f83a 	bl	8001ea8 <USB_WritePacket>
    ep->xfer_buff  += len;
 8000e34:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000e36:	4443      	add	r3, r8
 8000e38:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8000e3a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 8000e3c:	f108 0703 	add.w	r7, r8, #3
    ep->xfer_count += len;
 8000e40:	4443      	add	r3, r8
    len32b = (len + 3U) / 4U;
 8000e42:	08bf      	lsrs	r7, r7, #2
    ep->xfer_count += len;
 8000e44:	656b      	str	r3, [r5, #84]	; 0x54
 8000e46:	e7cf      	b.n	8000de8 <HAL_PCD_IRQHandler+0x498>
  if (ep->xfer_len <= ep->xfer_count)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d9d7      	bls.n	8000dfc <HAL_PCD_IRQHandler+0x4ac>
        epnum++;
 8000e4c:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8000e50:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8000e54:	351c      	adds	r5, #28
 8000e56:	f10a 0a20 	add.w	sl, sl, #32
 8000e5a:	e5aa      	b.n	80009b2 <HAL_PCD_IRQHandler+0x62>
        HAL_PCD_ResumeCallback(hpcd);
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f003 fb91 	bl	8004584 <HAL_PCD_ResumeCallback>
 8000e62:	e5c0      	b.n	80009e6 <HAL_PCD_IRQHandler+0x96>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8000e64:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000e6c:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8000e6e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8000e72:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e76:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000e7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e7e:	9a02      	ldr	r2, [sp, #8]
 8000e80:	3201      	adds	r2, #1
 8000e82:	9202      	str	r2, [sp, #8]
 8000e84:	3320      	adds	r3, #32
 8000e86:	e5d8      	b.n	8000a3a <HAL_PCD_IRQHandler+0xea>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8000e88:	696b      	ldr	r3, [r5, #20]
 8000e8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e8e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8000e92:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8000e94:	692b      	ldr	r3, [r5, #16]
 8000e96:	f043 030b 	orr.w	r3, r3, #11
 8000e9a:	612b      	str	r3, [r5, #16]
 8000e9c:	e5e3      	b.n	8000a66 <HAL_PCD_IRQHandler+0x116>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	f47f ae39 	bne.w	8000b16 <HAL_PCD_IRQHandler+0x1c6>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000ea4:	2208      	movs	r2, #8
 8000ea6:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8000eaa:	4630      	mov	r0, r6
 8000eac:	f001 f8fe 	bl	80020ac <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000eb0:	231c      	movs	r3, #28
 8000eb2:	fb03 4707 	mla	r7, r3, r7, r4
 8000eb6:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8000eba:	e627      	b.n	8000b0c <HAL_PCD_IRQHandler+0x1bc>
 8000ebc:	4f54310a 	.word	0x4f54310a
 8000ec0:	4f54300a 	.word	0x4f54300a

08000ec4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8000ec4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8000ec8:	2a01      	cmp	r2, #1
{
 8000eca:	b510      	push	{r4, lr}
 8000ecc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000ece:	d00b      	beq.n	8000ee8 <HAL_PCD_SetAddress+0x24>
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8000ed6:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000eda:	6800      	ldr	r0, [r0, #0]
 8000edc:	f001 f94c 	bl	8002178 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8000ee6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000ee8:	2002      	movs	r0, #2
}
 8000eea:	bd10      	pop	{r4, pc}

08000eec <HAL_PCD_EP_Open>:
{
 8000eec:	b570      	push	{r4, r5, r6, lr}
 8000eee:	4604      	mov	r4, r0
 8000ef0:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8000ef4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000ef8:	f04f 061c 	mov.w	r6, #28
 8000efc:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000efe:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8000f02:	bf15      	itete	ne
 8000f04:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 8000f08:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f0c:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f0e:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8000f12:	bf15      	itete	ne
 8000f14:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8000f16:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8000f18:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 8000f1c:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8000f20:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8000f22:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8000f24:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f26:	b2c0      	uxtb	r0, r0
 8000f28:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8000f2a:	b102      	cbz	r2, 8000f2e <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8000f2c:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8000f2e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8000f30:	bf04      	itt	eq
 8000f32:	2300      	moveq	r3, #0
 8000f34:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8000f36:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d009      	beq.n	8000f52 <HAL_PCD_EP_Open+0x66>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000f44:	6820      	ldr	r0, [r4, #0]
 8000f46:	f000 feb0 	bl	8001caa <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 8000f50:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8000f52:	2002      	movs	r0, #2
}
 8000f54:	bd70      	pop	{r4, r5, r6, pc}

08000f56 <HAL_PCD_EP_Close>:
{
 8000f56:	f001 030f 	and.w	r3, r1, #15
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	b510      	push	{r4, lr}
 8000f5e:	4604      	mov	r4, r0
 8000f60:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8000f62:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f66:	fb00 4102 	mla	r1, r0, r2, r4
 8000f6a:	bf19      	ittee	ne
 8000f6c:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8000f6e:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 8000f72:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f76:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8000f7a:	bf15      	itete	ne
 8000f7c:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8000f7e:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8000f80:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8000f84:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000f88:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8000f8a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d009      	beq.n	8000fa6 <HAL_PCD_EP_Close+0x50>
 8000f92:	2301      	movs	r3, #1
 8000f94:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000f98:	6820      	ldr	r0, [r4, #0]
 8000f9a:	f000 fec9 	bl	8001d30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8000fa4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000fa6:	2002      	movs	r0, #2
}
 8000fa8:	bd10      	pop	{r4, pc}

08000faa <HAL_PCD_EP_Receive>:
{
 8000faa:	b538      	push	{r3, r4, r5, lr}
 8000fac:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000fb0:	241c      	movs	r4, #28
 8000fb2:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8000fb6:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000fba:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8000fbe:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8000fc2:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8000fc4:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8000fc8:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8000fcc:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fd0:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8000fd4:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8000fd6:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8000fd8:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8000fda:	bf08      	it	eq
 8000fdc:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 8000fe0:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000fe2:	b91d      	cbnz	r5, 8000fec <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8000fe4:	f000 fed6 	bl	8001d94 <USB_EP0StartXfer>
}
 8000fe8:	2000      	movs	r0, #0
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8000fec:	f000 ff70 	bl	8001ed0 <USB_EPStartXfer>
 8000ff0:	e7fa      	b.n	8000fe8 <HAL_PCD_EP_Receive+0x3e>

08000ff2 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000ff2:	231c      	movs	r3, #28
 8000ff4:	f001 010f 	and.w	r1, r1, #15
 8000ff8:	fb03 0101 	mla	r1, r3, r1, r0
}
 8000ffc:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8001000:	4770      	bx	lr

08001002 <HAL_PCD_EP_Transmit>:
{
 8001002:	b538      	push	{r3, r4, r5, lr}
 8001004:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001008:	241c      	movs	r4, #28
 800100a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800100e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001012:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8001014:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800101a:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 800101c:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 800101e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001022:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8001026:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001028:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800102a:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800102c:	bf08      	it	eq
 800102e:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8001030:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001032:	b91d      	cbnz	r5, 800103c <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001034:	f000 feae 	bl	8001d94 <USB_EP0StartXfer>
}
 8001038:	2000      	movs	r0, #0
 800103a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800103c:	f000 ff48 	bl	8001ed0 <USB_EPStartXfer>
 8001040:	e7fa      	b.n	8001038 <HAL_PCD_EP_Transmit+0x36>

08001042 <HAL_PCD_EP_SetStall>:
{
 8001042:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001044:	6843      	ldr	r3, [r0, #4]
 8001046:	f001 050f 	and.w	r5, r1, #15
 800104a:	429d      	cmp	r5, r3
{
 800104c:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800104e:	d82e      	bhi.n	80010ae <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8001050:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001054:	f04f 021c 	mov.w	r2, #28
 8001058:	d01f      	beq.n	800109a <HAL_PCD_EP_SetStall+0x58>
    ep->is_in = 1U;
 800105a:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800105e:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8001062:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001064:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8001066:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 800106a:	2201      	movs	r2, #1
 800106c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800106e:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001070:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8001074:	4291      	cmp	r1, r2
 8001076:	d01c      	beq.n	80010b2 <HAL_PCD_EP_SetStall+0x70>
 8001078:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800107c:	4619      	mov	r1, r3
 800107e:	6820      	ldr	r0, [r4, #0]
 8001080:	f001 f822 	bl	80020c8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001084:	b92d      	cbnz	r5, 8001092 <HAL_PCD_EP_SetStall+0x50>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001086:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800108a:	7c21      	ldrb	r1, [r4, #16]
 800108c:	6820      	ldr	r0, [r4, #0]
 800108e:	f001 f8e9 	bl	8002264 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001092:	2000      	movs	r0, #0
 8001094:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001098:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800109a:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 800109e:	fb02 0101 	mla	r1, r2, r1, r0
 80010a2:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80010a4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80010a8:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 80010ac:	e7dd      	b.n	800106a <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80010ae:	2001      	movs	r0, #1
 80010b0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80010b2:	2002      	movs	r0, #2
}
 80010b4:	bd38      	pop	{r3, r4, r5, pc}

080010b6 <HAL_PCD_EP_ClrStall>:
{
 80010b6:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80010b8:	6843      	ldr	r3, [r0, #4]
 80010ba:	f001 020f 	and.w	r2, r1, #15
 80010be:	429a      	cmp	r2, r3
{
 80010c0:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80010c2:	d826      	bhi.n	8001112 <HAL_PCD_EP_ClrStall+0x5c>
 80010c4:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 80010c6:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010ca:	fb03 0102 	mla	r1, r3, r2, r0
 80010ce:	bf19      	ittee	ne
 80010d0:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 80010d2:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010d6:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 80010da:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 80010de:	bf14      	ite	ne
 80010e0:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80010e2:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 80010e4:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80010e8:	bf14      	ite	ne
 80010ea:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 80010ee:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 80010f2:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010f4:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80010f6:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d00b      	beq.n	8001116 <HAL_PCD_EP_ClrStall+0x60>
 80010fe:	2301      	movs	r3, #1
 8001100:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001104:	6820      	ldr	r0, [r4, #0]
 8001106:	f001 f80c 	bl	8002122 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800110a:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 800110e:	4628      	mov	r0, r5
 8001110:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001112:	2001      	movs	r0, #1
 8001114:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001116:	2002      	movs	r0, #2
}
 8001118:	bd38      	pop	{r3, r4, r5, pc}

0800111a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800111a:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800111c:	6804      	ldr	r4, [r0, #0]
 800111e:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8001120:	b921      	cbnz	r1, 800112c <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001126:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8001128:	2000      	movs	r0, #0
 800112a:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800112c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800112e:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001130:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001134:	2000      	movs	r0, #0
 8001136:	1c46      	adds	r6, r0, #1
 8001138:	b2c0      	uxtb	r0, r0
 800113a:	4285      	cmp	r5, r0
 800113c:	d806      	bhi.n	800114c <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800113e:	313f      	adds	r1, #63	; 0x3f
 8001140:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001144:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001148:	6063      	str	r3, [r4, #4]
 800114a:	e7ed      	b.n	8001128 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800114c:	3040      	adds	r0, #64	; 0x40
 800114e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001152:	6840      	ldr	r0, [r0, #4]
 8001154:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8001158:	4630      	mov	r0, r6
 800115a:	e7ec      	b.n	8001136 <HAL_PCDEx_SetTxFiFo+0x1c>

0800115c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800115c:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 800115e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001160:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001162:	4770      	bx	lr

08001164 <HAL_PCDEx_LPM_Callback>:
 8001164:	4770      	bx	lr
	...

08001168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001168:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800116c:	4604      	mov	r4, r0
 800116e:	b918      	cbnz	r0, 8001178 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001170:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001172:	b002      	add	sp, #8
 8001174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001178:	6803      	ldr	r3, [r0, #0]
 800117a:	07dd      	lsls	r5, r3, #31
 800117c:	d410      	bmi.n	80011a0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	0798      	lsls	r0, r3, #30
 8001182:	d458      	bmi.n	8001236 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	071a      	lsls	r2, r3, #28
 8001188:	f100 809a 	bmi.w	80012c0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	075b      	lsls	r3, r3, #29
 8001190:	f100 80b8 	bmi.w	8001304 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001194:	69a2      	ldr	r2, [r4, #24]
 8001196:	2a00      	cmp	r2, #0
 8001198:	f040 8119 	bne.w	80013ce <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800119c:	2000      	movs	r0, #0
 800119e:	e7e8      	b.n	8001172 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a0:	4ba6      	ldr	r3, [pc, #664]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	f002 020c 	and.w	r2, r2, #12
 80011a8:	2a04      	cmp	r2, #4
 80011aa:	d007      	beq.n	80011bc <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011b2:	2a08      	cmp	r2, #8
 80011b4:	d10a      	bne.n	80011cc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	0259      	lsls	r1, r3, #9
 80011ba:	d507      	bpl.n	80011cc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	4b9f      	ldr	r3, [pc, #636]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	039a      	lsls	r2, r3, #14
 80011c2:	d5dc      	bpl.n	800117e <HAL_RCC_OscConfig+0x16>
 80011c4:	6863      	ldr	r3, [r4, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1d9      	bne.n	800117e <HAL_RCC_OscConfig+0x16>
 80011ca:	e7d1      	b.n	8001170 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	6863      	ldr	r3, [r4, #4]
 80011ce:	4d9b      	ldr	r5, [pc, #620]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d4:	d111      	bne.n	80011fa <HAL_RCC_OscConfig+0x92>
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011de:	f7ff f9a5 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	4d96      	ldr	r5, [pc, #600]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80011e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e6:	682b      	ldr	r3, [r5, #0]
 80011e8:	039b      	lsls	r3, r3, #14
 80011ea:	d4c8      	bmi.n	800117e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff f99e 	bl	800052c <HAL_GetTick>
 80011f0:	1b80      	subs	r0, r0, r6
 80011f2:	2864      	cmp	r0, #100	; 0x64
 80011f4:	d9f7      	bls.n	80011e6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80011f6:	2003      	movs	r0, #3
 80011f8:	e7bb      	b.n	8001172 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011fe:	d104      	bne.n	800120a <HAL_RCC_OscConfig+0xa2>
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001206:	602b      	str	r3, [r5, #0]
 8001208:	e7e5      	b.n	80011d6 <HAL_RCC_OscConfig+0x6e>
 800120a:	682a      	ldr	r2, [r5, #0]
 800120c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001210:	602a      	str	r2, [r5, #0]
 8001212:	682a      	ldr	r2, [r5, #0]
 8001214:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001218:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1df      	bne.n	80011de <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800121e:	f7ff f985 	bl	800052c <HAL_GetTick>
 8001222:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001224:	682b      	ldr	r3, [r5, #0]
 8001226:	039f      	lsls	r7, r3, #14
 8001228:	d5a9      	bpl.n	800117e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122a:	f7ff f97f 	bl	800052c <HAL_GetTick>
 800122e:	1b80      	subs	r0, r0, r6
 8001230:	2864      	cmp	r0, #100	; 0x64
 8001232:	d9f7      	bls.n	8001224 <HAL_RCC_OscConfig+0xbc>
 8001234:	e7df      	b.n	80011f6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001236:	4b81      	ldr	r3, [pc, #516]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	f012 0f0c 	tst.w	r2, #12
 800123e:	d007      	beq.n	8001250 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001246:	2a08      	cmp	r2, #8
 8001248:	d111      	bne.n	800126e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	025e      	lsls	r6, r3, #9
 800124e:	d40e      	bmi.n	800126e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001250:	4b7a      	ldr	r3, [pc, #488]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	0795      	lsls	r5, r2, #30
 8001256:	d502      	bpl.n	800125e <HAL_RCC_OscConfig+0xf6>
 8001258:	68e2      	ldr	r2, [r4, #12]
 800125a:	2a01      	cmp	r2, #1
 800125c:	d188      	bne.n	8001170 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	6921      	ldr	r1, [r4, #16]
 8001262:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001266:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800126a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126c:	e78a      	b.n	8001184 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800126e:	68e2      	ldr	r2, [r4, #12]
 8001270:	4b73      	ldr	r3, [pc, #460]	; (8001440 <HAL_RCC_OscConfig+0x2d8>)
 8001272:	b1b2      	cbz	r2, 80012a2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001278:	f7ff f958 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	4d6f      	ldr	r5, [pc, #444]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800127e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	682b      	ldr	r3, [r5, #0]
 8001282:	0798      	lsls	r0, r3, #30
 8001284:	d507      	bpl.n	8001296 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	682b      	ldr	r3, [r5, #0]
 8001288:	6922      	ldr	r2, [r4, #16]
 800128a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800128e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001292:	602b      	str	r3, [r5, #0]
 8001294:	e776      	b.n	8001184 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001296:	f7ff f949 	bl	800052c <HAL_GetTick>
 800129a:	1b80      	subs	r0, r0, r6
 800129c:	2802      	cmp	r0, #2
 800129e:	d9ef      	bls.n	8001280 <HAL_RCC_OscConfig+0x118>
 80012a0:	e7a9      	b.n	80011f6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80012a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012a4:	f7ff f942 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a8:	4d64      	ldr	r5, [pc, #400]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80012aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ac:	682b      	ldr	r3, [r5, #0]
 80012ae:	0799      	lsls	r1, r3, #30
 80012b0:	f57f af68 	bpl.w	8001184 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff f93a 	bl	800052c <HAL_GetTick>
 80012b8:	1b80      	subs	r0, r0, r6
 80012ba:	2802      	cmp	r0, #2
 80012bc:	d9f6      	bls.n	80012ac <HAL_RCC_OscConfig+0x144>
 80012be:	e79a      	b.n	80011f6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012c0:	6962      	ldr	r2, [r4, #20]
 80012c2:	4b60      	ldr	r3, [pc, #384]	; (8001444 <HAL_RCC_OscConfig+0x2dc>)
 80012c4:	b17a      	cbz	r2, 80012e6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80012c6:	2201      	movs	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012ca:	f7ff f92f 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	4d5b      	ldr	r5, [pc, #364]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012d4:	079f      	lsls	r7, r3, #30
 80012d6:	f53f af59 	bmi.w	800118c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012da:	f7ff f927 	bl	800052c <HAL_GetTick>
 80012de:	1b80      	subs	r0, r0, r6
 80012e0:	2802      	cmp	r0, #2
 80012e2:	d9f6      	bls.n	80012d2 <HAL_RCC_OscConfig+0x16a>
 80012e4:	e787      	b.n	80011f6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80012e6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012e8:	f7ff f920 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ec:	4d53      	ldr	r5, [pc, #332]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012ee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012f2:	0798      	lsls	r0, r3, #30
 80012f4:	f57f af4a 	bpl.w	800118c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f8:	f7ff f918 	bl	800052c <HAL_GetTick>
 80012fc:	1b80      	subs	r0, r0, r6
 80012fe:	2802      	cmp	r0, #2
 8001300:	d9f6      	bls.n	80012f0 <HAL_RCC_OscConfig+0x188>
 8001302:	e778      	b.n	80011f6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001304:	4b4d      	ldr	r3, [pc, #308]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
 8001306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001308:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800130c:	d128      	bne.n	8001360 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	9201      	str	r2, [sp, #4]
 8001310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001312:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001316:	641a      	str	r2, [r3, #64]	; 0x40
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001322:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	4d48      	ldr	r5, [pc, #288]	; (8001448 <HAL_RCC_OscConfig+0x2e0>)
 8001326:	682b      	ldr	r3, [r5, #0]
 8001328:	05d9      	lsls	r1, r3, #23
 800132a:	d51b      	bpl.n	8001364 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132c:	68a3      	ldr	r3, [r4, #8]
 800132e:	4d43      	ldr	r5, [pc, #268]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
 8001330:	2b01      	cmp	r3, #1
 8001332:	d127      	bne.n	8001384 <HAL_RCC_OscConfig+0x21c>
 8001334:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800133c:	f7ff f8f6 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001340:	4d3e      	ldr	r5, [pc, #248]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001342:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001344:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001348:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800134a:	079b      	lsls	r3, r3, #30
 800134c:	d539      	bpl.n	80013c2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800134e:	2e00      	cmp	r6, #0
 8001350:	f43f af20 	beq.w	8001194 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001354:	4a39      	ldr	r2, [pc, #228]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
 8001356:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	e719      	b.n	8001194 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001360:	2600      	movs	r6, #0
 8001362:	e7df      	b.n	8001324 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800136c:	f7ff f8de 	bl	800052c <HAL_GetTick>
 8001370:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001372:	682b      	ldr	r3, [r5, #0]
 8001374:	05da      	lsls	r2, r3, #23
 8001376:	d4d9      	bmi.n	800132c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001378:	f7ff f8d8 	bl	800052c <HAL_GetTick>
 800137c:	1bc0      	subs	r0, r0, r7
 800137e:	2802      	cmp	r0, #2
 8001380:	d9f7      	bls.n	8001372 <HAL_RCC_OscConfig+0x20a>
 8001382:	e738      	b.n	80011f6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001384:	2b05      	cmp	r3, #5
 8001386:	d104      	bne.n	8001392 <HAL_RCC_OscConfig+0x22a>
 8001388:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	672b      	str	r3, [r5, #112]	; 0x70
 8001390:	e7d0      	b.n	8001334 <HAL_RCC_OscConfig+0x1cc>
 8001392:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001394:	f022 0201 	bic.w	r2, r2, #1
 8001398:	672a      	str	r2, [r5, #112]	; 0x70
 800139a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800139c:	f022 0204 	bic.w	r2, r2, #4
 80013a0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1ca      	bne.n	800133c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80013a6:	f7ff f8c1 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013aa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80013ae:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013b2:	0798      	lsls	r0, r3, #30
 80013b4:	d5cb      	bpl.n	800134e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b6:	f7ff f8b9 	bl	800052c <HAL_GetTick>
 80013ba:	1bc0      	subs	r0, r0, r7
 80013bc:	4540      	cmp	r0, r8
 80013be:	d9f7      	bls.n	80013b0 <HAL_RCC_OscConfig+0x248>
 80013c0:	e719      	b.n	80011f6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff f8b3 	bl	800052c <HAL_GetTick>
 80013c6:	1bc0      	subs	r0, r0, r7
 80013c8:	4540      	cmp	r0, r8
 80013ca:	d9bd      	bls.n	8001348 <HAL_RCC_OscConfig+0x1e0>
 80013cc:	e713      	b.n	80011f6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013ce:	4d1b      	ldr	r5, [pc, #108]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
 80013d0:	68ab      	ldr	r3, [r5, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	f43f aeca 	beq.w	8001170 <HAL_RCC_OscConfig+0x8>
 80013dc:	4e1b      	ldr	r6, [pc, #108]	; (800144c <HAL_RCC_OscConfig+0x2e4>)
 80013de:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013e2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e4:	d134      	bne.n	8001450 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80013e6:	f7ff f8a1 	bl	800052c <HAL_GetTick>
 80013ea:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ec:	682b      	ldr	r3, [r5, #0]
 80013ee:	0199      	lsls	r1, r3, #6
 80013f0:	d41e      	bmi.n	8001430 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013f2:	6a22      	ldr	r2, [r4, #32]
 80013f4:	69e3      	ldr	r3, [r4, #28]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013fa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001400:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001404:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001406:	4c0d      	ldr	r4, [pc, #52]	; (800143c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001408:	0852      	lsrs	r2, r2, #1
 800140a:	3a01      	subs	r2, #1
 800140c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001410:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001412:	2301      	movs	r3, #1
 8001414:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001416:	f7ff f889 	bl	800052c <HAL_GetTick>
 800141a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	019a      	lsls	r2, r3, #6
 8001420:	f53f aebc 	bmi.w	800119c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff f882 	bl	800052c <HAL_GetTick>
 8001428:	1b40      	subs	r0, r0, r5
 800142a:	2802      	cmp	r0, #2
 800142c:	d9f6      	bls.n	800141c <HAL_RCC_OscConfig+0x2b4>
 800142e:	e6e2      	b.n	80011f6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff f87c 	bl	800052c <HAL_GetTick>
 8001434:	1bc0      	subs	r0, r0, r7
 8001436:	2802      	cmp	r0, #2
 8001438:	d9d8      	bls.n	80013ec <HAL_RCC_OscConfig+0x284>
 800143a:	e6dc      	b.n	80011f6 <HAL_RCC_OscConfig+0x8e>
 800143c:	40023800 	.word	0x40023800
 8001440:	42470000 	.word	0x42470000
 8001444:	42470e80 	.word	0x42470e80
 8001448:	40007000 	.word	0x40007000
 800144c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001450:	f7ff f86c 	bl	800052c <HAL_GetTick>
 8001454:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001456:	682b      	ldr	r3, [r5, #0]
 8001458:	019b      	lsls	r3, r3, #6
 800145a:	f57f ae9f 	bpl.w	800119c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145e:	f7ff f865 	bl	800052c <HAL_GetTick>
 8001462:	1b00      	subs	r0, r0, r4
 8001464:	2802      	cmp	r0, #2
 8001466:	d9f6      	bls.n	8001456 <HAL_RCC_OscConfig+0x2ee>
 8001468:	e6c5      	b.n	80011f6 <HAL_RCC_OscConfig+0x8e>
 800146a:	bf00      	nop

0800146c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800146c:	4913      	ldr	r1, [pc, #76]	; (80014bc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800146e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001470:	688b      	ldr	r3, [r1, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b04      	cmp	r3, #4
 8001478:	d003      	beq.n	8001482 <HAL_RCC_GetSysClockFreq+0x16>
 800147a:	2b08      	cmp	r3, #8
 800147c:	d003      	beq.n	8001486 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800147e:	4810      	ldr	r0, [pc, #64]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001480:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001482:	4810      	ldr	r0, [pc, #64]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x58>)
 8001484:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001486:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001488:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800148a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800148c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001490:	bf14      	ite	ne
 8001492:	480c      	ldrne	r0, [pc, #48]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001494:	480a      	ldreq	r0, [pc, #40]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001496:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800149a:	bf18      	it	ne
 800149c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800149e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a2:	fba1 0100 	umull	r0, r1, r1, r0
 80014a6:	f7fe fe93 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <HAL_RCC_GetSysClockFreq+0x50>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014b2:	3301      	adds	r3, #1
 80014b4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80014b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80014ba:	bd08      	pop	{r3, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	00f42400 	.word	0x00f42400
 80014c4:	007a1200 	.word	0x007a1200

080014c8 <HAL_RCC_ClockConfig>:
{
 80014c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014cc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80014ce:	4604      	mov	r4, r0
 80014d0:	b910      	cbnz	r0, 80014d8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80014d2:	2001      	movs	r0, #1
 80014d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014d8:	4b44      	ldr	r3, [pc, #272]	; (80015ec <HAL_RCC_ClockConfig+0x124>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	f002 020f 	and.w	r2, r2, #15
 80014e0:	428a      	cmp	r2, r1
 80014e2:	d328      	bcc.n	8001536 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e4:	6821      	ldr	r1, [r4, #0]
 80014e6:	078f      	lsls	r7, r1, #30
 80014e8:	d42d      	bmi.n	8001546 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ea:	07c8      	lsls	r0, r1, #31
 80014ec:	d440      	bmi.n	8001570 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014ee:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <HAL_RCC_ClockConfig+0x124>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	f002 020f 	and.w	r2, r2, #15
 80014f6:	4295      	cmp	r5, r2
 80014f8:	d366      	bcc.n	80015c8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fa:	6822      	ldr	r2, [r4, #0]
 80014fc:	0751      	lsls	r1, r2, #29
 80014fe:	d46c      	bmi.n	80015da <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001500:	0713      	lsls	r3, r2, #28
 8001502:	d507      	bpl.n	8001514 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001504:	4a3a      	ldr	r2, [pc, #232]	; (80015f0 <HAL_RCC_ClockConfig+0x128>)
 8001506:	6921      	ldr	r1, [r4, #16]
 8001508:	6893      	ldr	r3, [r2, #8]
 800150a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800150e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001512:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001514:	f7ff ffaa 	bl	800146c <HAL_RCC_GetSysClockFreq>
 8001518:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <HAL_RCC_ClockConfig+0x128>)
 800151a:	4a36      	ldr	r2, [pc, #216]	; (80015f4 <HAL_RCC_ClockConfig+0x12c>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	40d8      	lsrs	r0, r3
 8001526:	4b34      	ldr	r3, [pc, #208]	; (80015f8 <HAL_RCC_ClockConfig+0x130>)
 8001528:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800152a:	2000      	movs	r0, #0
 800152c:	f002 fea2 	bl	8004274 <HAL_InitTick>
  return HAL_OK;
 8001530:	2000      	movs	r0, #0
 8001532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 030f 	and.w	r3, r3, #15
 8001540:	4299      	cmp	r1, r3
 8001542:	d1c6      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xa>
 8001544:	e7ce      	b.n	80014e4 <HAL_RCC_ClockConfig+0x1c>
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800154c:	bf1e      	ittt	ne
 800154e:	689a      	ldrne	r2, [r3, #8]
 8001550:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001554:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001556:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001558:	bf42      	ittt	mi
 800155a:	689a      	ldrmi	r2, [r3, #8]
 800155c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001560:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	68a0      	ldr	r0, [r4, #8]
 8001566:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800156a:	4302      	orrs	r2, r0
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	e7bc      	b.n	80014ea <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001570:	6862      	ldr	r2, [r4, #4]
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HAL_RCC_ClockConfig+0x128>)
 8001574:	2a01      	cmp	r2, #1
 8001576:	d11d      	bne.n	80015b4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157e:	d0a8      	beq.n	80014d2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001580:	4e1b      	ldr	r6, [pc, #108]	; (80015f0 <HAL_RCC_ClockConfig+0x128>)
 8001582:	68b3      	ldr	r3, [r6, #8]
 8001584:	f023 0303 	bic.w	r3, r3, #3
 8001588:	4313      	orrs	r3, r2
 800158a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800158c:	f7fe ffce 	bl	800052c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001590:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001594:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	68b3      	ldr	r3, [r6, #8]
 8001598:	6862      	ldr	r2, [r4, #4]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015a2:	d0a4      	beq.n	80014ee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a4:	f7fe ffc2 	bl	800052c <HAL_GetTick>
 80015a8:	1bc0      	subs	r0, r0, r7
 80015aa:	4540      	cmp	r0, r8
 80015ac:	d9f3      	bls.n	8001596 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80015ae:	2003      	movs	r0, #3
}
 80015b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015b4:	1e91      	subs	r1, r2, #2
 80015b6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ba:	d802      	bhi.n	80015c2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015c0:	e7dd      	b.n	800157e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c2:	f013 0f02 	tst.w	r3, #2
 80015c6:	e7da      	b.n	800157e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c8:	b2ea      	uxtb	r2, r5
 80015ca:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	429d      	cmp	r5, r3
 80015d4:	f47f af7d 	bne.w	80014d2 <HAL_RCC_ClockConfig+0xa>
 80015d8:	e78f      	b.n	80014fa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015da:	4905      	ldr	r1, [pc, #20]	; (80015f0 <HAL_RCC_ClockConfig+0x128>)
 80015dc:	68e0      	ldr	r0, [r4, #12]
 80015de:	688b      	ldr	r3, [r1, #8]
 80015e0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015e4:	4303      	orrs	r3, r0
 80015e6:	608b      	str	r3, [r1, #8]
 80015e8:	e78a      	b.n	8001500 <HAL_RCC_ClockConfig+0x38>
 80015ea:	bf00      	nop
 80015ec:	40023c00 	.word	0x40023c00
 80015f0:	40023800 	.word	0x40023800
 80015f4:	08004af2 	.word	0x08004af2
 80015f8:	20000118 	.word	0x20000118

080015fc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80015fc:	4b01      	ldr	r3, [pc, #4]	; (8001604 <HAL_RCC_GetHCLKFreq+0x8>)
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000118 	.word	0x20000118

08001608 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <HAL_RCC_GetPCLK1Freq+0x14>)
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <HAL_RCC_GetPCLK1Freq+0x18>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001612:	5cd3      	ldrb	r3, [r2, r3]
 8001614:	4a03      	ldr	r2, [pc, #12]	; (8001624 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001616:	6810      	ldr	r0, [r2, #0]
}
 8001618:	40d8      	lsrs	r0, r3
 800161a:	4770      	bx	lr
 800161c:	40023800 	.word	0x40023800
 8001620:	08004b02 	.word	0x08004b02
 8001624:	20000118 	.word	0x20000118

08001628 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001628:	230f      	movs	r3, #15
 800162a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_GetClockConfig+0x34>)
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800163c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001644:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800164e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_RCC_GetClockConfig+0x38>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	600b      	str	r3, [r1, #0]
 800165a:	4770      	bx	lr
 800165c:	40023800 	.word	0x40023800
 8001660:	40023c00 	.word	0x40023c00

08001664 <HAL_TIM_Base_MspInit>:
 8001664:	4770      	bx	lr

08001666 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001666:	6803      	ldr	r3, [r0, #0]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	f042 0201 	orr.w	r2, r2, #1
 800166e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001676:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001678:	bf1e      	ittt	ne
 800167a:	681a      	ldrne	r2, [r3, #0]
 800167c:	f042 0201 	orrne.w	r2, r2, #1
 8001680:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001682:	2000      	movs	r0, #0
 8001684:	4770      	bx	lr

08001686 <HAL_TIM_OC_DelayElapsedCallback>:
 8001686:	4770      	bx	lr

08001688 <HAL_TIM_IC_CaptureCallback>:
 8001688:	4770      	bx	lr

0800168a <HAL_TIM_PWM_PulseFinishedCallback>:
 800168a:	4770      	bx	lr

0800168c <HAL_TIM_TriggerCallback>:
 800168c:	4770      	bx	lr

0800168e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800168e:	6803      	ldr	r3, [r0, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	0791      	lsls	r1, r2, #30
{
 8001694:	b510      	push	{r4, lr}
 8001696:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001698:	d50e      	bpl.n	80016b8 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	0792      	lsls	r2, r2, #30
 800169e:	d50b      	bpl.n	80016b8 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016a0:	f06f 0202 	mvn.w	r2, #2
 80016a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016a6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016a8:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016aa:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016ac:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016ae:	d077      	beq.n	80017a0 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016b0:	f7ff ffea 	bl	8001688 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016b4:	2300      	movs	r3, #0
 80016b6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016b8:	6823      	ldr	r3, [r4, #0]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	0750      	lsls	r0, r2, #29
 80016be:	d510      	bpl.n	80016e2 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	0751      	lsls	r1, r2, #29
 80016c4:	d50d      	bpl.n	80016e2 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016c6:	f06f 0204 	mvn.w	r2, #4
 80016ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016cc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016ce:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016d0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016d4:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016d6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016d8:	d068      	beq.n	80017ac <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80016da:	f7ff ffd5 	bl	8001688 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016de:	2300      	movs	r3, #0
 80016e0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	0712      	lsls	r2, r2, #28
 80016e8:	d50f      	bpl.n	800170a <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	0710      	lsls	r0, r2, #28
 80016ee:	d50c      	bpl.n	800170a <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80016f0:	f06f 0208 	mvn.w	r2, #8
 80016f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016f6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016f8:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016fa:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016fc:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016fe:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001700:	d05a      	beq.n	80017b8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001702:	f7ff ffc1 	bl	8001688 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001706:	2300      	movs	r3, #0
 8001708:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	06d2      	lsls	r2, r2, #27
 8001710:	d510      	bpl.n	8001734 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	06d0      	lsls	r0, r2, #27
 8001716:	d50d      	bpl.n	8001734 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001718:	f06f 0210 	mvn.w	r2, #16
 800171c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800171e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001720:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001722:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001726:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001728:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800172a:	d04b      	beq.n	80017c4 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800172c:	f7ff ffac 	bl	8001688 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001730:	2300      	movs	r3, #0
 8001732:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	07d1      	lsls	r1, r2, #31
 800173a:	d508      	bpl.n	800174e <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	07d2      	lsls	r2, r2, #31
 8001740:	d505      	bpl.n	800174e <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001742:	f06f 0201 	mvn.w	r2, #1
 8001746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001748:	4620      	mov	r0, r4
 800174a:	f002 fd65 	bl	8004218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	0610      	lsls	r0, r2, #24
 8001754:	d508      	bpl.n	8001768 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	0611      	lsls	r1, r2, #24
 800175a:	d505      	bpl.n	8001768 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800175c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001762:	4620      	mov	r0, r4
 8001764:	f000 f8b7 	bl	80018d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	0652      	lsls	r2, r2, #25
 800176e:	d508      	bpl.n	8001782 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	0650      	lsls	r0, r2, #25
 8001774:	d505      	bpl.n	8001782 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001776:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800177a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800177c:	4620      	mov	r0, r4
 800177e:	f7ff ff85 	bl	800168c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	0691      	lsls	r1, r2, #26
 8001788:	d522      	bpl.n	80017d0 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	0692      	lsls	r2, r2, #26
 800178e:	d51f      	bpl.n	80017d0 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001790:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001794:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001796:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800179c:	f000 b89a 	b.w	80018d4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a0:	f7ff ff71 	bl	8001686 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7ff ff70 	bl	800168a <HAL_TIM_PWM_PulseFinishedCallback>
 80017aa:	e783      	b.n	80016b4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ac:	f7ff ff6b 	bl	8001686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b0:	4620      	mov	r0, r4
 80017b2:	f7ff ff6a 	bl	800168a <HAL_TIM_PWM_PulseFinishedCallback>
 80017b6:	e792      	b.n	80016de <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017b8:	f7ff ff65 	bl	8001686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff ff64 	bl	800168a <HAL_TIM_PWM_PulseFinishedCallback>
 80017c2:	e7a0      	b.n	8001706 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c4:	f7ff ff5f 	bl	8001686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c8:	4620      	mov	r0, r4
 80017ca:	f7ff ff5e 	bl	800168a <HAL_TIM_PWM_PulseFinishedCallback>
 80017ce:	e7af      	b.n	8001730 <HAL_TIM_IRQHandler+0xa2>
 80017d0:	bd10      	pop	{r4, pc}
	...

080017d4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d4:	4a30      	ldr	r2, [pc, #192]	; (8001898 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80017d6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d8:	4290      	cmp	r0, r2
 80017da:	d012      	beq.n	8001802 <TIM_Base_SetConfig+0x2e>
 80017dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017e0:	d00f      	beq.n	8001802 <TIM_Base_SetConfig+0x2e>
 80017e2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80017e6:	4290      	cmp	r0, r2
 80017e8:	d00b      	beq.n	8001802 <TIM_Base_SetConfig+0x2e>
 80017ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017ee:	4290      	cmp	r0, r2
 80017f0:	d007      	beq.n	8001802 <TIM_Base_SetConfig+0x2e>
 80017f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017f6:	4290      	cmp	r0, r2
 80017f8:	d003      	beq.n	8001802 <TIM_Base_SetConfig+0x2e>
 80017fa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80017fe:	4290      	cmp	r0, r2
 8001800:	d119      	bne.n	8001836 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001802:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001808:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800180a:	4a23      	ldr	r2, [pc, #140]	; (8001898 <TIM_Base_SetConfig+0xc4>)
 800180c:	4290      	cmp	r0, r2
 800180e:	d029      	beq.n	8001864 <TIM_Base_SetConfig+0x90>
 8001810:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001814:	d026      	beq.n	8001864 <TIM_Base_SetConfig+0x90>
 8001816:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800181a:	4290      	cmp	r0, r2
 800181c:	d022      	beq.n	8001864 <TIM_Base_SetConfig+0x90>
 800181e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001822:	4290      	cmp	r0, r2
 8001824:	d01e      	beq.n	8001864 <TIM_Base_SetConfig+0x90>
 8001826:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800182a:	4290      	cmp	r0, r2
 800182c:	d01a      	beq.n	8001864 <TIM_Base_SetConfig+0x90>
 800182e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001832:	4290      	cmp	r0, r2
 8001834:	d016      	beq.n	8001864 <TIM_Base_SetConfig+0x90>
 8001836:	4a19      	ldr	r2, [pc, #100]	; (800189c <TIM_Base_SetConfig+0xc8>)
 8001838:	4290      	cmp	r0, r2
 800183a:	d013      	beq.n	8001864 <TIM_Base_SetConfig+0x90>
 800183c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001840:	4290      	cmp	r0, r2
 8001842:	d00f      	beq.n	8001864 <TIM_Base_SetConfig+0x90>
 8001844:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001848:	4290      	cmp	r0, r2
 800184a:	d00b      	beq.n	8001864 <TIM_Base_SetConfig+0x90>
 800184c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001850:	4290      	cmp	r0, r2
 8001852:	d007      	beq.n	8001864 <TIM_Base_SetConfig+0x90>
 8001854:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001858:	4290      	cmp	r0, r2
 800185a:	d003      	beq.n	8001864 <TIM_Base_SetConfig+0x90>
 800185c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001860:	4290      	cmp	r0, r2
 8001862:	d103      	bne.n	800186c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001864:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800186a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800186c:	694a      	ldr	r2, [r1, #20]
 800186e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001872:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001874:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001876:	688b      	ldr	r3, [r1, #8]
 8001878:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800187a:	680b      	ldr	r3, [r1, #0]
 800187c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <TIM_Base_SetConfig+0xc4>)
 8001880:	4298      	cmp	r0, r3
 8001882:	d003      	beq.n	800188c <TIM_Base_SetConfig+0xb8>
 8001884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001888:	4298      	cmp	r0, r3
 800188a:	d101      	bne.n	8001890 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800188c:	690b      	ldr	r3, [r1, #16]
 800188e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001890:	2301      	movs	r3, #1
 8001892:	6143      	str	r3, [r0, #20]
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40010000 	.word	0x40010000
 800189c:	40014000 	.word	0x40014000

080018a0 <HAL_TIM_Base_Init>:
{
 80018a0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80018a2:	4604      	mov	r4, r0
 80018a4:	b1a0      	cbz	r0, 80018d0 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80018a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018ae:	b91b      	cbnz	r3, 80018b8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80018b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80018b4:	f7ff fed6 	bl	8001664 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80018b8:	2302      	movs	r3, #2
 80018ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018be:	6820      	ldr	r0, [r4, #0]
 80018c0:	1d21      	adds	r1, r4, #4
 80018c2:	f7ff ff87 	bl	80017d4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80018cc:	2000      	movs	r0, #0
 80018ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018d0:	2001      	movs	r0, #1
}
 80018d2:	bd10      	pop	{r4, pc}

080018d4 <HAL_TIMEx_CommutCallback>:
 80018d4:	4770      	bx	lr

080018d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018d6:	4770      	bx	lr

080018d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80018da:	3b01      	subs	r3, #1
 80018dc:	d101      	bne.n	80018e2 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80018de:	2003      	movs	r0, #3
 80018e0:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80018e2:	6902      	ldr	r2, [r0, #16]
 80018e4:	2a00      	cmp	r2, #0
 80018e6:	daf8      	bge.n	80018da <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80018e8:	6903      	ldr	r3, [r0, #16]
 80018ea:	4a06      	ldr	r2, [pc, #24]	; (8001904 <USB_CoreReset+0x2c>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80018f2:	3a01      	subs	r2, #1
 80018f4:	d0f3      	beq.n	80018de <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80018f6:	6903      	ldr	r3, [r0, #16]
 80018f8:	f013 0301 	ands.w	r3, r3, #1
 80018fc:	d1f9      	bne.n	80018f2 <USB_CoreReset+0x1a>

  return HAL_OK;
 80018fe:	4618      	mov	r0, r3
}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	00030d41 	.word	0x00030d41

08001908 <USB_CoreInit>:
{
 8001908:	b084      	sub	sp, #16
 800190a:	b538      	push	{r3, r4, r5, lr}
 800190c:	ad05      	add	r5, sp, #20
 800190e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001914:	2b01      	cmp	r3, #1
{
 8001916:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001918:	d125      	bne.n	8001966 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800191a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800191c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001920:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001922:	68c3      	ldr	r3, [r0, #12]
 8001924:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800192c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800192e:	68c3      	ldr	r3, [r0, #12]
 8001930:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001934:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001938:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800193a:	bf02      	ittt	eq
 800193c:	68c3      	ldreq	r3, [r0, #12]
 800193e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001942:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001944:	f7ff ffc8 	bl	80018d8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001948:	9b08      	ldr	r3, [sp, #32]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d107      	bne.n	800195e <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800194e:	68a3      	ldr	r3, [r4, #8]
 8001950:	f043 0306 	orr.w	r3, r3, #6
 8001954:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001956:	68a3      	ldr	r3, [r4, #8]
 8001958:	f043 0320 	orr.w	r3, r3, #32
 800195c:	60a3      	str	r3, [r4, #8]
}
 800195e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001962:	b004      	add	sp, #16
 8001964:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001966:	68c3      	ldr	r3, [r0, #12]
 8001968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800196c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800196e:	f7ff ffb3 	bl	80018d8 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8001972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001974:	b923      	cbnz	r3, 8001980 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001976:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800197c:	63a3      	str	r3, [r4, #56]	; 0x38
 800197e:	e7e3      	b.n	8001948 <USB_CoreInit+0x40>
 8001980:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001986:	e7f9      	b.n	800197c <USB_CoreInit+0x74>

08001988 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8001988:	2a02      	cmp	r2, #2
 800198a:	d158      	bne.n	8001a3e <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800198c:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <USB_SetTurnaroundTime+0xc0>)
 800198e:	4a2f      	ldr	r2, [pc, #188]	; (8001a4c <USB_SetTurnaroundTime+0xc4>)
 8001990:	440b      	add	r3, r1
 8001992:	4293      	cmp	r3, r2
 8001994:	d947      	bls.n	8001a26 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8001996:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <USB_SetTurnaroundTime+0xc8>)
 8001998:	4a2e      	ldr	r2, [pc, #184]	; (8001a54 <USB_SetTurnaroundTime+0xcc>)
 800199a:	440b      	add	r3, r1
 800199c:	4293      	cmp	r3, r2
 800199e:	d944      	bls.n	8001a2a <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80019a0:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 80019a4:	4a2c      	ldr	r2, [pc, #176]	; (8001a58 <USB_SetTurnaroundTime+0xd0>)
 80019a6:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d93f      	bls.n	8001a2e <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80019ae:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 80019b2:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 80019b6:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80019ba:	32a0      	adds	r2, #160	; 0xa0
 80019bc:	4293      	cmp	r3, r2
 80019be:	d938      	bls.n	8001a32 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <USB_SetTurnaroundTime+0xd4>)
 80019c2:	4a27      	ldr	r2, [pc, #156]	; (8001a60 <USB_SetTurnaroundTime+0xd8>)
 80019c4:	440b      	add	r3, r1
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d935      	bls.n	8001a36 <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <USB_SetTurnaroundTime+0xdc>)
 80019cc:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 80019d0:	440b      	add	r3, r1
 80019d2:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d92f      	bls.n	8001a3a <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <USB_SetTurnaroundTime+0xe0>)
 80019dc:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80019e0:	440b      	add	r3, r1
 80019e2:	f502 7220 	add.w	r2, r2, #640	; 0x280
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d929      	bls.n	8001a3e <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80019ea:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80019ee:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 80019f2:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80019f6:	f502 7258 	add.w	r2, r2, #864	; 0x360
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d921      	bls.n	8001a42 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 8001a00:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8001a04:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 8001a06:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	bf94      	ite	ls
 8001a0e:	2307      	movls	r3, #7
 8001a10:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001a12:	68c2      	ldr	r2, [r0, #12]
 8001a14:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001a18:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a1a:	68c2      	ldr	r2, [r0, #12]
 8001a1c:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8001a20:	60c3      	str	r3, [r0, #12]
}
 8001a22:	2000      	movs	r0, #0
 8001a24:	4770      	bx	lr
      UsbTrd = 0xFU;
 8001a26:	230f      	movs	r3, #15
 8001a28:	e7f3      	b.n	8001a12 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 8001a2a:	230e      	movs	r3, #14
 8001a2c:	e7f1      	b.n	8001a12 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 8001a2e:	230d      	movs	r3, #13
 8001a30:	e7ef      	b.n	8001a12 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 8001a32:	230c      	movs	r3, #12
 8001a34:	e7ed      	b.n	8001a12 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 8001a36:	230b      	movs	r3, #11
 8001a38:	e7eb      	b.n	8001a12 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	e7e9      	b.n	8001a12 <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8001a3e:	2309      	movs	r3, #9
 8001a40:	e7e7      	b.n	8001a12 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 8001a42:	2308      	movs	r3, #8
 8001a44:	e7e5      	b.n	8001a12 <USB_SetTurnaroundTime+0x8a>
 8001a46:	bf00      	nop
 8001a48:	ff275340 	.word	0xff275340
 8001a4c:	000c34ff 	.word	0x000c34ff
 8001a50:	ff1b1e40 	.word	0xff1b1e40
 8001a54:	000f423f 	.word	0x000f423f
 8001a58:	00124f7f 	.word	0x00124f7f
 8001a5c:	fee5b660 	.word	0xfee5b660
 8001a60:	0016e35f 	.word	0x0016e35f
 8001a64:	feced300 	.word	0xfeced300
 8001a68:	feb35bc0 	.word	0xfeb35bc0
 8001a6c:	fe5954e0 	.word	0xfe5954e0

08001a70 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001a70:	6883      	ldr	r3, [r0, #8]
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6083      	str	r3, [r0, #8]
}
 8001a78:	2000      	movs	r0, #0
 8001a7a:	4770      	bx	lr

08001a7c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001a7c:	6883      	ldr	r3, [r0, #8]
 8001a7e:	f023 0301 	bic.w	r3, r3, #1
 8001a82:	6083      	str	r3, [r0, #8]
}
 8001a84:	2000      	movs	r0, #0
 8001a86:	4770      	bx	lr

08001a88 <USB_SetCurrentMode>:
{
 8001a88:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001a8a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001a8c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001a8e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001a92:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001a94:	d108      	bne.n	8001aa8 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001a96:	68c3      	ldr	r3, [r0, #12]
 8001a98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001a9c:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8001a9e:	2032      	movs	r0, #50	; 0x32
 8001aa0:	f7fe fd4a 	bl	8000538 <HAL_Delay>
  return HAL_OK;
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8001aa8:	b919      	cbnz	r1, 8001ab2 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001aaa:	68c3      	ldr	r3, [r0, #12]
 8001aac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ab0:	e7f4      	b.n	8001a9c <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8001ab2:	2001      	movs	r0, #1
}
 8001ab4:	bd08      	pop	{r3, pc}
	...

08001ab8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001ab8:	0189      	lsls	r1, r1, #6
 8001aba:	f041 0120 	orr.w	r1, r1, #32
 8001abe:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <USB_FlushTxFifo+0x20>)
 8001ac0:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	d005      	beq.n	8001ad2 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001ac6:	6903      	ldr	r3, [r0, #16]
 8001ac8:	f013 0320 	ands.w	r3, r3, #32
 8001acc:	d1f9      	bne.n	8001ac2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8001ace:	4618      	mov	r0, r3
 8001ad0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001ad2:	2003      	movs	r0, #3
}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	00030d41 	.word	0x00030d41

08001adc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001adc:	2310      	movs	r3, #16
 8001ade:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <USB_FlushRxFifo+0x1c>)
 8001ae0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8001ae2:	3a01      	subs	r2, #1
 8001ae4:	d005      	beq.n	8001af2 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001ae6:	6903      	ldr	r3, [r0, #16]
 8001ae8:	f013 0310 	ands.w	r3, r3, #16
 8001aec:	d1f9      	bne.n	8001ae2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8001aee:	4618      	mov	r0, r3
 8001af0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001af2:	2003      	movs	r0, #3
}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	00030d41 	.word	0x00030d41

08001afc <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8001afc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001b00:	4319      	orrs	r1, r3
 8001b02:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8001b06:	2000      	movs	r0, #0
 8001b08:	4770      	bx	lr
	...

08001b0c <USB_DevInit>:
{
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b12:	4604      	mov	r4, r0
 8001b14:	a809      	add	r0, sp, #36	; 0x24
 8001b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001b1e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8001b20:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8001b22:	4619      	mov	r1, r3
 8001b24:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001b28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8001b30:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8001b32:	d1f7      	bne.n	8001b24 <USB_DevInit+0x18>
  if (cfg.vbus_sensing_enable == 0U)
 8001b34:	2e00      	cmp	r6, #0
 8001b36:	d173      	bne.n	8001c20 <USB_DevInit+0x114>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001b38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b3e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001b40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b42:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001b46:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001b48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001b4e:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001b56:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001b5a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b60:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001b62:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001b66:	d165      	bne.n	8001c34 <USB_DevInit+0x128>
    if (cfg.speed == USBD_HS_SPEED)
 8001b68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001b6a:	2900      	cmp	r1, #0
 8001b6c:	d160      	bne.n	8001c30 <USB_DevInit+0x124>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f7ff ffc4 	bl	8001afc <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001b74:	2110      	movs	r1, #16
 8001b76:	4620      	mov	r0, r4
 8001b78:	f7ff ff9e 	bl	8001ab8 <USB_FlushTxFifo>
 8001b7c:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f7ff ffac 	bl	8001adc <USB_FlushRxFifo>
 8001b84:	2800      	cmp	r0, #0
 8001b86:	d157      	bne.n	8001c38 <USB_DevInit+0x12c>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001b88:	1c08      	adds	r0, r1, #0
 8001b8a:	bf18      	it	ne
 8001b8c:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	612b      	str	r3, [r5, #16]
 8001b92:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 8001b96:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8001b98:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 8001b9a:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001b9c:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001ba0:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001ba4:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001ba8:	4543      	cmp	r3, r8
 8001baa:	d147      	bne.n	8001c3c <USB_DevInit+0x130>
 8001bac:	2100      	movs	r1, #0
 8001bae:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001bb2:	468e      	mov	lr, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001bb4:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001bb8:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001bbc:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001bc0:	428b      	cmp	r3, r1
 8001bc2:	d14e      	bne.n	8001c62 <USB_DevInit+0x156>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001bc4:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8001bc6:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bcc:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8001bce:	d107      	bne.n	8001be0 <USB_DevInit+0xd4>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <USB_DevInit+0x180>)
 8001bd2:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8001bd4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bda:	f043 0303 	orr.w	r3, r3, #3
 8001bde:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001be4:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001be8:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8001bea:	b91f      	cbnz	r7, 8001bf4 <USB_DevInit+0xe8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001bec:	69a3      	ldr	r3, [r4, #24]
 8001bee:	f043 0310 	orr.w	r3, r3, #16
 8001bf2:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001bf4:	69a2      	ldr	r2, [r4, #24]
 8001bf6:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <USB_DevInit+0x184>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8001bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001bfe:	b11b      	cbz	r3, 8001c08 <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8001c00:	69a3      	ldr	r3, [r4, #24]
 8001c02:	f043 0308 	orr.w	r3, r3, #8
 8001c06:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8001c08:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8001c0a:	bf01      	itttt	eq
 8001c0c:	69a3      	ldreq	r3, [r4, #24]
 8001c0e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001c12:	f043 0304 	orreq.w	r3, r3, #4
 8001c16:	61a3      	streq	r3, [r4, #24]
}
 8001c18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c1c:	b004      	add	sp, #16
 8001c1e:	4770      	bx	lr
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c26:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001c28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c2e:	e78e      	b.n	8001b4e <USB_DevInit+0x42>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8001c30:	4619      	mov	r1, r3
 8001c32:	e79c      	b.n	8001b6e <USB_DevInit+0x62>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001c34:	2103      	movs	r1, #3
 8001c36:	e79a      	b.n	8001b6e <USB_DevInit+0x62>
 8001c38:	2001      	movs	r0, #1
 8001c3a:	e7a8      	b.n	8001b8e <USB_DevInit+0x82>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001c3c:	f8d2 a000 	ldr.w	sl, [r2]
 8001c40:	f1ba 0f00 	cmp.w	sl, #0
 8001c44:	da0b      	bge.n	8001c5e <USB_DevInit+0x152>
      if (i == 0U)
 8001c46:	b93b      	cbnz	r3, 8001c58 <USB_DevInit+0x14c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001c48:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001c4c:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001c4e:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001c50:	f8c2 9008 	str.w	r9, [r2, #8]
 8001c54:	3220      	adds	r2, #32
 8001c56:	e7a7      	b.n	8001ba8 <USB_DevInit+0x9c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001c58:	f8c2 e000 	str.w	lr, [r2]
 8001c5c:	e7f6      	b.n	8001c4c <USB_DevInit+0x140>
      USBx_INEP(i)->DIEPCTL = 0U;
 8001c5e:	6011      	str	r1, [r2, #0]
 8001c60:	e7f4      	b.n	8001c4c <USB_DevInit+0x140>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001c62:	f8d2 a000 	ldr.w	sl, [r2]
 8001c66:	f1ba 0f00 	cmp.w	sl, #0
 8001c6a:	da0c      	bge.n	8001c86 <USB_DevInit+0x17a>
      if (i == 0U)
 8001c6c:	b941      	cbnz	r1, 8001c80 <USB_DevInit+0x174>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001c6e:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001c72:	f8c2 e010 	str.w	lr, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001c76:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001c78:	f8c2 9008 	str.w	r9, [r2, #8]
 8001c7c:	3220      	adds	r2, #32
 8001c7e:	e79f      	b.n	8001bc0 <USB_DevInit+0xb4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001c80:	f8c2 c000 	str.w	ip, [r2]
 8001c84:	e7f5      	b.n	8001c72 <USB_DevInit+0x166>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001c86:	f8c2 e000 	str.w	lr, [r2]
 8001c8a:	e7f2      	b.n	8001c72 <USB_DevInit+0x166>
 8001c8c:	00800100 	.word	0x00800100
 8001c90:	803c3800 	.word	0x803c3800

08001c94 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8001c94:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8001c98:	f013 0006 	ands.w	r0, r3, #6
 8001c9c:	d004      	beq.n	8001ca8 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8001c9e:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 8001ca2:	bf14      	ite	ne
 8001ca4:	2002      	movne	r0, #2
 8001ca6:	200f      	moveq	r0, #15
}
 8001ca8:	4770      	bx	lr

08001caa <USB_ActivateEndpoint>:
{
 8001caa:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8001cac:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8001cae:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001cb0:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8001cb4:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8001cb8:	2a01      	cmp	r2, #1
 8001cba:	f004 050f 	and.w	r5, r4, #15
 8001cbe:	d11b      	bne.n	8001cf8 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001cc0:	40aa      	lsls	r2, r5
 8001cc2:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001cc4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001cc8:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001cca:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001cce:	041a      	lsls	r2, r3, #16
 8001cd0:	d410      	bmi.n	8001cf4 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8001cd2:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8001cd4:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8001cd6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8001cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001cea:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8001cf8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cfc:	40aa      	lsls	r2, r5
 8001cfe:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001d00:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8001d04:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001d06:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8001d0a:	041b      	lsls	r3, r3, #16
 8001d0c:	d4f2      	bmi.n	8001cf4 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8001d0e:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8001d10:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8001d12:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8001d16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d22:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001d26:	4313      	orrs	r3, r2
 8001d28:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8001d2c:	e7e2      	b.n	8001cf4 <USB_ActivateEndpoint+0x4a>
	...

08001d30 <USB_DeactivateEndpoint>:
{
 8001d30:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8001d32:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8001d34:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001d36:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8001d3a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	f004 050f 	and.w	r5, r4, #15
 8001d44:	d110      	bne.n	8001d68 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001d46:	40ab      	lsls	r3, r5
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	4019      	ands	r1, r3
 8001d4c:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001d4e:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8001d50:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8001d54:	400b      	ands	r3, r1
 8001d56:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8001d58:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <USB_DeactivateEndpoint+0x5c>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8001d64:	2000      	movs	r0, #0
 8001d66:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d6c:	40ab      	lsls	r3, r5
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	4019      	ands	r1, r3
 8001d72:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001d74:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8001d76:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001d7a:	400b      	ands	r3, r1
 8001d7c:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8001d7e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8001d82:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <USB_DeactivateEndpoint+0x60>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8001d8a:	e7eb      	b.n	8001d64 <USB_DeactivateEndpoint+0x34>
 8001d8c:	ec337800 	.word	0xec337800
 8001d90:	eff37800 	.word	0xeff37800

08001d94 <USB_EP0StartXfer>:
{
 8001d94:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8001d96:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8001d98:	780c      	ldrb	r4, [r1, #0]
 8001d9a:	694e      	ldr	r6, [r1, #20]
 8001d9c:	4f41      	ldr	r7, [pc, #260]	; (8001ea4 <USB_EP0StartXfer+0x110>)
  if (ep->is_in == 1U)
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	f04f 0320 	mov.w	r3, #32
 8001da4:	d159      	bne.n	8001e5a <USB_EP0StartXfer+0xc6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001da6:	fb13 0304 	smlabb	r3, r3, r4, r0
    if (ep->xfer_len == 0U)
 8001daa:	bb36      	cbnz	r6, 8001dfa <USB_EP0StartXfer+0x66>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001dac:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8001db0:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001db4:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001db8:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001dbc:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8001dc0:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8001dc4:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001dc8:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8001dcc:	402f      	ands	r7, r5
 8001dce:	f8c3 7910 	str.w	r7, [r3, #2320]	; 0x910
    if (dma == 1U)
 8001dd2:	2a01      	cmp	r2, #1
 8001dd4:	f04f 0320 	mov.w	r3, #32
 8001dd8:	d129      	bne.n	8001e2e <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 8001dda:	690a      	ldr	r2, [r1, #16]
 8001ddc:	b11a      	cbz	r2, 8001de6 <USB_EP0StartXfer+0x52>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001dde:	fb13 0304 	smlabb	r3, r3, r4, r0
 8001de2:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001de6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8001dea:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8001dee:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8001df2:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 8001df6:	2000      	movs	r0, #0
 8001df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dfe:	691d      	ldr	r5, [r3, #16]
 8001e00:	402f      	ands	r7, r5
 8001e02:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001e04:	691d      	ldr	r5, [r3, #16]
 8001e06:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001e0a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001e0e:	611d      	str	r5, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8001e10:	688d      	ldr	r5, [r1, #8]
 8001e12:	42ae      	cmp	r6, r5
        ep->xfer_len = ep->maxpacket;
 8001e14:	bf88      	it	hi
 8001e16:	614d      	strhi	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001e18:	691d      	ldr	r5, [r3, #16]
 8001e1a:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8001e1e:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8001e20:	694d      	ldr	r5, [r1, #20]
 8001e22:	691e      	ldr	r6, [r3, #16]
 8001e24:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001e28:	4335      	orrs	r5, r6
 8001e2a:	611d      	str	r5, [r3, #16]
 8001e2c:	e7d1      	b.n	8001dd2 <USB_EP0StartXfer+0x3e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001e2e:	fb13 0404 	smlabb	r4, r3, r4, r0
 8001e32:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8001e36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001e3a:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8001e3e:	694b      	ldr	r3, [r1, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0d8      	beq.n	8001df6 <USB_EP0StartXfer+0x62>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8001e44:	780a      	ldrb	r2, [r1, #0]
 8001e46:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8001e4a:	f002 010f 	and.w	r1, r2, #15
 8001e4e:	2201      	movs	r2, #1
 8001e50:	408a      	lsls	r2, r1
 8001e52:	431a      	orrs	r2, r3
 8001e54:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8001e58:	e7cd      	b.n	8001df6 <USB_EP0StartXfer+0x62>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e5a:	fb13 0004 	smlabb	r0, r3, r4, r0
 8001e5e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8001e62:	691c      	ldr	r4, [r3, #16]
 8001e64:	4027      	ands	r7, r4
 8001e66:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8001e68:	691c      	ldr	r4, [r3, #16]
 8001e6a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001e6e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001e72:	611c      	str	r4, [r3, #16]
 8001e74:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 8001e76:	b106      	cbz	r6, 8001e7a <USB_EP0StartXfer+0xe6>
      ep->xfer_len = ep->maxpacket;
 8001e78:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8001e7a:	691d      	ldr	r5, [r3, #16]
 8001e7c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8001e80:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8001e82:	691d      	ldr	r5, [r3, #16]
 8001e84:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8001e88:	432c      	orrs	r4, r5
    if (dma == 1U)
 8001e8a:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8001e8c:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8001e8e:	d102      	bne.n	8001e96 <USB_EP0StartXfer+0x102>
      if ((uint32_t)ep->xfer_buff != 0U)
 8001e90:	68ca      	ldr	r2, [r1, #12]
 8001e92:	b102      	cbz	r2, 8001e96 <USB_EP0StartXfer+0x102>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8001e94:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001e96:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8001e9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001e9e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8001ea2:	e7a8      	b.n	8001df6 <USB_EP0StartXfer+0x62>
 8001ea4:	fff80000 	.word	0xfff80000

08001ea8 <USB_WritePacket>:
{
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8001eae:	b94c      	cbnz	r4, 8001ec4 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8001eb0:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001eb2:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8001eb6:	f023 0303 	bic.w	r3, r3, #3
 8001eba:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8001ebe:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8001ec0:	4299      	cmp	r1, r3
 8001ec2:	d101      	bne.n	8001ec8 <USB_WritePacket+0x20>
}
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001ec8:	f851 2b04 	ldr.w	r2, [r1], #4
 8001ecc:	6002      	str	r2, [r0, #0]
 8001ece:	e7f7      	b.n	8001ec0 <USB_WritePacket+0x18>

08001ed0 <USB_EPStartXfer>:
{
 8001ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8001ed2:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8001ed4:	780e      	ldrb	r6, [r1, #0]
 8001ed6:	4f73      	ldr	r7, [pc, #460]	; (80020a4 <USB_EPStartXfer+0x1d4>)
  if (ep->is_in == 1U)
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	f04f 0420 	mov.w	r4, #32
 8001ede:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001ee0:	fb14 0406 	smlabb	r4, r4, r6, r0
  if (ep->is_in == 1U)
 8001ee4:	f040 8098 	bne.w	8002018 <USB_EPStartXfer+0x148>
    if (ep->xfer_len == 0U)
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d138      	bne.n	8001f5e <USB_EPStartXfer+0x8e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001eec:	f504 6510 	add.w	r5, r4, #2304	; 0x900
 8001ef0:	f8d4 4910 	ldr.w	r4, [r4, #2320]	; 0x910
 8001ef4:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001ef8:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001efc:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001efe:	692c      	ldr	r4, [r5, #16]
 8001f00:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001f04:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001f06:	692c      	ldr	r4, [r5, #16]
 8001f08:	4027      	ands	r7, r4
 8001f0a:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 8001f0c:	2a01      	cmp	r2, #1
 8001f0e:	f04f 0420 	mov.w	r4, #32
 8001f12:	d154      	bne.n	8001fbe <USB_EPStartXfer+0xee>
      if ((uint32_t)ep->dma_addr != 0U)
 8001f14:	690b      	ldr	r3, [r1, #16]
 8001f16:	b11b      	cbz	r3, 8001f20 <USB_EPStartXfer+0x50>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001f18:	fb14 0406 	smlabb	r4, r4, r6, r0
 8001f1c:	f8c4 3914 	str.w	r3, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8001f20:	78cb      	ldrb	r3, [r1, #3]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d110      	bne.n	8001f48 <USB_EPStartXfer+0x78>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8001f26:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001f2a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f2e:	f04f 0320 	mov.w	r3, #32
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8001f32:	fb13 0306 	smlabb	r3, r3, r6, r0
 8001f36:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001f3a:	bf0c      	ite	eq
 8001f3c:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8001f40:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8001f44:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001f48:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8001f4c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001f50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001f54:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8001f58:	2000      	movs	r0, #0
 8001f5a:	b003      	add	sp, #12
 8001f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001f5e:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8001f62:	402f      	ands	r7, r5
 8001f64:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001f68:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8001f6c:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001f6e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001f72:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001f76:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8001f7a:	19dd      	adds	r5, r3, r7
 8001f7c:	3d01      	subs	r5, #1
 8001f7e:	fbb5 f7f7 	udiv	r7, r5, r7
 8001f82:	4d49      	ldr	r5, [pc, #292]	; (80020a8 <USB_EPStartXfer+0x1d8>)
 8001f84:	f8d4 e910 	ldr.w	lr, [r4, #2320]	; 0x910
 8001f88:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 8001f8c:	ea45 050e 	orr.w	r5, r5, lr
 8001f90:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8001f94:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8001f98:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8001f9c:	433d      	orrs	r5, r7
 8001f9e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8001fa2:	78cd      	ldrb	r5, [r1, #3]
 8001fa4:	2d01      	cmp	r5, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001fa6:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8001faa:	d1af      	bne.n	8001f0c <USB_EPStartXfer+0x3c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8001fac:	6925      	ldr	r5, [r4, #16]
 8001fae:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8001fb2:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8001fb4:	6925      	ldr	r5, [r4, #16]
 8001fb6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8001fba:	6125      	str	r5, [r4, #16]
 8001fbc:	e7a6      	b.n	8001f0c <USB_EPStartXfer+0x3c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001fbe:	fb14 0406 	smlabb	r4, r4, r6, r0
 8001fc2:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 8001fc6:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8001fca:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8001fce:	78cd      	ldrb	r5, [r1, #3]
 8001fd0:	2d01      	cmp	r5, #1
 8001fd2:	d00c      	beq.n	8001fee <USB_EPStartXfer+0x11e>
        if (ep->xfer_len > 0U)
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0bf      	beq.n	8001f58 <USB_EPStartXfer+0x88>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8001fd8:	780b      	ldrb	r3, [r1, #0]
 8001fda:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 8001fde:	f003 020f 	and.w	r2, r3, #15
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	4093      	lsls	r3, r2
 8001fe6:	4323      	orrs	r3, r4
 8001fe8:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8001fec:	e7b4      	b.n	8001f58 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8001fee:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 8001ff2:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8001ff6:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 8001ffa:	bf0c      	ite	eq
 8001ffc:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002000:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8002004:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002008:	780c      	ldrb	r4, [r1, #0]
 800200a:	9200      	str	r2, [sp, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	4622      	mov	r2, r4
 8002010:	68c9      	ldr	r1, [r1, #12]
 8002012:	f7ff ff49 	bl	8001ea8 <USB_WritePacket>
 8002016:	e79f      	b.n	8001f58 <USB_EPStartXfer+0x88>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002018:	f504 6630 	add.w	r6, r4, #2816	; 0xb00
 800201c:	6935      	ldr	r5, [r6, #16]
 800201e:	402f      	ands	r7, r5
 8002020:	6137      	str	r7, [r6, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002022:	6935      	ldr	r5, [r6, #16]
 8002024:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002028:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800202c:	6135      	str	r5, [r6, #16]
 800202e:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8002030:	bb23      	cbnz	r3, 800207c <USB_EPStartXfer+0x1ac>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002032:	6933      	ldr	r3, [r6, #16]
 8002034:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002038:	431d      	orrs	r5, r3
 800203a:	6135      	str	r5, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800203c:	6933      	ldr	r3, [r6, #16]
 800203e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 8002042:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002044:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8002046:	d102      	bne.n	800204e <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002048:	68cb      	ldr	r3, [r1, #12]
 800204a:	b103      	cbz	r3, 800204e <USB_EPStartXfer+0x17e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800204c:	6173      	str	r3, [r6, #20]
    if (ep->type == EP_TYPE_ISOC)
 800204e:	78cb      	ldrb	r3, [r1, #3]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d10c      	bne.n	800206e <USB_EPStartXfer+0x19e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002054:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002058:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800205c:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8002060:	bf0c      	ite	eq
 8002062:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002066:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800206a:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800206e:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8002072:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002076:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800207a:	e76d      	b.n	8001f58 <USB_EPStartXfer+0x88>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800207c:	4f0a      	ldr	r7, [pc, #40]	; (80020a8 <USB_EPStartXfer+0x1d8>)
 800207e:	f8d6 e010 	ldr.w	lr, [r6, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002082:	442b      	add	r3, r5
 8002084:	3b01      	subs	r3, #1
 8002086:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800208a:	ea07 47c3 	and.w	r7, r7, r3, lsl #19
 800208e:	ea47 070e 	orr.w	r7, r7, lr
 8002092:	6137      	str	r7, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002094:	b29b      	uxth	r3, r3
 8002096:	6937      	ldr	r7, [r6, #16]
 8002098:	436b      	muls	r3, r5
 800209a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209e:	433b      	orrs	r3, r7
 80020a0:	e7cf      	b.n	8002042 <USB_EPStartXfer+0x172>
 80020a2:	bf00      	nop
 80020a4:	fff80000 	.word	0xfff80000
 80020a8:	1ff80000 	.word	0x1ff80000

080020ac <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80020ac:	3203      	adds	r2, #3
 80020ae:	f022 0203 	bic.w	r2, r2, #3
 80020b2:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80020b4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 80020b8:	4291      	cmp	r1, r2
 80020ba:	d101      	bne.n	80020c0 <USB_ReadPacket+0x14>
}
 80020bc:	4608      	mov	r0, r1
 80020be:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80020c0:	6803      	ldr	r3, [r0, #0]
 80020c2:	f841 3b04 	str.w	r3, [r1], #4
 80020c6:	e7f7      	b.n	80020b8 <USB_ReadPacket+0xc>

080020c8 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80020c8:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80020ca:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80020d2:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 80020d6:	d112      	bne.n	80020fe <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80020d8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db06      	blt.n	80020ee <USB_EPSetStall+0x26>
 80020e0:	b12a      	cbz	r2, 80020ee <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80020e2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80020e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020ea:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80020ee:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80020f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020f6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80020fa:	2000      	movs	r0, #0
 80020fc:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80020fe:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002102:	2b00      	cmp	r3, #0
 8002104:	db06      	blt.n	8002114 <USB_EPSetStall+0x4c>
 8002106:	b12a      	cbz	r2, 8002114 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002108:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800210c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002110:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002114:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002118:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800211c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002120:	e7eb      	b.n	80020fa <USB_EPSetStall+0x32>

08002122 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8002122:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002124:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8002126:	2b01      	cmp	r3, #1
 8002128:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800212c:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8002130:	d111      	bne.n	8002156 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002132:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002136:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800213a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800213e:	78cb      	ldrb	r3, [r1, #3]
 8002140:	3b02      	subs	r3, #2
 8002142:	2b01      	cmp	r3, #1
 8002144:	d805      	bhi.n	8002152 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002146:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800214a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002152:	2000      	movs	r0, #0
 8002154:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002156:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800215a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800215e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002162:	78cb      	ldrb	r3, [r1, #3]
 8002164:	3b02      	subs	r3, #2
 8002166:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002168:	bf9e      	ittt	ls
 800216a:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 800216e:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8002172:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8002176:	e7ec      	b.n	8002152 <USB_EPClearStall+0x30>

08002178 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002178:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800217c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002180:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002184:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002188:	0109      	lsls	r1, r1, #4
 800218a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800218e:	4319      	orrs	r1, r3
 8002190:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002194:	2000      	movs	r0, #0
 8002196:	4770      	bx	lr

08002198 <USB_DevConnect>:
{
 8002198:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800219a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800219e:	f023 0302 	bic.w	r3, r3, #2
 80021a2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80021a6:	2003      	movs	r0, #3
 80021a8:	f7fe f9c6 	bl	8000538 <HAL_Delay>
}
 80021ac:	2000      	movs	r0, #0
 80021ae:	bd08      	pop	{r3, pc}

080021b0 <USB_DevDisconnect>:
{
 80021b0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80021b2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80021be:	2003      	movs	r0, #3
 80021c0:	f7fe f9ba 	bl	8000538 <HAL_Delay>
}
 80021c4:	2000      	movs	r0, #0
 80021c6:	bd08      	pop	{r3, pc}

080021c8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80021c8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80021ca:	6980      	ldr	r0, [r0, #24]
}
 80021cc:	4010      	ands	r0, r2
 80021ce:	4770      	bx	lr

080021d0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80021d0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80021d4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80021d8:	69c0      	ldr	r0, [r0, #28]
 80021da:	4018      	ands	r0, r3
}
 80021dc:	0c00      	lsrs	r0, r0, #16
 80021de:	4770      	bx	lr

080021e0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80021e0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80021e4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80021e8:	69c0      	ldr	r0, [r0, #28]
 80021ea:	4018      	ands	r0, r3
}
 80021ec:	b280      	uxth	r0, r0
 80021ee:	4770      	bx	lr

080021f0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80021f0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80021f4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80021f8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80021fc:	6940      	ldr	r0, [r0, #20]
}
 80021fe:	4010      	ands	r0, r2
 8002200:	4770      	bx	lr

08002202 <USB_ReadDevInEPInterrupt>:
{
 8002202:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8002204:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002208:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800220c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002210:	f001 010f 	and.w	r1, r1, #15
 8002214:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002216:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800221a:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800221c:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4323      	orrs	r3, r4
}
 8002222:	4018      	ands	r0, r3
 8002224:	bd10      	pop	{r4, pc}

08002226 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002226:	6940      	ldr	r0, [r0, #20]
}
 8002228:	f000 0001 	and.w	r0, r0, #1
 800222c:	4770      	bx	lr

0800222e <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800222e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002232:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002236:	f023 0307 	bic.w	r3, r3, #7
 800223a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800223e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	f002 0206 	and.w	r2, r2, #6
 8002248:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800224a:	bf02      	ittt	eq
 800224c:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8002250:	f042 0203 	orreq.w	r2, r2, #3
 8002254:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800225e:	605a      	str	r2, [r3, #4]
}
 8002260:	2000      	movs	r0, #0
 8002262:	4770      	bx	lr

08002264 <USB_EP0_OutStart>:
{
 8002264:	b510      	push	{r4, lr}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <USB_EP0_OutStart+0x5c>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002268:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800226a:	429c      	cmp	r4, r3
 800226c:	d903      	bls.n	8002276 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800226e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002272:	2b00      	cmp	r3, #0
 8002274:	db21      	blt.n	80022ba <USB_EP0_OutStart+0x56>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002276:	2400      	movs	r4, #0
 8002278:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800227c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002280:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002284:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002288:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800228c:	f044 0418 	orr.w	r4, r4, #24
 8002290:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002294:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8002298:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800229a:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800229e:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80022a2:	bf08      	it	eq
 80022a4:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80022a8:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80022ac:	bf02      	ittt	eq
 80022ae:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	; 0xb00
 80022b2:	f043 2380 	orreq.w	r3, r3, #2147516416	; 0x80008000
 80022b6:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
}
 80022ba:	2000      	movs	r0, #0
 80022bc:	bd10      	pop	{r4, pc}
 80022be:	bf00      	nop
 80022c0:	4f54300a 	.word	0x4f54300a

080022c4 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80022c4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
{
 80022c8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80022ca:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80022ce:	b15b      	cbz	r3, 80022e8 <USBD_CDC_EP0_RxReady+0x24>
 80022d0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80022d4:	28ff      	cmp	r0, #255	; 0xff
 80022d6:	d007      	beq.n	80022e8 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80022de:	4621      	mov	r1, r4
 80022e0:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 80022e2:	23ff      	movs	r3, #255	; 0xff
 80022e4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80022e8:	2000      	movs	r0, #0
 80022ea:	bd10      	pop	{r4, pc}

080022ec <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80022ec:	2343      	movs	r3, #67	; 0x43
 80022ee:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80022f0:	4800      	ldr	r0, [pc, #0]	; (80022f4 <USBD_CDC_GetFSCfgDesc+0x8>)
 80022f2:	4770      	bx	lr
 80022f4:	2000003c 	.word	0x2000003c

080022f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80022f8:	2343      	movs	r3, #67	; 0x43
 80022fa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80022fc:	4800      	ldr	r0, [pc, #0]	; (8002300 <USBD_CDC_GetHSCfgDesc+0x8>)
 80022fe:	4770      	bx	lr
 8002300:	20000080 	.word	0x20000080

08002304 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002304:	2343      	movs	r3, #67	; 0x43
 8002306:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002308:	4800      	ldr	r0, [pc, #0]	; (800230c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800230a:	4770      	bx	lr
 800230c:	200000d0 	.word	0x200000d0

08002310 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002310:	230a      	movs	r3, #10
 8002312:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002314:	4800      	ldr	r0, [pc, #0]	; (8002318 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002316:	4770      	bx	lr
 8002318:	200000c4 	.word	0x200000c4

0800231c <USBD_CDC_DataOut>:
{
 800231c:	b538      	push	{r3, r4, r5, lr}
 800231e:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002320:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002324:	f002 f9f6 	bl	8004714 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002328:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800232c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002330:	b14b      	cbz	r3, 8002346 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002332:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8002336:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002340:	4798      	blx	r3
    return USBD_OK;
 8002342:	2000      	movs	r0, #0
 8002344:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002346:	2002      	movs	r0, #2
}
 8002348:	bd38      	pop	{r3, r4, r5, pc}

0800234a <USBD_CDC_DataIn>:
{
 800234a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800234c:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 8002350:	b1d6      	cbz	r6, 8002388 <USBD_CDC_DataIn+0x3e>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002352:	2314      	movs	r3, #20
 8002354:	fb03 0301 	mla	r3, r3, r1, r0
 8002358:	69dd      	ldr	r5, [r3, #28]
 800235a:	b18d      	cbz	r5, 8002380 <USBD_CDC_DataIn+0x36>
 800235c:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 8002360:	271c      	movs	r7, #28
 8002362:	fb07 4201 	mla	r2, r7, r1, r4
 8002366:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002368:	fbb5 f4f2 	udiv	r4, r5, r2
 800236c:	fb02 5414 	mls	r4, r2, r4, r5
 8002370:	b934      	cbnz	r4, 8002380 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 8002372:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8002374:	4622      	mov	r2, r4
 8002376:	4623      	mov	r3, r4
 8002378:	f002 f9b0 	bl	80046dc <USBD_LL_Transmit>
    return USBD_OK;
 800237c:	4620      	mov	r0, r4
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800237e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8002380:	2000      	movs	r0, #0
 8002382:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8002386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8002388:	2002      	movs	r0, #2
}
 800238a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800238c <USBD_CDC_Setup>:
{
 800238c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002390:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002392:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 8002396:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800239a:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 800239e:	4605      	mov	r5, r0
 80023a0:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 80023a2:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 80023a6:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80023aa:	d028      	beq.n	80023fe <USBD_CDC_Setup+0x72>
 80023ac:	2c20      	cmp	r4, #32
 80023ae:	d147      	bne.n	8002440 <USBD_CDC_Setup+0xb4>
    if (req->wLength)
 80023b0:	88cc      	ldrh	r4, [r1, #6]
 80023b2:	784b      	ldrb	r3, [r1, #1]
 80023b4:	b1e4      	cbz	r4, 80023f0 <USBD_CDC_Setup+0x64>
      if (req->bmRequest & 0x80U)
 80023b6:	0612      	lsls	r2, r2, #24
 80023b8:	d511      	bpl.n	80023de <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80023ba:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80023be:	4639      	mov	r1, r7
 80023c0:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80023c4:	4618      	mov	r0, r3
 80023c6:	4622      	mov	r2, r4
 80023c8:	47c8      	blx	r9
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80023ca:	88f2      	ldrh	r2, [r6, #6]
 80023cc:	4639      	mov	r1, r7
 80023ce:	4628      	mov	r0, r5
 80023d0:	f000 fc4a 	bl	8002c68 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80023d4:	4644      	mov	r4, r8
}
 80023d6:	4620      	mov	r0, r4
 80023d8:	b003      	add	sp, #12
 80023da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hcdc->CmdOpCode = req->bRequest;
 80023de:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80023e2:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80023e6:	4622      	mov	r2, r4
 80023e8:	4639      	mov	r1, r7
 80023ea:	f000 fc52 	bl	8002c92 <USBD_CtlPrepareRx>
 80023ee:	e7f1      	b.n	80023d4 <USBD_CDC_Setup+0x48>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80023f0:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80023f4:	4618      	mov	r0, r3
 80023f6:	6895      	ldr	r5, [r2, #8]
 80023f8:	4622      	mov	r2, r4
 80023fa:	47a8      	blx	r5
 80023fc:	e7eb      	b.n	80023d6 <USBD_CDC_Setup+0x4a>
    switch (req->bRequest)
 80023fe:	784f      	ldrb	r7, [r1, #1]
 8002400:	2f0a      	cmp	r7, #10
 8002402:	d00d      	beq.n	8002420 <USBD_CDC_Setup+0x94>
 8002404:	2f0b      	cmp	r7, #11
 8002406:	d015      	beq.n	8002434 <USBD_CDC_Setup+0xa8>
 8002408:	b9d7      	cbnz	r7, 8002440 <USBD_CDC_Setup+0xb4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800240a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800240e:	2b03      	cmp	r3, #3
 8002410:	d114      	bne.n	800243c <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8002412:	2202      	movs	r2, #2
 8002414:	f10d 0106 	add.w	r1, sp, #6
 8002418:	f000 fc26 	bl	8002c68 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800241c:	463c      	mov	r4, r7
 800241e:	e7da      	b.n	80023d6 <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002420:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002424:	2b03      	cmp	r3, #3
 8002426:	d109      	bne.n	800243c <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8002428:	2201      	movs	r2, #1
 800242a:	f10d 0105 	add.w	r1, sp, #5
 800242e:	f000 fc1b 	bl	8002c68 <USBD_CtlSendData>
 8002432:	e7d0      	b.n	80023d6 <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002434:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002438:	2b03      	cmp	r3, #3
 800243a:	d0cc      	beq.n	80023d6 <USBD_CDC_Setup+0x4a>
        USBD_CtlError (pdev, req);
 800243c:	4631      	mov	r1, r6
 800243e:	4628      	mov	r0, r5
    USBD_CtlError (pdev, req);
 8002440:	f000 fbeb 	bl	8002c1a <USBD_CtlError>
    ret = USBD_FAIL;
 8002444:	2402      	movs	r4, #2
    break;
 8002446:	e7c6      	b.n	80023d6 <USBD_CDC_Setup+0x4a>

08002448 <USBD_CDC_DeInit>:
{
 8002448:	b538      	push	{r3, r4, r5, lr}
 800244a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800244c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800244e:	2181      	movs	r1, #129	; 0x81
 8002450:	f002 f8f8 	bl	8004644 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002454:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002456:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002458:	4620      	mov	r0, r4
 800245a:	f002 f8f3 	bl	8004644 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800245e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002462:	2182      	movs	r1, #130	; 0x82
 8002464:	4620      	mov	r0, r4
 8002466:	f002 f8ed 	bl	8004644 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800246a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800246e:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8002470:	b14b      	cbz	r3, 8002486 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002472:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800247a:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800247e:	f002 fa29 	bl	80048d4 <free>
    pdev->pClassData = NULL;
 8002482:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8002486:	2000      	movs	r0, #0
 8002488:	bd38      	pop	{r3, r4, r5, pc}

0800248a <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800248a:	7c03      	ldrb	r3, [r0, #16]
{
 800248c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002490:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002492:	bbcb      	cbnz	r3, 8002508 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002498:	2202      	movs	r2, #2
 800249a:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800249c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800249e:	f002 f8c1 	bl	8004624 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80024a2:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80024a4:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80024a8:	4629      	mov	r1, r5
 80024aa:	2202      	movs	r2, #2
 80024ac:	4620      	mov	r0, r4
 80024ae:	f002 f8b9 	bl	8004624 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80024b2:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80024b6:	2308      	movs	r3, #8
 80024b8:	2203      	movs	r2, #3
 80024ba:	2182      	movs	r1, #130	; 0x82
 80024bc:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80024be:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80024c0:	f002 f8b0 	bl	8004624 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80024c4:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80024c6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80024ca:	f002 f9fb 	bl	80048c4 <malloc>
 80024ce:	4606      	mov	r6, r0
 80024d0:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 80024d4:	b358      	cbz	r0, 800252e <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80024d6:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80024de:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 80024e2:	2700      	movs	r7, #0
 80024e4:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 80024e8:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80024ec:	f1b8 0f00 	cmp.w	r8, #0
 80024f0:	d113      	bne.n	800251a <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80024f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80024fa:	4629      	mov	r1, r5
 80024fc:	4620      	mov	r0, r4
 80024fe:	f002 f8fb 	bl	80046f8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002502:	4640      	mov	r0, r8
 8002504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002508:	2340      	movs	r3, #64	; 0x40
 800250a:	2202      	movs	r2, #2
 800250c:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800250e:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002510:	f002 f888 	bl	8004624 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002514:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002516:	2340      	movs	r3, #64	; 0x40
 8002518:	e7c6      	b.n	80024a8 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800251a:	2340      	movs	r3, #64	; 0x40
 800251c:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002520:	4629      	mov	r1, r5
 8002522:	4620      	mov	r0, r4
 8002524:	f002 f8e8 	bl	80046f8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002528:	4638      	mov	r0, r7
 800252a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 800252e:	4628      	mov	r0, r5
}
 8002530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002534 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8002534:	b119      	cbz	r1, 800253e <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002536:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 800253a:	2000      	movs	r0, #0
 800253c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800253e:	2002      	movs	r0, #2
  }

  return ret;
}
 8002540:	4770      	bx	lr

08002542 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002542:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8002546:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002548:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800254c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002550:	4770      	bx	lr

08002552 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8002552:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 8002556:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002558:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800255c:	4770      	bx	lr

0800255e <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800255e:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 8002562:	b510      	push	{r4, lr}

  if(pdev->pClassData != NULL)
 8002564:	b182      	cbz	r2, 8002588 <USBD_CDC_TransmitPacket+0x2a>
  {
    if(hcdc->TxState == 0U)
 8002566:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800256a:	2301      	movs	r3, #1
 800256c:	b974      	cbnz	r4, 800258c <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800256e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8002572:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8002576:	6303      	str	r3, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8002578:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800257c:	b29b      	uxth	r3, r3
 800257e:	2181      	movs	r1, #129	; 0x81
 8002580:	f002 f8ac 	bl	80046dc <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8002584:	4620      	mov	r0, r4
 8002586:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8002588:	2002      	movs	r0, #2
 800258a:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 800258c:	4618      	mov	r0, r3
  }
}
 800258e:	bd10      	pop	{r4, pc}

08002590 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002590:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 8002594:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002596:	b162      	cbz	r2, 80025b2 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8002598:	7c04      	ldrb	r4, [r0, #16]
 800259a:	b944      	cbnz	r4, 80025ae <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800259c:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80025a0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80025a4:	2101      	movs	r1, #1
 80025a6:	f002 f8a7 	bl	80046f8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80025aa:	2000      	movs	r0, #0
 80025ac:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80025ae:	2340      	movs	r3, #64	; 0x40
 80025b0:	e7f6      	b.n	80025a0 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 80025b2:	2002      	movs	r0, #2
  }
}
 80025b4:	bd10      	pop	{r4, pc}

080025b6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80025b6:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80025b8:	b180      	cbz	r0, 80025dc <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80025ba:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80025be:	b113      	cbz	r3, 80025c6 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80025c6:	b109      	cbz	r1, 80025cc <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80025c8:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 80025d2:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80025d4:	f001 ffea 	bl	80045ac <USBD_LL_Init>

  return USBD_OK;
 80025d8:	2000      	movs	r0, #0
 80025da:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80025dc:	2002      	movs	r0, #2
}
 80025de:	bd08      	pop	{r3, pc}

080025e0 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80025e0:	b119      	cbz	r1, 80025ea <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80025e2:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 80025e6:	2000      	movs	r0, #0
 80025e8:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80025ea:	2002      	movs	r0, #2
  }

  return status;
}
 80025ec:	4770      	bx	lr

080025ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80025ee:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80025f0:	f002 f80a 	bl	8004608 <USBD_LL_Start>

  return USBD_OK;
}
 80025f4:	2000      	movs	r0, #0
 80025f6:	bd08      	pop	{r3, pc}

080025f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80025f8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 80025fa:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80025fe:	b90b      	cbnz	r3, 8002604 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002600:	2002      	movs	r0, #2
 8002602:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4798      	blx	r3
 8002608:	2800      	cmp	r0, #0
 800260a:	d1f9      	bne.n	8002600 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800260c:	bd08      	pop	{r3, pc}

0800260e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800260e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002610:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4798      	blx	r3
  return USBD_OK;
}
 8002618:	2000      	movs	r0, #0
 800261a:	bd08      	pop	{r3, pc}

0800261c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800261c:	b538      	push	{r3, r4, r5, lr}
 800261e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002620:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8002624:	4628      	mov	r0, r5
 8002626:	f000 fae4 	bl	8002bf2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800262a:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800262c:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8002630:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8002634:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8002638:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 800263c:	f001 031f 	and.w	r3, r1, #31
 8002640:	2b01      	cmp	r3, #1
 8002642:	d00e      	beq.n	8002662 <USBD_LL_SetupStage+0x46>
 8002644:	d307      	bcc.n	8002656 <USBD_LL_SetupStage+0x3a>
 8002646:	2b02      	cmp	r3, #2
 8002648:	d010      	beq.n	800266c <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800264a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800264e:	4620      	mov	r0, r4
 8002650:	f002 f806 	bl	8004660 <USBD_LL_StallEP>
    break;
 8002654:	e003      	b.n	800265e <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002656:	4629      	mov	r1, r5
 8002658:	4620      	mov	r0, r4
 800265a:	f000 f903 	bl	8002864 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800265e:	2000      	movs	r0, #0
 8002660:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002662:	4629      	mov	r1, r5
 8002664:	4620      	mov	r0, r4
 8002666:	f000 fa17 	bl	8002a98 <USBD_StdItfReq>
    break;
 800266a:	e7f8      	b.n	800265e <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 800266c:	4629      	mov	r1, r5
 800266e:	4620      	mov	r0, r4
 8002670:	f000 fa37 	bl	8002ae2 <USBD_StdEPReq>
    break;
 8002674:	e7f3      	b.n	800265e <USBD_LL_SetupStage+0x42>

08002676 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002676:	b570      	push	{r4, r5, r6, lr}
 8002678:	4605      	mov	r5, r0
 800267a:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800267c:	bb49      	cbnz	r1, 80026d2 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800267e:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8002682:	2b03      	cmp	r3, #3
 8002684:	d11e      	bne.n	80026c4 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8002686:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800268a:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800268e:	4293      	cmp	r3, r2
 8002690:	d90b      	bls.n	80026aa <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002692:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8002694:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002696:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800269a:	bf8c      	ite	hi
 800269c:	b29a      	uxthhi	r2, r3
 800269e:	b292      	uxthls	r2, r2
 80026a0:	4631      	mov	r1, r6
 80026a2:	f000 fb05 	bl	8002cb0 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80026a6:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80026a8:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80026aa:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	b123      	cbz	r3, 80026bc <USBD_LL_DataOutStage+0x46>
 80026b2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80026b6:	2a03      	cmp	r2, #3
 80026b8:	d100      	bne.n	80026bc <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80026ba:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80026bc:	4628      	mov	r0, r5
 80026be:	f000 faff 	bl	8002cc0 <USBD_CtlSendStatus>
 80026c2:	e7f0      	b.n	80026a6 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80026c4:	2b05      	cmp	r3, #5
 80026c6:	d1ee      	bne.n	80026a6 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 80026c8:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80026cc:	f001 ffc8 	bl	8004660 <USBD_LL_StallEP>
 80026d0:	e7e9      	b.n	80026a6 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 80026d2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	b12b      	cbz	r3, 80026e6 <USBD_LL_DataOutStage+0x70>
 80026da:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80026de:	2a03      	cmp	r2, #3
 80026e0:	d101      	bne.n	80026e6 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80026e2:	4798      	blx	r3
 80026e4:	e7df      	b.n	80026a6 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80026e6:	2002      	movs	r0, #2
}
 80026e8:	bd70      	pop	{r4, r5, r6, pc}

080026ea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80026ea:	b570      	push	{r4, r5, r6, lr}
 80026ec:	4613      	mov	r3, r2
 80026ee:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80026f0:	460e      	mov	r6, r1
 80026f2:	2900      	cmp	r1, #0
 80026f4:	d148      	bne.n	8002788 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80026f6:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80026fa:	2a02      	cmp	r2, #2
 80026fc:	d13d      	bne.n	800277a <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80026fe:	6a05      	ldr	r5, [r0, #32]
 8002700:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002702:	4295      	cmp	r5, r2
 8002704:	d914      	bls.n	8002730 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8002706:	1aaa      	subs	r2, r5, r2
 8002708:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800270a:	4619      	mov	r1, r3
 800270c:	b292      	uxth	r2, r2
 800270e:	f000 fab8 	bl	8002c82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002712:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002714:	461a      	mov	r2, r3
 8002716:	4619      	mov	r1, r3
 8002718:	4620      	mov	r0, r4
 800271a:	f001 ffed 	bl	80046f8 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800271e:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8002722:	2b01      	cmp	r3, #1
 8002724:	f04f 0000 	mov.w	r0, #0
 8002728:	d13a      	bne.n	80027a0 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800272a:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 800272e:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8002730:	69c3      	ldr	r3, [r0, #28]
 8002732:	fbb3 f5f2 	udiv	r5, r3, r2
 8002736:	fb02 3515 	mls	r5, r2, r5, r3
 800273a:	b965      	cbnz	r5, 8002756 <USBD_LL_DataInStage+0x6c>
 800273c:	429a      	cmp	r2, r3
 800273e:	d80a      	bhi.n	8002756 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002740:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8002744:	4293      	cmp	r3, r2
 8002746:	d206      	bcs.n	8002756 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002748:	462a      	mov	r2, r5
 800274a:	f000 fa9a 	bl	8002c82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800274e:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002752:	462b      	mov	r3, r5
 8002754:	e7de      	b.n	8002714 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002756:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	b12b      	cbz	r3, 800276a <USBD_LL_DataInStage+0x80>
 800275e:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8002762:	2a03      	cmp	r2, #3
 8002764:	d101      	bne.n	800276a <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8002766:	4620      	mov	r0, r4
 8002768:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800276a:	2180      	movs	r1, #128	; 0x80
 800276c:	4620      	mov	r0, r4
 800276e:	f001 ff77 	bl	8004660 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002772:	4620      	mov	r0, r4
 8002774:	f000 faaf 	bl	8002cd6 <USBD_CtlReceiveStatus>
 8002778:	e7d1      	b.n	800271e <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800277a:	f032 0304 	bics.w	r3, r2, #4
 800277e:	d1ce      	bne.n	800271e <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	f001 ff6d 	bl	8004660 <USBD_LL_StallEP>
 8002786:	e7ca      	b.n	800271e <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8002788:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	b133      	cbz	r3, 800279e <USBD_LL_DataInStage+0xb4>
 8002790:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002794:	2a03      	cmp	r2, #3
 8002796:	d102      	bne.n	800279e <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8002798:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800279a:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800279c:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800279e:	2002      	movs	r0, #2
}
 80027a0:	bd70      	pop	{r4, r5, r6, pc}

080027a2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80027a2:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80027a4:	2200      	movs	r2, #0
{
 80027a6:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80027a8:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80027aa:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80027ac:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80027ae:	2340      	movs	r3, #64	; 0x40
 80027b0:	f001 ff38 	bl	8004624 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80027b4:	4633      	mov	r3, r6
 80027b6:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80027b8:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80027bc:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80027c0:	2200      	movs	r2, #0
 80027c2:	4620      	mov	r0, r4
 80027c4:	f001 ff2e 	bl	8004624 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80027c8:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80027cc:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 80027ce:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80027d0:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80027d2:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80027d6:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 80027da:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80027dc:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 80027e0:	b123      	cbz	r3, 80027ec <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80027e2:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80027e6:	4620      	mov	r0, r4
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4798      	blx	r3
  }

  return USBD_OK;
}
 80027ec:	2000      	movs	r0, #0
 80027ee:	bd70      	pop	{r4, r5, r6, pc}

080027f0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80027f0:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80027f2:	2000      	movs	r0, #0
 80027f4:	4770      	bx	lr

080027f6 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80027f6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80027fa:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80027fe:	2304      	movs	r3, #4
 8002800:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002804:	2000      	movs	r0, #0
 8002806:	4770      	bx	lr

08002808 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8002808:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 800280c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002810:	2000      	movs	r0, #0
 8002812:	4770      	bx	lr

08002814 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002814:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002816:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800281a:	2a03      	cmp	r2, #3
 800281c:	d104      	bne.n	8002828 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800281e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	b103      	cbz	r3, 8002828 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002826:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002828:	2000      	movs	r0, #0
 800282a:	bd08      	pop	{r3, pc}

0800282c <USBD_LL_IsoINIncomplete>:
 800282c:	2000      	movs	r0, #0
 800282e:	4770      	bx	lr

08002830 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8002830:	2000      	movs	r0, #0
 8002832:	4770      	bx	lr

08002834 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8002834:	2000      	movs	r0, #0
 8002836:	4770      	bx	lr

08002838 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8002838:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800283a:	2201      	movs	r2, #1
 800283c:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002840:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8002844:	7901      	ldrb	r1, [r0, #4]
 8002846:	6852      	ldr	r2, [r2, #4]
 8002848:	4790      	blx	r2

  return USBD_OK;
}
 800284a:	2000      	movs	r0, #0
 800284c:	bd08      	pop	{r3, pc}

0800284e <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800284e:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8002850:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002852:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8002854:	f001 ff04 	bl	8004660 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8002858:	4620      	mov	r0, r4
 800285a:	2100      	movs	r1, #0
}
 800285c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8002860:	f001 befe 	b.w	8004660 <USBD_LL_StallEP>

08002864 <USBD_StdDevReq>:
{
 8002864:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002866:	780b      	ldrb	r3, [r1, #0]
 8002868:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800286c:	2b20      	cmp	r3, #32
{
 800286e:	4604      	mov	r4, r0
 8002870:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002872:	d014      	beq.n	800289e <USBD_StdDevReq+0x3a>
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d012      	beq.n	800289e <USBD_StdDevReq+0x3a>
 8002878:	2b00      	cmp	r3, #0
 800287a:	f040 808d 	bne.w	8002998 <USBD_StdDevReq+0x134>
    switch (req->bRequest)
 800287e:	784b      	ldrb	r3, [r1, #1]
 8002880:	2b09      	cmp	r3, #9
 8002882:	f200 8088 	bhi.w	8002996 <USBD_StdDevReq+0x132>
 8002886:	e8df f013 	tbh	[pc, r3, lsl #1]
 800288a:	00df      	.short	0x00df
 800288c:	008600f9 	.word	0x008600f9
 8002890:	008600f2 	.word	0x008600f2
 8002894:	0013007a 	.word	0x0013007a
 8002898:	00ca0086 	.word	0x00ca0086
 800289c:	0098      	.short	0x0098
    pdev->pClass->Setup(pdev, req);
 800289e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80028a2:	4629      	mov	r1, r5
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	4620      	mov	r0, r4
 80028a8:	4798      	blx	r3
}
 80028aa:	2000      	movs	r0, #0
 80028ac:	b003      	add	sp, #12
 80028ae:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 80028b0:	884b      	ldrh	r3, [r1, #2]
 80028b2:	0a1a      	lsrs	r2, r3, #8
 80028b4:	3a01      	subs	r2, #1
 80028b6:	2a06      	cmp	r2, #6
 80028b8:	d86d      	bhi.n	8002996 <USBD_StdDevReq+0x132>
 80028ba:	e8df f002 	tbb	[pc, r2]
 80028be:	2004      	.short	0x2004
 80028c0:	4d6c6c2d 	.word	0x4d6c6c2d
 80028c4:	56          	.byte	0x56
 80028c5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80028c6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80028ca:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80028cc:	7c20      	ldrb	r0, [r4, #16]
 80028ce:	f10d 0106 	add.w	r1, sp, #6
 80028d2:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 80028d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80028d8:	b152      	cbz	r2, 80028f0 <USBD_StdDevReq+0x8c>
 80028da:	88eb      	ldrh	r3, [r5, #6]
 80028dc:	b143      	cbz	r3, 80028f0 <USBD_StdDevReq+0x8c>
    len = MIN(len, req->wLength);
 80028de:	429a      	cmp	r2, r3
 80028e0:	bf28      	it	cs
 80028e2:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 80028e4:	4601      	mov	r1, r0
 80028e6:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 80028e8:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80028ec:	f000 f9bc 	bl	8002c68 <USBD_CtlSendData>
  if(req->wLength == 0U)
 80028f0:	88eb      	ldrh	r3, [r5, #6]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1d9      	bne.n	80028aa <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 80028f6:	4620      	mov	r0, r4
 80028f8:	f000 f9e2 	bl	8002cc0 <USBD_CtlSendStatus>
 80028fc:	e7d5      	b.n	80028aa <USBD_StdDevReq+0x46>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80028fe:	7c02      	ldrb	r2, [r0, #16]
 8002900:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002904:	b932      	cbnz	r2, 8002914 <USBD_StdDevReq+0xb0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002908:	f10d 0006 	add.w	r0, sp, #6
 800290c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800290e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002910:	7043      	strb	r3, [r0, #1]
 8002912:	e7df      	b.n	80028d4 <USBD_StdDevReq+0x70>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	e7f7      	b.n	8002908 <USBD_StdDevReq+0xa4>
    switch ((uint8_t)(req->wValue))
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b05      	cmp	r3, #5
 800291c:	d83b      	bhi.n	8002996 <USBD_StdDevReq+0x132>
 800291e:	e8df f003 	tbb	[pc, r3]
 8002922:	0703      	.short	0x0703
 8002924:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8002928:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	e7cd      	b.n	80028cc <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002930:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	e7c9      	b.n	80028cc <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002938:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	e7c5      	b.n	80028cc <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002940:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	e7c1      	b.n	80028cc <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002948:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	e7bd      	b.n	80028cc <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002950:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	e7b9      	b.n	80028cc <USBD_StdDevReq+0x68>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8002958:	7c03      	ldrb	r3, [r0, #16]
 800295a:	b9e3      	cbnz	r3, 8002996 <USBD_StdDevReq+0x132>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800295c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002960:	f10d 0006 	add.w	r0, sp, #6
 8002964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002966:	4798      	blx	r3
 8002968:	e7b4      	b.n	80028d4 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800296a:	7c03      	ldrb	r3, [r0, #16]
 800296c:	b99b      	cbnz	r3, 8002996 <USBD_StdDevReq+0x132>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800296e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002972:	f10d 0006 	add.w	r0, sp, #6
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800297a:	2307      	movs	r3, #7
 800297c:	e7c8      	b.n	8002910 <USBD_StdDevReq+0xac>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800297e:	888b      	ldrh	r3, [r1, #4]
 8002980:	b94b      	cbnz	r3, 8002996 <USBD_StdDevReq+0x132>
 8002982:	88cb      	ldrh	r3, [r1, #6]
 8002984:	b93b      	cbnz	r3, 8002996 <USBD_StdDevReq+0x132>
 8002986:	884d      	ldrh	r5, [r1, #2]
 8002988:	2d7f      	cmp	r5, #127	; 0x7f
 800298a:	d804      	bhi.n	8002996 <USBD_StdDevReq+0x132>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800298c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002990:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002992:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002994:	d103      	bne.n	800299e <USBD_StdDevReq+0x13a>
      USBD_CtlError(pdev, req);
 8002996:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8002998:	f7ff ff59 	bl	800284e <USBD_CtlError.constprop.1>
    break;
 800299c:	e785      	b.n	80028aa <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 800299e:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80029a2:	f001 fe8d 	bl	80046c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80029a6:	4620      	mov	r0, r4
 80029a8:	f000 f98a 	bl	8002cc0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80029ac:	b11d      	cbz	r5, 80029b6 <USBD_StdDevReq+0x152>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80029ae:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80029b0:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80029b4:	e779      	b.n	80028aa <USBD_StdDevReq+0x46>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e7fa      	b.n	80029b0 <USBD_StdDevReq+0x14c>
  cfgidx = (uint8_t)(req->wValue);
 80029ba:	7889      	ldrb	r1, [r1, #2]
 80029bc:	4d35      	ldr	r5, [pc, #212]	; (8002a94 <USBD_StdDevReq+0x230>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80029be:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80029c0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80029c2:	d8e8      	bhi.n	8002996 <USBD_StdDevReq+0x132>
    switch (pdev->dev_state)
 80029c4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d008      	beq.n	80029de <USBD_StdDevReq+0x17a>
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d014      	beq.n	80029fa <USBD_StdDevReq+0x196>
      USBD_CtlError(pdev, req);
 80029d0:	f7ff ff3d 	bl	800284e <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 80029d4:	7829      	ldrb	r1, [r5, #0]
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7ff fe19 	bl	800260e <USBD_ClrClassConfig>
 80029dc:	e765      	b.n	80028aa <USBD_StdDevReq+0x46>
      if (cfgidx)
 80029de:	2900      	cmp	r1, #0
 80029e0:	d089      	beq.n	80028f6 <USBD_StdDevReq+0x92>
        pdev->dev_config = cfgidx;
 80029e2:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80029e4:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80029e6:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80029e8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80029ec:	4620      	mov	r0, r4
 80029ee:	f7ff fe03 	bl	80025f8 <USBD_SetClassConfig>
 80029f2:	2802      	cmp	r0, #2
 80029f4:	f47f af7f 	bne.w	80028f6 <USBD_StdDevReq+0x92>
 80029f8:	e7cd      	b.n	8002996 <USBD_StdDevReq+0x132>
      if (cfgidx == 0U)
 80029fa:	b931      	cbnz	r1, 8002a0a <USBD_StdDevReq+0x1a6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80029fc:	2302      	movs	r3, #2
 80029fe:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8002a02:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8002a04:	f7ff fe03 	bl	800260e <USBD_ClrClassConfig>
 8002a08:	e775      	b.n	80028f6 <USBD_StdDevReq+0x92>
      else if (cfgidx != pdev->dev_config)
 8002a0a:	6841      	ldr	r1, [r0, #4]
 8002a0c:	2901      	cmp	r1, #1
 8002a0e:	f43f af72 	beq.w	80028f6 <USBD_StdDevReq+0x92>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002a12:	b2c9      	uxtb	r1, r1
 8002a14:	f7ff fdfb 	bl	800260e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002a18:	7829      	ldrb	r1, [r5, #0]
 8002a1a:	6061      	str	r1, [r4, #4]
 8002a1c:	e7e6      	b.n	80029ec <USBD_StdDevReq+0x188>
  if (req->wLength != 1U)
 8002a1e:	88ca      	ldrh	r2, [r1, #6]
 8002a20:	2a01      	cmp	r2, #1
 8002a22:	d1b8      	bne.n	8002996 <USBD_StdDevReq+0x132>
    switch (pdev->dev_state)
 8002a24:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0b4      	beq.n	8002996 <USBD_StdDevReq+0x132>
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d903      	bls.n	8002a38 <USBD_StdDevReq+0x1d4>
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d1b0      	bne.n	8002996 <USBD_StdDevReq+0x132>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8002a34:	1d01      	adds	r1, r0, #4
 8002a36:	e003      	b.n	8002a40 <USBD_StdDevReq+0x1dc>
      pdev->dev_default_config = 0U;
 8002a38:	4601      	mov	r1, r0
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002a40:	4620      	mov	r0, r4
 8002a42:	f000 f911 	bl	8002c68 <USBD_CtlSendData>
 8002a46:	e730      	b.n	80028aa <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8002a48:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d8a1      	bhi.n	8002996 <USBD_StdDevReq+0x132>
    if(req->wLength != 0x2U)
 8002a52:	88cb      	ldrh	r3, [r1, #6]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d19e      	bne.n	8002996 <USBD_StdDevReq+0x132>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8002a5c:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8002a60:	b10b      	cbz	r3, 8002a66 <USBD_StdDevReq+0x202>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002a62:	2303      	movs	r3, #3
 8002a64:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002a66:	2202      	movs	r2, #2
 8002a68:	f104 010c 	add.w	r1, r4, #12
 8002a6c:	e7e8      	b.n	8002a40 <USBD_StdDevReq+0x1dc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002a6e:	884b      	ldrh	r3, [r1, #2]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	f47f af1a 	bne.w	80028aa <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8002a76:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8002a7a:	e73c      	b.n	80028f6 <USBD_StdDevReq+0x92>
  switch (pdev->dev_state)
 8002a7c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002a80:	3b01      	subs	r3, #1
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d887      	bhi.n	8002996 <USBD_StdDevReq+0x132>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002a86:	884b      	ldrh	r3, [r1, #2]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	f47f af0e 	bne.w	80028aa <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e7f1      	b.n	8002a76 <USBD_StdDevReq+0x212>
 8002a92:	bf00      	nop
 8002a94:	200001fc 	.word	0x200001fc

08002a98 <USBD_StdItfReq>:
{
 8002a98:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a9a:	780b      	ldrb	r3, [r1, #0]
 8002a9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002aa0:	2b20      	cmp	r3, #32
{
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002aa6:	d002      	beq.n	8002aae <USBD_StdItfReq+0x16>
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d000      	beq.n	8002aae <USBD_StdItfReq+0x16>
 8002aac:	b9b3      	cbnz	r3, 8002adc <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 8002aae:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d810      	bhi.n	8002ada <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8002ab8:	792b      	ldrb	r3, [r5, #4]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d80d      	bhi.n	8002ada <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8002abe:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002ac2:	4629      	mov	r1, r5
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8002aca:	88eb      	ldrh	r3, [r5, #6]
 8002acc:	b91b      	cbnz	r3, 8002ad6 <USBD_StdItfReq+0x3e>
 8002ace:	b910      	cbnz	r0, 8002ad6 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f000 f8f5 	bl	8002cc0 <USBD_CtlSendStatus>
}
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8002ada:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8002adc:	f7ff feb7 	bl	800284e <USBD_CtlError.constprop.1>
    break;
 8002ae0:	e7f9      	b.n	8002ad6 <USBD_StdItfReq+0x3e>

08002ae2 <USBD_StdEPReq>:
{
 8002ae2:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002ae4:	780a      	ldrb	r2, [r1, #0]
 8002ae6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002aea:	2a20      	cmp	r2, #32
{
 8002aec:	4604      	mov	r4, r0
 8002aee:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002af0:	d013      	beq.n	8002b1a <USBD_StdEPReq+0x38>
 8002af2:	2a40      	cmp	r2, #64	; 0x40
 8002af4:	d011      	beq.n	8002b1a <USBD_StdEPReq+0x38>
 8002af6:	b96a      	cbnz	r2, 8002b14 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8002af8:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8002afa:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8002afc:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8002afe:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8002b00:	d01f      	beq.n	8002b42 <USBD_StdEPReq+0x60>
 8002b02:	d335      	bcc.n	8002b70 <USBD_StdEPReq+0x8e>
 8002b04:	2d03      	cmp	r5, #3
 8002b06:	d105      	bne.n	8002b14 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8002b08:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002b0c:	2a02      	cmp	r2, #2
 8002b0e:	d026      	beq.n	8002b5e <USBD_StdEPReq+0x7c>
 8002b10:	2a03      	cmp	r2, #3
 8002b12:	d00a      	beq.n	8002b2a <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8002b14:	f7ff fe9b 	bl	800284e <USBD_CtlError.constprop.1>
    break;
 8002b18:	e005      	b.n	8002b26 <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8002b1a:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6892      	ldr	r2, [r2, #8]
 8002b22:	4620      	mov	r0, r4
 8002b24:	4790      	blx	r2
}
 8002b26:	2000      	movs	r0, #0
 8002b28:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8002b2a:	885a      	ldrh	r2, [r3, #2]
 8002b2c:	b92a      	cbnz	r2, 8002b3a <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8002b2e:	064a      	lsls	r2, r1, #25
 8002b30:	d003      	beq.n	8002b3a <USBD_StdEPReq+0x58>
 8002b32:	88db      	ldrh	r3, [r3, #6]
 8002b34:	b90b      	cbnz	r3, 8002b3a <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8002b36:	f001 fd93 	bl	8004660 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f000 f8c0 	bl	8002cc0 <USBD_CtlSendStatus>
        break;
 8002b40:	e7f1      	b.n	8002b26 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8002b42:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002b46:	2a02      	cmp	r2, #2
 8002b48:	d009      	beq.n	8002b5e <USBD_StdEPReq+0x7c>
 8002b4a:	2a03      	cmp	r2, #3
 8002b4c:	d1e2      	bne.n	8002b14 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8002b4e:	885b      	ldrh	r3, [r3, #2]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e8      	bne.n	8002b26 <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8002b54:	064d      	lsls	r5, r1, #25
 8002b56:	d0f0      	beq.n	8002b3a <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8002b58:	f001 fd90 	bl	800467c <USBD_LL_ClearStallEP>
 8002b5c:	e7ed      	b.n	8002b3a <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002b5e:	064b      	lsls	r3, r1, #25
 8002b60:	d017      	beq.n	8002b92 <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 8002b62:	f001 fd7d 	bl	8004660 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8002b66:	2180      	movs	r1, #128	; 0x80
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f001 fd79 	bl	8004660 <USBD_LL_StallEP>
 8002b6e:	e7da      	b.n	8002b26 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8002b70:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d00e      	beq.n	8002b96 <USBD_StdEPReq+0xb4>
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d1cb      	bne.n	8002b14 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 8002b7c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002b80:	f04f 0314 	mov.w	r3, #20
 8002b84:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002b88:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8002b8c:	d012      	beq.n	8002bb4 <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002b8e:	6992      	ldr	r2, [r2, #24]
 8002b90:	b9da      	cbnz	r2, 8002bca <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 8002b92:	4620      	mov	r0, r4
 8002b94:	e7be      	b.n	8002b14 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002b96:	0649      	lsls	r1, r1, #25
 8002b98:	d1fb      	bne.n	8002b92 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8002b9a:	0613      	lsls	r3, r2, #24
 8002b9c:	bf4c      	ite	mi
 8002b9e:	f100 0114 	addmi.w	r1, r0, #20
 8002ba2:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002baa:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002bac:	4620      	mov	r0, r4
 8002bae:	f000 f85b 	bl	8002c68 <USBD_CtlSendData>
          break;
 8002bb2:	e7b8      	b.n	8002b26 <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8002bb4:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8002bb8:	2a00      	cmp	r2, #0
 8002bba:	d0ea      	beq.n	8002b92 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8002bbc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8002bc0:	fb03 0505 	mla	r5, r3, r5, r0
 8002bc4:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8002bc8:	e004      	b.n	8002bd4 <USBD_StdEPReq+0xf2>
 8002bca:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8002bce:	fb05 3503 	mla	r5, r5, r3, r3
 8002bd2:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8002bd4:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8002bd8:	d103      	bne.n	8002be2 <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8002bda:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002bdc:	2202      	movs	r2, #2
 8002bde:	4629      	mov	r1, r5
 8002be0:	e7e4      	b.n	8002bac <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002be2:	4620      	mov	r0, r4
 8002be4:	f001 fd58 	bl	8004698 <USBD_LL_IsStallEP>
 8002be8:	b108      	cbz	r0, 8002bee <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e7f5      	b.n	8002bda <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 8002bee:	6028      	str	r0, [r5, #0]
 8002bf0:	e7f4      	b.n	8002bdc <USBD_StdEPReq+0xfa>

08002bf2 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002bf2:	780b      	ldrb	r3, [r1, #0]
 8002bf4:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002bf6:	784b      	ldrb	r3, [r1, #1]
 8002bf8:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002bfa:	78ca      	ldrb	r2, [r1, #3]
 8002bfc:	788b      	ldrb	r3, [r1, #2]
 8002bfe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002c02:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002c04:	794a      	ldrb	r2, [r1, #5]
 8002c06:	790b      	ldrb	r3, [r1, #4]
 8002c08:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002c0c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002c0e:	79ca      	ldrb	r2, [r1, #7]
 8002c10:	798b      	ldrb	r3, [r1, #6]
 8002c12:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002c16:	80c3      	strh	r3, [r0, #6]
 8002c18:	4770      	bx	lr

08002c1a <USBD_CtlError>:
{
 8002c1a:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8002c1c:	2180      	movs	r1, #128	; 0x80
{
 8002c1e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8002c20:	f001 fd1e 	bl	8004660 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8002c24:	4620      	mov	r0, r4
 8002c26:	2100      	movs	r1, #0
}
 8002c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8002c2c:	f001 bd18 	b.w	8004660 <USBD_LL_StallEP>

08002c30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002c30:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8002c32:	b188      	cbz	r0, 8002c58 <USBD_GetString+0x28>
 8002c34:	4605      	mov	r5, r0
 8002c36:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8002c38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2c00      	cmp	r4, #0
 8002c40:	d1f9      	bne.n	8002c36 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8002c42:	3301      	adds	r3, #1
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8002c48:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	704b      	strb	r3, [r1, #1]
 8002c4e:	3801      	subs	r0, #1
 8002c50:	2302      	movs	r3, #2
    while (*desc != '\0')
 8002c52:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002c56:	b905      	cbnz	r5, 8002c5a <USBD_GetString+0x2a>
 8002c58:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8002c60:	3302      	adds	r3, #2
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	548c      	strb	r4, [r1, r2]
 8002c66:	e7f4      	b.n	8002c52 <USBD_GetString+0x22>

08002c68 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8002c68:	b510      	push	{r4, lr}
 8002c6a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8002c72:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8002c74:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002c76:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8002c78:	2100      	movs	r1, #0
 8002c7a:	f001 fd2f 	bl	80046dc <USBD_LL_Transmit>

  return USBD_OK;
}
 8002c7e:	2000      	movs	r0, #0
 8002c80:	bd10      	pop	{r4, pc}

08002c82 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8002c82:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8002c84:	4613      	mov	r3, r2
 8002c86:	460a      	mov	r2, r1
 8002c88:	2100      	movs	r1, #0
 8002c8a:	f001 fd27 	bl	80046dc <USBD_LL_Transmit>

  return USBD_OK;
}
 8002c8e:	2000      	movs	r0, #0
 8002c90:	bd08      	pop	{r3, pc}

08002c92 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8002c92:	b510      	push	{r4, lr}
 8002c94:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8002c96:	2203      	movs	r2, #3
 8002c98:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8002c9c:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8002ca0:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002ca2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	f001 fd26 	bl	80046f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002cac:	2000      	movs	r0, #0
 8002cae:	bd10      	pop	{r4, pc}

08002cb0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8002cb0:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	460a      	mov	r2, r1
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	f001 fd1e 	bl	80046f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	bd08      	pop	{r3, pc}

08002cc0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8002cc0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f001 fd05 	bl	80046dc <USBD_LL_Transmit>

  return USBD_OK;
}
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	bd08      	pop	{r3, pc}

08002cd6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8002cd6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8002cd8:	2305      	movs	r3, #5
 8002cda:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f001 fd08 	bl	80046f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002ce8:	2000      	movs	r0, #0
 8002cea:	bd08      	pop	{r3, pc}

08002cec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002cec:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002cee:	f000 fe3b 	bl	8003968 <vTaskStartScheduler>
  
  return osOK;
}
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	bd08      	pop	{r3, pc}

08002cf6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002cf6:	b570      	push	{r4, r5, r6, lr}
 8002cf8:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002cfa:	6946      	ldr	r6, [r0, #20]
 8002cfc:	692a      	ldr	r2, [r5, #16]
 8002cfe:	6840      	ldr	r0, [r0, #4]
 8002d00:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8002d04:	460b      	mov	r3, r1
 8002d06:	b086      	sub	sp, #24
 8002d08:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002d0a:	b176      	cbz	r6, 8002d2a <osThreadCreate+0x34>
 8002d0c:	69ad      	ldr	r5, [r5, #24]
 8002d0e:	b165      	cbz	r5, 8002d2a <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8002d10:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8002d12:	bf14      	ite	ne
 8002d14:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d16:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d18:	9502      	str	r5, [sp, #8]
 8002d1a:	e88d 0050 	stmia.w	sp, {r4, r6}
 8002d1e:	f000 fdbf 	bl	80038a0 <xTaskCreateStatic>
 8002d22:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002d24:	9805      	ldr	r0, [sp, #20]
}
 8002d26:	b006      	add	sp, #24
 8002d28:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8002d2a:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8002d2c:	bf14      	ite	ne
 8002d2e:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d30:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d32:	ad05      	add	r5, sp, #20
 8002d34:	b292      	uxth	r2, r2
 8002d36:	e88d 0030 	stmia.w	sp, {r4, r5}
 8002d3a:	f000 fde8 	bl	800390e <xTaskCreate>
 8002d3e:	2801      	cmp	r0, #1
 8002d40:	d0f0      	beq.n	8002d24 <osThreadCreate+0x2e>
      return NULL;
 8002d42:	2000      	movs	r0, #0
 8002d44:	e7ef      	b.n	8002d26 <osThreadCreate+0x30>

08002d46 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002d46:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	bf08      	it	eq
 8002d4c:	2001      	moveq	r0, #1
 8002d4e:	f000 ff53 	bl	8003bf8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002d52:	2000      	movs	r0, #0
 8002d54:	bd08      	pop	{r3, pc}

08002d56 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d56:	f100 0308 	add.w	r3, r0, #8
 8002d5a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d60:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d62:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d64:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d66:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d68:	6003      	str	r3, [r0, #0]
 8002d6a:	4770      	bx	lr

08002d6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	6103      	str	r3, [r0, #16]
 8002d70:	4770      	bx	lr

08002d72 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d72:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d74:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d7e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002d80:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d82:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002d84:	3301      	adds	r3, #1
 8002d86:	6003      	str	r3, [r0, #0]
 8002d88:	4770      	bx	lr

08002d8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d8a:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d8c:	1c53      	adds	r3, r2, #1
{
 8002d8e:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002d90:	d10a      	bne.n	8002da8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d92:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d98:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d9a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d9c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002d9e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002da0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002da2:	3301      	adds	r3, #1
 8002da4:	6003      	str	r3, [r0, #0]
 8002da6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002da8:	f100 0308 	add.w	r3, r0, #8
 8002dac:	685c      	ldr	r4, [r3, #4]
 8002dae:	6825      	ldr	r5, [r4, #0]
 8002db0:	42aa      	cmp	r2, r5
 8002db2:	d3ef      	bcc.n	8002d94 <vListInsert+0xa>
 8002db4:	4623      	mov	r3, r4
 8002db6:	e7f9      	b.n	8002dac <vListInsert+0x22>

08002db8 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002db8:	6841      	ldr	r1, [r0, #4]
 8002dba:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002dbc:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dbe:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dc0:	6882      	ldr	r2, [r0, #8]
 8002dc2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dc8:	bf08      	it	eq
 8002dca:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002dcc:	2200      	movs	r2, #0
 8002dce:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	3a01      	subs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dd6:	6818      	ldr	r0, [r3, #0]
}
 8002dd8:	4770      	bx	lr
	...

08002ddc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ddc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <prvTaskExitError+0x3c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3301      	adds	r3, #1
 8002de8:	d008      	beq.n	8002dfc <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	e7fe      	b.n	8002dfa <prvTaskExitError+0x1e>
 8002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002e0c:	9b01      	ldr	r3, [sp, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0fc      	beq.n	8002e0c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002e12:	b002      	add	sp, #8
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000114 	.word	0x20000114

08002e1c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002e1c:	4808      	ldr	r0, [pc, #32]	; (8002e40 <prvPortStartFirstTask+0x24>)
 8002e1e:	6800      	ldr	r0, [r0, #0]
 8002e20:	6800      	ldr	r0, [r0, #0]
 8002e22:	f380 8808 	msr	MSP, r0
 8002e26:	f04f 0000 	mov.w	r0, #0
 8002e2a:	f380 8814 	msr	CONTROL, r0
 8002e2e:	b662      	cpsie	i
 8002e30:	b661      	cpsie	f
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	df00      	svc	0
 8002e3c:	bf00      	nop
 8002e3e:	0000      	.short	0x0000
 8002e40:	e000ed08 	.word	0xe000ed08

08002e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002e44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002e54 <vPortEnableVFP+0x10>
 8002e48:	6801      	ldr	r1, [r0, #0]
 8002e4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e4e:	6001      	str	r1, [r0, #0]
 8002e50:	4770      	bx	lr
 8002e52:	0000      	.short	0x0000
 8002e54:	e000ed88 	.word	0xe000ed88

08002e58 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e5c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e60:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <pxPortInitialiseStack+0x28>)
 8002e62:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e66:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e6a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e6e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e72:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e76:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002e7a:	3844      	subs	r0, #68	; 0x44
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	08002ddd 	.word	0x08002ddd
	...

08002e90 <SVC_Handler>:
	__asm volatile (
 8002e90:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <pxCurrentTCBConst2>)
 8002e92:	6819      	ldr	r1, [r3, #0]
 8002e94:	6808      	ldr	r0, [r1, #0]
 8002e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e9a:	f380 8809 	msr	PSP, r0
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	f380 8811 	msr	BASEPRI, r0
 8002eaa:	4770      	bx	lr
 8002eac:	f3af 8000 	nop.w

08002eb0 <pxCurrentTCBConst2>:
 8002eb0:	20003e1c 	.word	0x20003e1c

08002eb4 <vPortEnterCritical>:
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002ec4:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <vPortEnterCritical+0x3c>)
 8002ec6:	6813      	ldr	r3, [r2, #0]
 8002ec8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8002eca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002ecc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002ece:	d10d      	bne.n	8002eec <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <vPortEnterCritical+0x40>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002ed8:	d008      	beq.n	8002eec <vPortEnterCritical+0x38>
 8002eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	e7fe      	b.n	8002eea <vPortEnterCritical+0x36>
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20000114 	.word	0x20000114
 8002ef4:	e000ed04 	.word	0xe000ed04

08002ef8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002ef8:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <vPortExitCritical+0x24>)
 8002efa:	6813      	ldr	r3, [r2, #0]
 8002efc:	b943      	cbnz	r3, 8002f10 <vPortExitCritical+0x18>
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	e7fe      	b.n	8002f0e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002f10:	3b01      	subs	r3, #1
 8002f12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002f14:	b90b      	cbnz	r3, 8002f1a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	4770      	bx	lr
 8002f1c:	20000114 	.word	0x20000114

08002f20 <PendSV_Handler>:
	__asm volatile
 8002f20:	f3ef 8009 	mrs	r0, PSP
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <pxCurrentTCBConst>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	f01e 0f10 	tst.w	lr, #16
 8002f30:	bf08      	it	eq
 8002f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f3a:	6010      	str	r0, [r2, #0]
 8002f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f44:	f380 8811 	msr	BASEPRI, r0
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f000 fe76 	bl	8003c40 <vTaskSwitchContext>
 8002f54:	f04f 0000 	mov.w	r0, #0
 8002f58:	f380 8811 	msr	BASEPRI, r0
 8002f5c:	bc09      	pop	{r0, r3}
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	6808      	ldr	r0, [r1, #0]
 8002f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f66:	f01e 0f10 	tst.w	lr, #16
 8002f6a:	bf08      	it	eq
 8002f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f70:	f380 8809 	msr	PSP, r0
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	f3af 8000 	nop.w

08002f80 <pxCurrentTCBConst>:
 8002f80:	20003e1c 	.word	0x20003e1c

08002f84 <SysTick_Handler>:
{
 8002f84:	b508      	push	{r3, lr}
	__asm volatile
 8002f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8a:	f383 8811 	msr	BASEPRI, r3
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002f96:	f000 fd25 	bl	80039e4 <xTaskIncrementTick>
 8002f9a:	b118      	cbz	r0, 8002fa4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <SysTick_Handler+0x28>)
 8002f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	bd08      	pop	{r3, pc}
 8002fac:	e000ed04 	.word	0xe000ed04

08002fb0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002fb0:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002fb2:	4909      	ldr	r1, [pc, #36]	; (8002fd8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002fb8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <vPortSetupTimerInterrupt+0x2c>)
 8002fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fc6:	4906      	ldr	r1, [pc, #24]	; (8002fe0 <vPortSetupTimerInterrupt+0x30>)
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002fcc:	2307      	movs	r3, #7
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000e010 	.word	0xe000e010
 8002fd8:	e000e018 	.word	0xe000e018
 8002fdc:	20000118 	.word	0x20000118
 8002fe0:	e000e014 	.word	0xe000e014

08002fe4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002fe4:	4b39      	ldr	r3, [pc, #228]	; (80030cc <xPortStartScheduler+0xe8>)
 8002fe6:	4a3a      	ldr	r2, [pc, #232]	; (80030d0 <xPortStartScheduler+0xec>)
{
 8002fe8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002fea:	6819      	ldr	r1, [r3, #0]
 8002fec:	4291      	cmp	r1, r2
 8002fee:	d108      	bne.n	8003002 <xPortStartScheduler+0x1e>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	e7fe      	b.n	8003000 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b33      	ldr	r3, [pc, #204]	; (80030d4 <xPortStartScheduler+0xf0>)
 8003006:	429a      	cmp	r2, r3
 8003008:	d108      	bne.n	800301c <xPortStartScheduler+0x38>
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	e7fe      	b.n	800301a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800301c:	4b2e      	ldr	r3, [pc, #184]	; (80030d8 <xPortStartScheduler+0xf4>)
 800301e:	781a      	ldrb	r2, [r3, #0]
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003024:	22ff      	movs	r2, #255	; 0xff
 8003026:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003028:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800302a:	4a2c      	ldr	r2, [pc, #176]	; (80030dc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003032:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003036:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800303a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800303c:	4b28      	ldr	r3, [pc, #160]	; (80030e0 <xPortStartScheduler+0xfc>)
 800303e:	2207      	movs	r2, #7
 8003040:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003042:	2100      	movs	r1, #0
 8003044:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003048:	0600      	lsls	r0, r0, #24
 800304a:	f102 34ff 	add.w	r4, r2, #4294967295
 800304e:	d40d      	bmi.n	800306c <xPortStartScheduler+0x88>
 8003050:	b101      	cbz	r1, 8003054 <xPortStartScheduler+0x70>
 8003052:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	2a03      	cmp	r2, #3
 8003058:	d011      	beq.n	800307e <xPortStartScheduler+0x9a>
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	e7fe      	b.n	800306a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800306c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003070:	0052      	lsls	r2, r2, #1
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	f88d 2003 	strb.w	r2, [sp, #3]
 8003078:	2101      	movs	r1, #1
 800307a:	4622      	mov	r2, r4
 800307c:	e7e2      	b.n	8003044 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800307e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003080:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003084:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003086:	9b01      	ldr	r3, [sp, #4]
 8003088:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <xPortStartScheduler+0xf4>)
 800308a:	b2db      	uxtb	r3, r3
 800308c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <xPortStartScheduler+0x100>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003096:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800309e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80030a0:	f7ff ff86 	bl	8002fb0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80030a4:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <xPortStartScheduler+0x104>)
 80030a6:	2400      	movs	r4, #0
 80030a8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80030aa:	f7ff fecb 	bl	8002e44 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80030ae:	4a0f      	ldr	r2, [pc, #60]	; (80030ec <xPortStartScheduler+0x108>)
 80030b0:	6813      	ldr	r3, [r2, #0]
 80030b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80030b6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80030b8:	f7ff feb0 	bl	8002e1c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80030bc:	f000 fdc0 	bl	8003c40 <vTaskSwitchContext>
	prvTaskExitError();
 80030c0:	f7ff fe8c 	bl	8002ddc <prvTaskExitError>
}
 80030c4:	4620      	mov	r0, r4
 80030c6:	b002      	add	sp, #8
 80030c8:	bd10      	pop	{r4, pc}
 80030ca:	bf00      	nop
 80030cc:	e000ed00 	.word	0xe000ed00
 80030d0:	410fc271 	.word	0x410fc271
 80030d4:	410fc270 	.word	0x410fc270
 80030d8:	e000e400 	.word	0xe000e400
 80030dc:	200001fd 	.word	0x200001fd
 80030e0:	20000200 	.word	0x20000200
 80030e4:	e000ed20 	.word	0xe000ed20
 80030e8:	20000114 	.word	0x20000114
 80030ec:	e000ef34 	.word	0xe000ef34

080030f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80030f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80030f4:	2b0f      	cmp	r3, #15
 80030f6:	d90e      	bls.n	8003116 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80030f8:	4a10      	ldr	r2, [pc, #64]	; (800313c <vPortValidateInterruptPriority+0x4c>)
 80030fa:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80030fc:	4a10      	ldr	r2, [pc, #64]	; (8003140 <vPortValidateInterruptPriority+0x50>)
 80030fe:	7812      	ldrb	r2, [r2, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d908      	bls.n	8003116 <vPortValidateInterruptPriority+0x26>
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	e7fe      	b.n	8003114 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <vPortValidateInterruptPriority+0x54>)
 8003118:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <vPortValidateInterruptPriority+0x58>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003122:	4293      	cmp	r3, r2
 8003124:	d908      	bls.n	8003138 <vPortValidateInterruptPriority+0x48>
 8003126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	e7fe      	b.n	8003136 <vPortValidateInterruptPriority+0x46>
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000e3f0 	.word	0xe000e3f0
 8003140:	200001fd 	.word	0x200001fd
 8003144:	e000ed0c 	.word	0xe000ed0c
 8003148:	20000200 	.word	0x20000200

0800314c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800314c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <prvInsertBlockIntoFreeList+0x40>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4282      	cmp	r2, r0
 8003154:	d318      	bcc.n	8003188 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003156:	685c      	ldr	r4, [r3, #4]
 8003158:	1919      	adds	r1, r3, r4
 800315a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800315c:	bf01      	itttt	eq
 800315e:	6841      	ldreq	r1, [r0, #4]
 8003160:	4618      	moveq	r0, r3
 8003162:	1909      	addeq	r1, r1, r4
 8003164:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003166:	6844      	ldr	r4, [r0, #4]
 8003168:	1901      	adds	r1, r0, r4
 800316a:	428a      	cmp	r2, r1
 800316c:	d107      	bne.n	800317e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800316e:	4908      	ldr	r1, [pc, #32]	; (8003190 <prvInsertBlockIntoFreeList+0x44>)
 8003170:	6809      	ldr	r1, [r1, #0]
 8003172:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003174:	bf1f      	itttt	ne
 8003176:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003178:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800317a:	1909      	addne	r1, r1, r4
 800317c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800317e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003180:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003182:	bf18      	it	ne
 8003184:	6018      	strne	r0, [r3, #0]
 8003186:	bd10      	pop	{r4, pc}
 8003188:	4613      	mov	r3, r2
 800318a:	e7e1      	b.n	8003150 <prvInsertBlockIntoFreeList+0x4>
 800318c:	20003e14 	.word	0x20003e14
 8003190:	20000204 	.word	0x20000204

08003194 <pvPortMalloc>:
{
 8003194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003198:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800319a:	f000 fc1b 	bl	80039d4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800319e:	493e      	ldr	r1, [pc, #248]	; (8003298 <pvPortMalloc+0x104>)
 80031a0:	4d3e      	ldr	r5, [pc, #248]	; (800329c <pvPortMalloc+0x108>)
 80031a2:	680b      	ldr	r3, [r1, #0]
 80031a4:	bb0b      	cbnz	r3, 80031ea <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80031a6:	4a3e      	ldr	r2, [pc, #248]	; (80032a0 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80031a8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80031aa:	bf1f      	itttt	ne
 80031ac:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031ae:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80031b2:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80031b6:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031b8:	bf14      	ite	ne
 80031ba:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80031bc:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031c0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80031c2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031c4:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031c8:	4e36      	ldr	r6, [pc, #216]	; (80032a4 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80031ca:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80031cc:	2000      	movs	r0, #0
 80031ce:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031d0:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80031d2:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80031d4:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031d6:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031d8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031da:	4b33      	ldr	r3, [pc, #204]	; (80032a8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031dc:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031de:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031e0:	4b32      	ldr	r3, [pc, #200]	; (80032ac <pvPortMalloc+0x118>)
 80031e2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80031e8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80031ea:	682f      	ldr	r7, [r5, #0]
 80031ec:	4227      	tst	r7, r4
 80031ee:	d116      	bne.n	800321e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80031f0:	2c00      	cmp	r4, #0
 80031f2:	d041      	beq.n	8003278 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80031f4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031f8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80031fa:	bf1c      	itt	ne
 80031fc:	f023 0307 	bicne.w	r3, r3, #7
 8003200:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003202:	b163      	cbz	r3, 800321e <pvPortMalloc+0x8a>
 8003204:	4a29      	ldr	r2, [pc, #164]	; (80032ac <pvPortMalloc+0x118>)
 8003206:	6816      	ldr	r6, [r2, #0]
 8003208:	42b3      	cmp	r3, r6
 800320a:	4690      	mov	r8, r2
 800320c:	d807      	bhi.n	800321e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800320e:	4a25      	ldr	r2, [pc, #148]	; (80032a4 <pvPortMalloc+0x110>)
 8003210:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003212:	6868      	ldr	r0, [r5, #4]
 8003214:	4283      	cmp	r3, r0
 8003216:	d804      	bhi.n	8003222 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8003218:	6809      	ldr	r1, [r1, #0]
 800321a:	428d      	cmp	r5, r1
 800321c:	d107      	bne.n	800322e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800321e:	2400      	movs	r4, #0
 8003220:	e02a      	b.n	8003278 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003222:	682c      	ldr	r4, [r5, #0]
 8003224:	2c00      	cmp	r4, #0
 8003226:	d0f7      	beq.n	8003218 <pvPortMalloc+0x84>
 8003228:	462a      	mov	r2, r5
 800322a:	4625      	mov	r5, r4
 800322c:	e7f1      	b.n	8003212 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800322e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003230:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003232:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003234:	1ac2      	subs	r2, r0, r3
 8003236:	2a10      	cmp	r2, #16
 8003238:	d90f      	bls.n	800325a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800323a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800323c:	0741      	lsls	r1, r0, #29
 800323e:	d008      	beq.n	8003252 <pvPortMalloc+0xbe>
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	e7fe      	b.n	8003250 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003252:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003254:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003256:	f7ff ff79 	bl	800314c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800325a:	4913      	ldr	r1, [pc, #76]	; (80032a8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800325c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800325e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003260:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003262:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003264:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8003266:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800326a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800326e:	bf38      	it	cc
 8003270:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003272:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003274:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003276:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003278:	f000 fc46 	bl	8003b08 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800327c:	0763      	lsls	r3, r4, #29
 800327e:	d008      	beq.n	8003292 <pvPortMalloc+0xfe>
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	e7fe      	b.n	8003290 <pvPortMalloc+0xfc>
}
 8003292:	4620      	mov	r0, r4
 8003294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003298:	20000204 	.word	0x20000204
 800329c:	20003e08 	.word	0x20003e08
 80032a0:	20000208 	.word	0x20000208
 80032a4:	20003e14 	.word	0x20003e14
 80032a8:	20003e10 	.word	0x20003e10
 80032ac:	20003e0c 	.word	0x20003e0c

080032b0 <vPortFree>:
{
 80032b0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80032b2:	4604      	mov	r4, r0
 80032b4:	b370      	cbz	r0, 8003314 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032b6:	4a18      	ldr	r2, [pc, #96]	; (8003318 <vPortFree+0x68>)
 80032b8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	4213      	tst	r3, r2
 80032c0:	d108      	bne.n	80032d4 <vPortFree+0x24>
 80032c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	e7fe      	b.n	80032d2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032d4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80032d8:	b141      	cbz	r1, 80032ec <vPortFree+0x3c>
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	e7fe      	b.n	80032ea <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80032ec:	ea23 0302 	bic.w	r3, r3, r2
 80032f0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80032f4:	f000 fb6e 	bl	80039d4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80032f8:	4a08      	ldr	r2, [pc, #32]	; (800331c <vPortFree+0x6c>)
 80032fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80032fe:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003300:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003304:	440b      	add	r3, r1
 8003306:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003308:	f7ff ff20 	bl	800314c <prvInsertBlockIntoFreeList>
}
 800330c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003310:	f000 bbfa 	b.w	8003b08 <xTaskResumeAll>
 8003314:	bd10      	pop	{r4, pc}
 8003316:	bf00      	nop
 8003318:	20003e08 	.word	0x20003e08
 800331c:	20003e0c 	.word	0x20003e0c

08003320 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003320:	b570      	push	{r4, r5, r6, lr}
 8003322:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003324:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003326:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8003328:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800332a:	b942      	cbnz	r2, 800333e <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800332c:	6805      	ldr	r5, [r0, #0]
 800332e:	b99d      	cbnz	r5, 8003358 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003330:	6840      	ldr	r0, [r0, #4]
 8003332:	f000 fd01 	bl	8003d38 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003336:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003338:	3601      	adds	r6, #1
 800333a:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800333c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800333e:	b96d      	cbnz	r5, 800335c <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003340:	6880      	ldr	r0, [r0, #8]
 8003342:	f001 facf 	bl	80048e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003346:	68a3      	ldr	r3, [r4, #8]
 8003348:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800334a:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800334c:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800334e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003350:	4293      	cmp	r3, r2
 8003352:	d301      	bcc.n	8003358 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8003358:	2000      	movs	r0, #0
 800335a:	e7ed      	b.n	8003338 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800335c:	68c0      	ldr	r0, [r0, #12]
 800335e:	f001 fac1 	bl	80048e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003362:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003364:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003366:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003368:	425b      	negs	r3, r3
 800336a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800336c:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800336e:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003370:	bf3e      	ittt	cc
 8003372:	6862      	ldrcc	r2, [r4, #4]
 8003374:	189b      	addcc	r3, r3, r2
 8003376:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003378:	2d02      	cmp	r5, #2
 800337a:	d1ed      	bne.n	8003358 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800337c:	b10e      	cbz	r6, 8003382 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800337e:	3e01      	subs	r6, #1
 8003380:	e7ea      	b.n	8003358 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8003382:	4630      	mov	r0, r6
 8003384:	e7d8      	b.n	8003338 <prvCopyDataToQueue+0x18>

08003386 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003386:	4603      	mov	r3, r0
 8003388:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800338a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800338c:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800338e:	b162      	cbz	r2, 80033aa <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003390:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003392:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003394:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003396:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003398:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800339a:	bf24      	itt	cs
 800339c:	6819      	ldrcs	r1, [r3, #0]
 800339e:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80033a0:	68d9      	ldr	r1, [r3, #12]
	}
}
 80033a2:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80033a6:	f001 ba9d 	b.w	80048e4 <memcpy>
}
 80033aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <xQueueGenericReset>:
{
 80033b0:	b538      	push	{r3, r4, r5, lr}
 80033b2:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80033b4:	4604      	mov	r4, r0
 80033b6:	b940      	cbnz	r0, 80033ca <xQueueGenericReset+0x1a>
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	e7fe      	b.n	80033c8 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80033ca:	f7ff fd73 	bl	8002eb4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033ce:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80033d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033d2:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033d4:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033d6:	4343      	muls	r3, r0
 80033d8:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80033da:	1a1b      	subs	r3, r3, r0
 80033dc:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033de:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80033e0:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033e2:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80033e4:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033e6:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80033e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80033f0:	b995      	cbnz	r5, 8003418 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033f2:	6923      	ldr	r3, [r4, #16]
 80033f4:	b163      	cbz	r3, 8003410 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f6:	f104 0010 	add.w	r0, r4, #16
 80033fa:	f000 fc5b 	bl	8003cb4 <xTaskRemoveFromEventList>
 80033fe:	b138      	cbz	r0, 8003410 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8003400:	4b0a      	ldr	r3, [pc, #40]	; (800342c <xQueueGenericReset+0x7c>)
 8003402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8003410:	f7ff fd72 	bl	8002ef8 <vPortExitCritical>
}
 8003414:	2001      	movs	r0, #1
 8003416:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003418:	f104 0010 	add.w	r0, r4, #16
 800341c:	f7ff fc9b 	bl	8002d56 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003420:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003424:	f7ff fc97 	bl	8002d56 <vListInitialise>
 8003428:	e7f2      	b.n	8003410 <xQueueGenericReset+0x60>
 800342a:	bf00      	nop
 800342c:	e000ed04 	.word	0xe000ed04

08003430 <xQueueGenericCreate>:
	{
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003434:	4606      	mov	r6, r0
 8003436:	b940      	cbnz	r0, 800344a <xQueueGenericCreate+0x1a>
 8003438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	e7fe      	b.n	8003448 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800344a:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800344c:	3048      	adds	r0, #72	; 0x48
 800344e:	f7ff fea1 	bl	8003194 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003452:	4604      	mov	r4, r0
 8003454:	b150      	cbz	r0, 800346c <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003456:	2300      	movs	r3, #0
 8003458:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800345c:	b945      	cbnz	r5, 8003470 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800345e:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003460:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003462:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003464:	2101      	movs	r1, #1
 8003466:	4620      	mov	r0, r4
 8003468:	f7ff ffa2 	bl	80033b0 <xQueueGenericReset>
	}
 800346c:	4620      	mov	r0, r4
 800346e:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003470:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003474:	6003      	str	r3, [r0, #0]
 8003476:	e7f3      	b.n	8003460 <xQueueGenericCreate+0x30>

08003478 <xQueueGenericSendFromISR>:
{
 8003478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800347c:	4688      	mov	r8, r1
 800347e:	4691      	mov	r9, r2
 8003480:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003482:	4604      	mov	r4, r0
 8003484:	b940      	cbnz	r0, 8003498 <xQueueGenericSendFromISR+0x20>
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	e7fe      	b.n	8003496 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003498:	bb09      	cbnz	r1, 80034de <xQueueGenericSendFromISR+0x66>
 800349a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800349c:	b1fb      	cbz	r3, 80034de <xQueueGenericSendFromISR+0x66>
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	e7fe      	b.n	80034ae <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034b4:	f000 fbfe 	bl	8003cb4 <xTaskRemoveFromEventList>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d034      	beq.n	8003526 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 80034bc:	f1b9 0f00 	cmp.w	r9, #0
 80034c0:	d031      	beq.n	8003526 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80034c2:	2001      	movs	r0, #1
 80034c4:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 80034c8:	f386 8811 	msr	BASEPRI, r6
}
 80034cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034d0:	3501      	adds	r5, #1
 80034d2:	b26d      	sxtb	r5, r5
 80034d4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80034d8:	e025      	b.n	8003526 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 80034da:	2000      	movs	r0, #0
 80034dc:	e7f4      	b.n	80034c8 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034de:	2f02      	cmp	r7, #2
 80034e0:	d102      	bne.n	80034e8 <xQueueGenericSendFromISR+0x70>
 80034e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d120      	bne.n	800352a <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034e8:	f7ff fe02 	bl	80030f0 <vPortValidateInterruptPriority>
	__asm volatile
 80034ec:	f3ef 8611 	mrs	r6, BASEPRI
 80034f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003500:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003502:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003504:	429a      	cmp	r2, r3
 8003506:	d301      	bcc.n	800350c <xQueueGenericSendFromISR+0x94>
 8003508:	2f02      	cmp	r7, #2
 800350a:	d1e6      	bne.n	80034da <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 800350c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003510:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8003512:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003514:	4641      	mov	r1, r8
 8003516:	4620      	mov	r0, r4
 8003518:	f7ff ff02 	bl	8003320 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800351c:	1c6b      	adds	r3, r5, #1
 800351e:	d1d7      	bne.n	80034d0 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1c4      	bne.n	80034b0 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8003526:	2001      	movs	r0, #1
 8003528:	e7ce      	b.n	80034c8 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 800352a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	e7fe      	b.n	800353a <xQueueGenericSendFromISR+0xc2>

0800353c <xQueueReceiveFromISR>:
{
 800353c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003540:	4689      	mov	r9, r1
 8003542:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8003544:	4605      	mov	r5, r0
 8003546:	b940      	cbnz	r0, 800355a <xQueueReceiveFromISR+0x1e>
 8003548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	e7fe      	b.n	8003558 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800355a:	bb71      	cbnz	r1, 80035ba <xQueueReceiveFromISR+0x7e>
 800355c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800355e:	b363      	cbz	r3, 80035ba <xQueueReceiveFromISR+0x7e>
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	e7fe      	b.n	8003570 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003572:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003576:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8003578:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800357a:	4628      	mov	r0, r5
 800357c:	f7ff ff03 	bl	8003386 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003580:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8003582:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003584:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8003586:	d113      	bne.n	80035b0 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003588:	692b      	ldr	r3, [r5, #16]
 800358a:	b90b      	cbnz	r3, 8003590 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 800358c:	2001      	movs	r0, #1
 800358e:	e00b      	b.n	80035a8 <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003590:	f105 0010 	add.w	r0, r5, #16
 8003594:	f000 fb8e 	bl	8003cb4 <xTaskRemoveFromEventList>
 8003598:	2800      	cmp	r0, #0
 800359a:	d0f7      	beq.n	800358c <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 800359c:	f1b8 0f00 	cmp.w	r8, #0
 80035a0:	d0f4      	beq.n	800358c <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80035a2:	2001      	movs	r0, #1
 80035a4:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80035a8:	f387 8811 	msr	BASEPRI, r7
}
 80035ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80035b0:	3601      	adds	r6, #1
 80035b2:	b276      	sxtb	r6, r6
 80035b4:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80035b8:	e7e8      	b.n	800358c <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035ba:	f7ff fd99 	bl	80030f0 <vPortValidateInterruptPriority>
	__asm volatile
 80035be:	f3ef 8711 	mrs	r7, BASEPRI
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035d2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035d4:	2c00      	cmp	r4, #0
 80035d6:	d1cc      	bne.n	8003572 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 80035d8:	4620      	mov	r0, r4
 80035da:	e7e5      	b.n	80035a8 <xQueueReceiveFromISR+0x6c>

080035dc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035e0:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035e2:	f7ff fc67 	bl	8002eb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035e6:	4b2d      	ldr	r3, [pc, #180]	; (800369c <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 80035e8:	4c2d      	ldr	r4, [pc, #180]	; (80036a0 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4f2d      	ldr	r7, [pc, #180]	; (80036a4 <prvAddNewTaskToReadyList+0xc8>)
 80035ee:	3201      	adds	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80035f2:	6825      	ldr	r5, [r4, #0]
 80035f4:	2d00      	cmp	r5, #0
 80035f6:	d145      	bne.n	8003684 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035f8:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d11c      	bne.n	800363a <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003600:	1978      	adds	r0, r7, r5
 8003602:	3514      	adds	r5, #20
 8003604:	f7ff fba7 	bl	8002d56 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003608:	2d8c      	cmp	r5, #140	; 0x8c
 800360a:	d1f9      	bne.n	8003600 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 800360c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80036d0 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8003610:	4d25      	ldr	r5, [pc, #148]	; (80036a8 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8003612:	4640      	mov	r0, r8
 8003614:	f7ff fb9f 	bl	8002d56 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003618:	4628      	mov	r0, r5
 800361a:	f7ff fb9c 	bl	8002d56 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800361e:	4823      	ldr	r0, [pc, #140]	; (80036ac <prvAddNewTaskToReadyList+0xd0>)
 8003620:	f7ff fb99 	bl	8002d56 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003624:	4822      	ldr	r0, [pc, #136]	; (80036b0 <prvAddNewTaskToReadyList+0xd4>)
 8003626:	f7ff fb96 	bl	8002d56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800362a:	4822      	ldr	r0, [pc, #136]	; (80036b4 <prvAddNewTaskToReadyList+0xd8>)
 800362c:	f7ff fb93 	bl	8002d56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003630:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <prvAddNewTaskToReadyList+0xdc>)
 8003632:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003636:	4b21      	ldr	r3, [pc, #132]	; (80036bc <prvAddNewTaskToReadyList+0xe0>)
 8003638:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800363a:	4a21      	ldr	r2, [pc, #132]	; (80036c0 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 800363c:	4921      	ldr	r1, [pc, #132]	; (80036c4 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 800363e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003640:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003642:	3301      	adds	r3, #1
 8003644:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003646:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003648:	2301      	movs	r3, #1
 800364a:	4093      	lsls	r3, r2
 800364c:	4303      	orrs	r3, r0
 800364e:	2014      	movs	r0, #20
 8003650:	600b      	str	r3, [r1, #0]
 8003652:	fb00 7002 	mla	r0, r0, r2, r7
 8003656:	1d31      	adds	r1, r6, #4
 8003658:	f7ff fb8b 	bl	8002d72 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800365c:	f7ff fc4c 	bl	8002ef8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003660:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <prvAddNewTaskToReadyList+0xec>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	b163      	cbz	r3, 8003680 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800366c:	429a      	cmp	r2, r3
 800366e:	d207      	bcs.n	8003680 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <prvAddNewTaskToReadyList+0xf0>)
 8003672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003684:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <prvAddNewTaskToReadyList+0xec>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1d6      	bne.n	800363a <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003692:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003694:	bf98      	it	ls
 8003696:	6026      	strls	r6, [r4, #0]
 8003698:	e7cf      	b.n	800363a <prvAddNewTaskToReadyList+0x5e>
 800369a:	bf00      	nop
 800369c:	20003eb4 	.word	0x20003eb4
 80036a0:	20003e1c 	.word	0x20003e1c
 80036a4:	20003e28 	.word	0x20003e28
 80036a8:	20003ee0 	.word	0x20003ee0
 80036ac:	20003efc 	.word	0x20003efc
 80036b0:	20003f28 	.word	0x20003f28
 80036b4:	20003f14 	.word	0x20003f14
 80036b8:	20003e20 	.word	0x20003e20
 80036bc:	20003e24 	.word	0x20003e24
 80036c0:	20003ec4 	.word	0x20003ec4
 80036c4:	20003ec8 	.word	0x20003ec8
 80036c8:	20003f10 	.word	0x20003f10
 80036cc:	e000ed04 	.word	0xe000ed04
 80036d0:	20003ecc 	.word	0x20003ecc

080036d4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036d4:	4a06      	ldr	r2, [pc, #24]	; (80036f0 <prvResetNextTaskUnblockTime+0x1c>)
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	6819      	ldr	r1, [r3, #0]
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <prvResetNextTaskUnblockTime+0x20>)
 80036dc:	b919      	cbnz	r1, 80036e6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036de:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80036ea:	68d2      	ldr	r2, [r2, #12]
 80036ec:	6852      	ldr	r2, [r2, #4]
 80036ee:	e7f8      	b.n	80036e2 <prvResetNextTaskUnblockTime+0xe>
 80036f0:	20003e20 	.word	0x20003e20
 80036f4:	20003ef4 	.word	0x20003ef4

080036f8 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80036f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80036fe:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003702:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003704:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003708:	3a01      	subs	r2, #1
 800370a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800370e:	469a      	mov	sl, r3
 8003710:	4681      	mov	r9, r0
 8003712:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003714:	f026 0607 	bic.w	r6, r6, #7
 8003718:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800371c:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800371e:	7858      	ldrb	r0, [r3, #1]
 8003720:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003724:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003728:	b108      	cbz	r0, 800372e <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800372a:	428b      	cmp	r3, r1
 800372c:	d1f7      	bne.n	800371e <prvInitialiseNewTask.isra.2+0x26>
 800372e:	9d08      	ldr	r5, [sp, #32]
 8003730:	2d06      	cmp	r5, #6
 8003732:	bf28      	it	cs
 8003734:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003736:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8003738:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800373a:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800373c:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800373e:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8003742:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003744:	f7ff fb12 	bl	8002d6c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003748:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800374c:	f104 0018 	add.w	r0, r4, #24
 8003750:	f7ff fb0c 	bl	8002d6c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003754:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003756:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003758:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800375a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800375c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003760:	4652      	mov	r2, sl
 8003762:	4649      	mov	r1, r9
 8003764:	4630      	mov	r0, r6
 8003766:	f7ff fb77 	bl	8002e58 <pxPortInitialiseStack>
 800376a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800376c:	f1b8 0f00 	cmp.w	r8, #0
 8003770:	d001      	beq.n	8003776 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003772:	f8c8 4000 	str.w	r4, [r8]
 8003776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800377a <prvDeleteTCB>:
	{
 800377a:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800377c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8003780:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003782:	b93b      	cbnz	r3, 8003794 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8003784:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003786:	f7ff fd93 	bl	80032b0 <vPortFree>
				vPortFree( pxTCB );
 800378a:	4620      	mov	r0, r4
	}
 800378c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8003790:	f7ff bd8e 	b.w	80032b0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003794:	2b01      	cmp	r3, #1
 8003796:	d0f9      	beq.n	800378c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003798:	2b02      	cmp	r3, #2
 800379a:	d008      	beq.n	80037ae <prvDeleteTCB+0x34>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	e7fe      	b.n	80037ac <prvDeleteTCB+0x32>
 80037ae:	bd10      	pop	{r4, pc}

080037b0 <prvIdleTask>:
{
 80037b0:	b580      	push	{r7, lr}
				taskYIELD();
 80037b2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8003810 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037b6:	4f12      	ldr	r7, [pc, #72]	; (8003800 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037b8:	4c12      	ldr	r4, [pc, #72]	; (8003804 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80037ba:	4d13      	ldr	r5, [pc, #76]	; (8003808 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	b963      	cbnz	r3, 80037da <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037c0:	4b12      	ldr	r3, [pc, #72]	; (800380c <prvIdleTask+0x5c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d9f8      	bls.n	80037ba <prvIdleTask+0xa>
				taskYIELD();
 80037c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80037cc:	f8c8 3000 	str.w	r3, [r8]
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	e7ee      	b.n	80037b8 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80037da:	f7ff fb6b 	bl	8002eb4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037e2:	1d30      	adds	r0, r6, #4
 80037e4:	f7ff fae8 	bl	8002db8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80037f4:	f7ff fb80 	bl	8002ef8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80037f8:	4630      	mov	r0, r6
 80037fa:	f7ff ffbe 	bl	800377a <prvDeleteTCB>
 80037fe:	e7dd      	b.n	80037bc <prvIdleTask+0xc>
 8003800:	20003f28 	.word	0x20003f28
 8003804:	20003eb8 	.word	0x20003eb8
 8003808:	20003eb4 	.word	0x20003eb4
 800380c:	20003e28 	.word	0x20003e28
 8003810:	e000ed04 	.word	0xe000ed04

08003814 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003816:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003818:	4e1b      	ldr	r6, [pc, #108]	; (8003888 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800381a:	681d      	ldr	r5, [r3, #0]
{
 800381c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800381e:	6830      	ldr	r0, [r6, #0]
 8003820:	3004      	adds	r0, #4
{
 8003822:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003824:	f7ff fac8 	bl	8002db8 <uxListRemove>
 8003828:	4633      	mov	r3, r6
 800382a:	b940      	cbnz	r0, 800383e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800382c:	6831      	ldr	r1, [r6, #0]
 800382e:	4e17      	ldr	r6, [pc, #92]	; (800388c <prvAddCurrentTaskToDelayedList+0x78>)
 8003830:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003832:	6832      	ldr	r2, [r6, #0]
 8003834:	2001      	movs	r0, #1
 8003836:	4088      	lsls	r0, r1
 8003838:	ea22 0200 	bic.w	r2, r2, r0
 800383c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800383e:	1c62      	adds	r2, r4, #1
 8003840:	d107      	bne.n	8003852 <prvAddCurrentTaskToDelayedList+0x3e>
 8003842:	b137      	cbz	r7, 8003852 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003844:	6819      	ldr	r1, [r3, #0]
 8003846:	4812      	ldr	r0, [pc, #72]	; (8003890 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003848:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800384a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800384e:	f7ff ba90 	b.w	8002d72 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003852:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003854:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8003856:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003858:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800385a:	d907      	bls.n	800386c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800385c:	4a0d      	ldr	r2, [pc, #52]	; (8003894 <prvAddCurrentTaskToDelayedList+0x80>)
 800385e:	6810      	ldr	r0, [r2, #0]
 8003860:	6819      	ldr	r1, [r3, #0]
}
 8003862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003866:	3104      	adds	r1, #4
 8003868:	f7ff ba8f 	b.w	8002d8a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800386c:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <prvAddCurrentTaskToDelayedList+0x84>)
 800386e:	6810      	ldr	r0, [r2, #0]
 8003870:	6819      	ldr	r1, [r3, #0]
 8003872:	3104      	adds	r1, #4
 8003874:	f7ff fa89 	bl	8002d8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <prvAddCurrentTaskToDelayedList+0x88>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800387e:	bf38      	it	cc
 8003880:	601c      	strcc	r4, [r3, #0]
 8003882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003884:	20003f3c 	.word	0x20003f3c
 8003888:	20003e1c 	.word	0x20003e1c
 800388c:	20003ec8 	.word	0x20003ec8
 8003890:	20003f14 	.word	0x20003f14
 8003894:	20003e24 	.word	0x20003e24
 8003898:	20003e20 	.word	0x20003e20
 800389c:	20003ef4 	.word	0x20003ef4

080038a0 <xTaskCreateStatic>:
	{
 80038a0:	b570      	push	{r4, r5, r6, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80038a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80038a8:	b945      	cbnz	r5, 80038bc <xTaskCreateStatic+0x1c>
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	e7fe      	b.n	80038ba <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80038bc:	b944      	cbnz	r4, 80038d0 <xTaskCreateStatic+0x30>
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	e7fe      	b.n	80038ce <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80038d0:	2654      	movs	r6, #84	; 0x54
 80038d2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038d4:	9e04      	ldr	r6, [sp, #16]
 80038d6:	2e54      	cmp	r6, #84	; 0x54
 80038d8:	d008      	beq.n	80038ec <xTaskCreateStatic+0x4c>
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	e7fe      	b.n	80038ea <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038ec:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038ee:	2502      	movs	r5, #2
 80038f0:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038f4:	ad05      	add	r5, sp, #20
 80038f6:	9501      	str	r5, [sp, #4]
 80038f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80038fa:	9402      	str	r4, [sp, #8]
 80038fc:	9500      	str	r5, [sp, #0]
 80038fe:	f7ff fefb 	bl	80036f8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003902:	4620      	mov	r0, r4
 8003904:	f7ff fe6a 	bl	80035dc <prvAddNewTaskToReadyList>
	}
 8003908:	9805      	ldr	r0, [sp, #20]
 800390a:	b006      	add	sp, #24
 800390c:	bd70      	pop	{r4, r5, r6, pc}

0800390e <xTaskCreate>:
	{
 800390e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003912:	4607      	mov	r7, r0
 8003914:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003916:	0090      	lsls	r0, r2, #2
	{
 8003918:	4688      	mov	r8, r1
 800391a:	4616      	mov	r6, r2
 800391c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800391e:	f7ff fc39 	bl	8003194 <pvPortMalloc>
			if( pxStack != NULL )
 8003922:	4605      	mov	r5, r0
 8003924:	b1e8      	cbz	r0, 8003962 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003926:	2054      	movs	r0, #84	; 0x54
 8003928:	f7ff fc34 	bl	8003194 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800392c:	4604      	mov	r4, r0
 800392e:	b1a8      	cbz	r0, 800395c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003930:	2300      	movs	r3, #0
 8003932:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8003938:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800393e:	9002      	str	r0, [sp, #8]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	4632      	mov	r2, r6
 8003944:	464b      	mov	r3, r9
 8003946:	4641      	mov	r1, r8
 8003948:	4638      	mov	r0, r7
 800394a:	f7ff fed5 	bl	80036f8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800394e:	4620      	mov	r0, r4
 8003950:	f7ff fe44 	bl	80035dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003954:	2001      	movs	r0, #1
	}
 8003956:	b005      	add	sp, #20
 8003958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800395c:	4628      	mov	r0, r5
 800395e:	f7ff fca7 	bl	80032b0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003962:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8003966:	e7f6      	b.n	8003956 <xTaskCreate+0x48>

08003968 <vTaskStartScheduler>:
{
 8003968:	b510      	push	{r4, lr}
 800396a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800396c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800396e:	aa07      	add	r2, sp, #28
 8003970:	a906      	add	r1, sp, #24
 8003972:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003974:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003976:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003978:	f000 fa2e 	bl	8003dd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800397c:	9b05      	ldr	r3, [sp, #20]
 800397e:	9302      	str	r3, [sp, #8]
 8003980:	9b06      	ldr	r3, [sp, #24]
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	9400      	str	r4, [sp, #0]
 8003986:	4623      	mov	r3, r4
 8003988:	9a07      	ldr	r2, [sp, #28]
 800398a:	490d      	ldr	r1, [pc, #52]	; (80039c0 <vTaskStartScheduler+0x58>)
 800398c:	480d      	ldr	r0, [pc, #52]	; (80039c4 <vTaskStartScheduler+0x5c>)
 800398e:	f7ff ff87 	bl	80038a0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003992:	b190      	cbz	r0, 80039ba <vTaskStartScheduler+0x52>
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80039a4:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <vTaskStartScheduler+0x60>)
 80039a6:	f04f 32ff 	mov.w	r2, #4294967295
 80039aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039ac:	4b07      	ldr	r3, [pc, #28]	; (80039cc <vTaskStartScheduler+0x64>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80039b2:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <vTaskStartScheduler+0x68>)
 80039b4:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80039b6:	f7ff fb15 	bl	8002fe4 <xPortStartScheduler>
}
 80039ba:	b008      	add	sp, #32
 80039bc:	bd10      	pop	{r4, pc}
 80039be:	bf00      	nop
 80039c0:	08004ad8 	.word	0x08004ad8
 80039c4:	080037b1 	.word	0x080037b1
 80039c8:	20003ef4 	.word	0x20003ef4
 80039cc:	20003f10 	.word	0x20003f10
 80039d0:	20003f3c 	.word	0x20003f3c

080039d4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80039d4:	4a02      	ldr	r2, [pc, #8]	; (80039e0 <vTaskSuspendAll+0xc>)
 80039d6:	6813      	ldr	r3, [r2, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20003ec0 	.word	0x20003ec0

080039e4 <xTaskIncrementTick>:
{
 80039e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039e8:	4b3c      	ldr	r3, [pc, #240]	; (8003adc <xTaskIncrementTick+0xf8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d153      	bne.n	8003a98 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039f0:	4b3b      	ldr	r3, [pc, #236]	; (8003ae0 <xTaskIncrementTick+0xfc>)
 80039f2:	681c      	ldr	r4, [r3, #0]
 80039f4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80039f6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039f8:	b9bc      	cbnz	r4, 8003a2a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80039fa:	4b3a      	ldr	r3, [pc, #232]	; (8003ae4 <xTaskIncrementTick+0x100>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	b142      	cbz	r2, 8003a14 <xTaskIncrementTick+0x30>
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	e7fe      	b.n	8003a12 <xTaskIncrementTick+0x2e>
 8003a14:	4a34      	ldr	r2, [pc, #208]	; (8003ae8 <xTaskIncrementTick+0x104>)
 8003a16:	6819      	ldr	r1, [r3, #0]
 8003a18:	6810      	ldr	r0, [r2, #0]
 8003a1a:	6018      	str	r0, [r3, #0]
 8003a1c:	6011      	str	r1, [r2, #0]
 8003a1e:	4a33      	ldr	r2, [pc, #204]	; (8003aec <xTaskIncrementTick+0x108>)
 8003a20:	6813      	ldr	r3, [r2, #0]
 8003a22:	3301      	adds	r3, #1
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	f7ff fe55 	bl	80036d4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a2a:	4d31      	ldr	r5, [pc, #196]	; (8003af0 <xTaskIncrementTick+0x10c>)
 8003a2c:	4f31      	ldr	r7, [pc, #196]	; (8003af4 <xTaskIncrementTick+0x110>)
 8003a2e:	682b      	ldr	r3, [r5, #0]
 8003a30:	429c      	cmp	r4, r3
 8003a32:	f04f 0b00 	mov.w	fp, #0
 8003a36:	d33e      	bcc.n	8003ab6 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a38:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003ae4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8003a3c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003b04 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a40:	f8d8 2000 	ldr.w	r2, [r8]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	bb72      	cbnz	r2, 8003aa6 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a48:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4c:	602a      	str	r2, [r5, #0]
					break;
 8003a4e:	e032      	b.n	8003ab6 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a50:	f106 0a04 	add.w	sl, r6, #4
 8003a54:	4650      	mov	r0, sl
 8003a56:	f7ff f9af 	bl	8002db8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a5a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003a5c:	b119      	cbz	r1, 8003a66 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a5e:	f106 0018 	add.w	r0, r6, #24
 8003a62:	f7ff f9a9 	bl	8002db8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a66:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003a68:	f8d9 3000 	ldr.w	r3, [r9]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	fa02 f100 	lsl.w	r1, r2, r0
 8003a72:	4319      	orrs	r1, r3
 8003a74:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <xTaskIncrementTick+0x114>)
 8003a76:	f8c9 1000 	str.w	r1, [r9]
 8003a7a:	f04f 0e14 	mov.w	lr, #20
 8003a7e:	4651      	mov	r1, sl
 8003a80:	fb0e 3000 	mla	r0, lr, r0, r3
 8003a84:	f7ff f975 	bl	8002d72 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a88:	6838      	ldr	r0, [r7, #0]
 8003a8a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003a8c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003a8e:	4291      	cmp	r1, r2
 8003a90:	bf28      	it	cs
 8003a92:	f04f 0b01 	movcs.w	fp, #1
 8003a96:	e7d3      	b.n	8003a40 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003a98:	4a18      	ldr	r2, [pc, #96]	; (8003afc <xTaskIncrementTick+0x118>)
 8003a9a:	6813      	ldr	r3, [r2, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003aa0:	f04f 0b00 	mov.w	fp, #0
 8003aa4:	e011      	b.n	8003aca <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003aa6:	f8d8 2000 	ldr.w	r2, [r8]
 8003aaa:	68d2      	ldr	r2, [r2, #12]
 8003aac:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003aae:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003ab0:	428c      	cmp	r4, r1
 8003ab2:	d2cd      	bcs.n	8003a50 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003ab4:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <xTaskIncrementTick+0x114>)
 8003aba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003abc:	2214      	movs	r2, #20
 8003abe:	434a      	muls	r2, r1
 8003ac0:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003ac2:	2a02      	cmp	r2, #2
 8003ac4:	bf28      	it	cs
 8003ac6:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003aca:	4a0d      	ldr	r2, [pc, #52]	; (8003b00 <xTaskIncrementTick+0x11c>)
 8003acc:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003ace:	2a00      	cmp	r2, #0
 8003ad0:	bf18      	it	ne
 8003ad2:	f04f 0b01 	movne.w	fp, #1
}
 8003ad6:	4658      	mov	r0, fp
 8003ad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003adc:	20003ec0 	.word	0x20003ec0
 8003ae0:	20003f3c 	.word	0x20003f3c
 8003ae4:	20003e20 	.word	0x20003e20
 8003ae8:	20003e24 	.word	0x20003e24
 8003aec:	20003ef8 	.word	0x20003ef8
 8003af0:	20003ef4 	.word	0x20003ef4
 8003af4:	20003e1c 	.word	0x20003e1c
 8003af8:	20003e28 	.word	0x20003e28
 8003afc:	20003ebc 	.word	0x20003ebc
 8003b00:	20003f40 	.word	0x20003f40
 8003b04:	20003ec8 	.word	0x20003ec8

08003b08 <xTaskResumeAll>:
{
 8003b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003b0c:	4c31      	ldr	r4, [pc, #196]	; (8003bd4 <xTaskResumeAll+0xcc>)
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	b943      	cbnz	r3, 8003b24 <xTaskResumeAll+0x1c>
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	e7fe      	b.n	8003b22 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003b24:	f7ff f9c6 	bl	8002eb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b2e:	6824      	ldr	r4, [r4, #0]
 8003b30:	b12c      	cbz	r4, 8003b3e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003b32:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003b34:	f7ff f9e0 	bl	8002ef8 <vPortExitCritical>
}
 8003b38:	4620      	mov	r0, r4
 8003b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b3e:	4b26      	ldr	r3, [pc, #152]	; (8003bd8 <xTaskResumeAll+0xd0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f5      	beq.n	8003b32 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b46:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003bf0 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8003b4a:	4f24      	ldr	r7, [pc, #144]	; (8003bdc <xTaskResumeAll+0xd4>)
 8003b4c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003bf4 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b50:	f8d9 3000 	ldr.w	r3, [r9]
 8003b54:	b9e3      	cbnz	r3, 8003b90 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8003b56:	b10c      	cbz	r4, 8003b5c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8003b58:	f7ff fdbc 	bl	80036d4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b5c:	4d20      	ldr	r5, [pc, #128]	; (8003be0 <xTaskResumeAll+0xd8>)
 8003b5e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b60:	b144      	cbz	r4, 8003b74 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8003b62:	4e20      	ldr	r6, [pc, #128]	; (8003be4 <xTaskResumeAll+0xdc>)
 8003b64:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003b66:	f7ff ff3d 	bl	80039e4 <xTaskIncrementTick>
 8003b6a:	b100      	cbz	r0, 8003b6e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8003b6c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b6e:	3c01      	subs	r4, #1
 8003b70:	d1f9      	bne.n	8003b66 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8003b72:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003b74:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <xTaskResumeAll+0xdc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0da      	beq.n	8003b32 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <xTaskResumeAll+0xe0>)
 8003b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003b8c:	2401      	movs	r4, #1
 8003b8e:	e7d1      	b.n	8003b34 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b90:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003b94:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b96:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b98:	f104 0018 	add.w	r0, r4, #24
 8003b9c:	f7ff f90c 	bl	8002db8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f7ff f909 	bl	8002db8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ba6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ba8:	6839      	ldr	r1, [r7, #0]
 8003baa:	2501      	movs	r5, #1
 8003bac:	fa05 f302 	lsl.w	r3, r5, r2
 8003bb0:	2014      	movs	r0, #20
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	fb00 8002 	mla	r0, r0, r2, r8
 8003bb8:	4631      	mov	r1, r6
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	f7ff f8d9 	bl	8002d72 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <xTaskResumeAll+0xe4>)
 8003bc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003bca:	bf24      	itt	cs
 8003bcc:	4b05      	ldrcs	r3, [pc, #20]	; (8003be4 <xTaskResumeAll+0xdc>)
 8003bce:	601d      	strcs	r5, [r3, #0]
 8003bd0:	e7be      	b.n	8003b50 <xTaskResumeAll+0x48>
 8003bd2:	bf00      	nop
 8003bd4:	20003ec0 	.word	0x20003ec0
 8003bd8:	20003eb4 	.word	0x20003eb4
 8003bdc:	20003ec8 	.word	0x20003ec8
 8003be0:	20003ebc 	.word	0x20003ebc
 8003be4:	20003f40 	.word	0x20003f40
 8003be8:	e000ed04 	.word	0xe000ed04
 8003bec:	20003e1c 	.word	0x20003e1c
 8003bf0:	20003efc 	.word	0x20003efc
 8003bf4:	20003e28 	.word	0x20003e28

08003bf8 <vTaskDelay>:
	{
 8003bf8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bfa:	b940      	cbnz	r0, 8003c0e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <vTaskDelay+0x40>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <vTaskDelay+0x44>)
 8003c10:	6819      	ldr	r1, [r3, #0]
 8003c12:	b141      	cbz	r1, 8003c26 <vTaskDelay+0x2e>
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	e7fe      	b.n	8003c24 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003c26:	f7ff fed5 	bl	80039d4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c2a:	f7ff fdf3 	bl	8003814 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003c2e:	f7ff ff6b 	bl	8003b08 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d0e2      	beq.n	8003bfc <vTaskDelay+0x4>
 8003c36:	bd08      	pop	{r3, pc}
 8003c38:	e000ed04 	.word	0xe000ed04
 8003c3c:	20003ec0 	.word	0x20003ec0

08003c40 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c40:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <vTaskSwitchContext+0x60>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <vTaskSwitchContext+0x64>)
{
 8003c46:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c48:	b112      	cbz	r2, 8003c50 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003c4a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003c50:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c52:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <vTaskSwitchContext+0x68>)
 8003c54:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c56:	fab3 f383 	clz	r3, r3
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f1c3 031f 	rsb	r3, r3, #31
 8003c60:	2214      	movs	r2, #20
 8003c62:	4912      	ldr	r1, [pc, #72]	; (8003cac <vTaskSwitchContext+0x6c>)
 8003c64:	435a      	muls	r2, r3
 8003c66:	1888      	adds	r0, r1, r2
 8003c68:	588c      	ldr	r4, [r1, r2]
 8003c6a:	b944      	cbnz	r4, 8003c7e <vTaskSwitchContext+0x3e>
	__asm volatile
 8003c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	e7fe      	b.n	8003c7c <vTaskSwitchContext+0x3c>
 8003c7e:	6844      	ldr	r4, [r0, #4]
 8003c80:	3208      	adds	r2, #8
 8003c82:	6864      	ldr	r4, [r4, #4]
 8003c84:	6044      	str	r4, [r0, #4]
 8003c86:	440a      	add	r2, r1
 8003c88:	4294      	cmp	r4, r2
 8003c8a:	bf04      	itt	eq
 8003c8c:	6862      	ldreq	r2, [r4, #4]
 8003c8e:	6042      	streq	r2, [r0, #4]
 8003c90:	2214      	movs	r2, #20
 8003c92:	fb02 1303 	mla	r3, r2, r3, r1
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <vTaskSwitchContext+0x70>)
 8003c9c:	e7d6      	b.n	8003c4c <vTaskSwitchContext+0xc>
 8003c9e:	bf00      	nop
 8003ca0:	20003ec0 	.word	0x20003ec0
 8003ca4:	20003f40 	.word	0x20003f40
 8003ca8:	20003ec8 	.word	0x20003ec8
 8003cac:	20003e28 	.word	0x20003e28
 8003cb0:	20003e1c 	.word	0x20003e1c

08003cb4 <xTaskRemoveFromEventList>:
{
 8003cb4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003cb6:	68c3      	ldr	r3, [r0, #12]
 8003cb8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003cba:	b944      	cbnz	r4, 8003cce <xTaskRemoveFromEventList+0x1a>
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	e7fe      	b.n	8003ccc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cce:	f104 0518 	add.w	r5, r4, #24
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f7ff f870 	bl	8002db8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cd8:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <xTaskRemoveFromEventList+0x6c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	b9e3      	cbnz	r3, 8003d18 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cde:	1d25      	adds	r5, r4, #4
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	f7ff f869 	bl	8002db8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ce6:	490f      	ldr	r1, [pc, #60]	; (8003d24 <xTaskRemoveFromEventList+0x70>)
 8003ce8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003cea:	6808      	ldr	r0, [r1, #0]
 8003cec:	2301      	movs	r3, #1
 8003cee:	4093      	lsls	r3, r2
 8003cf0:	4303      	orrs	r3, r0
 8003cf2:	600b      	str	r3, [r1, #0]
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <xTaskRemoveFromEventList+0x74>)
 8003cf6:	2014      	movs	r0, #20
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cfe:	f7ff f838 	bl	8002d72 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <xTaskRemoveFromEventList+0x78>)
 8003d04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003d0c:	bf83      	ittte	hi
 8003d0e:	4b08      	ldrhi	r3, [pc, #32]	; (8003d30 <xTaskRemoveFromEventList+0x7c>)
 8003d10:	2001      	movhi	r0, #1
 8003d12:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003d14:	2000      	movls	r0, #0
}
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d18:	4629      	mov	r1, r5
 8003d1a:	4806      	ldr	r0, [pc, #24]	; (8003d34 <xTaskRemoveFromEventList+0x80>)
 8003d1c:	e7ef      	b.n	8003cfe <xTaskRemoveFromEventList+0x4a>
 8003d1e:	bf00      	nop
 8003d20:	20003ec0 	.word	0x20003ec0
 8003d24:	20003ec8 	.word	0x20003ec8
 8003d28:	20003e28 	.word	0x20003e28
 8003d2c:	20003e1c 	.word	0x20003e1c
 8003d30:	20003f40 	.word	0x20003f40
 8003d34:	20003efc 	.word	0x20003efc

08003d38 <xTaskPriorityDisinherit>:
	{
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	b908      	cbnz	r0, 8003d42 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003d3e:	2000      	movs	r0, #0
 8003d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003d42:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <xTaskPriorityDisinherit+0x94>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4298      	cmp	r0, r3
 8003d48:	d008      	beq.n	8003d5c <xTaskPriorityDisinherit+0x24>
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	e7fe      	b.n	8003d5a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d5c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003d5e:	b943      	cbnz	r3, 8003d72 <xTaskPriorityDisinherit+0x3a>
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	e7fe      	b.n	8003d70 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d72:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003d74:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8003d76:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d78:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003d7a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d7c:	d0df      	beq.n	8003d3e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1dd      	bne.n	8003d3e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d82:	1d05      	adds	r5, r0, #4
 8003d84:	4628      	mov	r0, r5
 8003d86:	f7ff f817 	bl	8002db8 <uxListRemove>
 8003d8a:	4e11      	ldr	r6, [pc, #68]	; (8003dd0 <xTaskPriorityDisinherit+0x98>)
 8003d8c:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <xTaskPriorityDisinherit+0x9c>)
 8003d8e:	b950      	cbnz	r0, 8003da6 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d90:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003d92:	2114      	movs	r1, #20
 8003d94:	4379      	muls	r1, r7
 8003d96:	5873      	ldr	r3, [r6, r1]
 8003d98:	b92b      	cbnz	r3, 8003da6 <xTaskPriorityDisinherit+0x6e>
 8003d9a:	6813      	ldr	r3, [r2, #0]
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	40b8      	lsls	r0, r7
 8003da0:	ea23 0300 	bic.w	r3, r3, r0
 8003da4:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003da6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003da8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003daa:	f1c3 0107 	rsb	r1, r3, #7
 8003dae:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003db0:	6811      	ldr	r1, [r2, #0]
 8003db2:	2401      	movs	r4, #1
 8003db4:	fa04 f003 	lsl.w	r0, r4, r3
 8003db8:	4308      	orrs	r0, r1
 8003dba:	6010      	str	r0, [r2, #0]
 8003dbc:	2014      	movs	r0, #20
 8003dbe:	fb00 6003 	mla	r0, r0, r3, r6
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	f7fe ffd5 	bl	8002d72 <vListInsertEnd>
					xReturn = pdTRUE;
 8003dc8:	4620      	mov	r0, r4
	}
 8003dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dcc:	20003e1c 	.word	0x20003e1c
 8003dd0:	20003e28 	.word	0x20003e28
 8003dd4:	20003ec8 	.word	0x20003ec8

08003dd8 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <vApplicationGetIdleTaskMemory+0x10>)
 8003dda:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <vApplicationGetIdleTaskMemory+0x14>)
 8003dde:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20004144 	.word	0x20004144
 8003dec:	20003f44 	.word	0x20003f44

08003df0 <i2c_mon_sda>:
	}
}
#endif
/* user sda pin configure */
static void i2c_mon_sda(struct i2c_monitor_t *i2c, GPIO_TypeDef *port, uint16_t pin) {
	i2c->sda_port = port;
 8003df0:	6101      	str	r1, [r0, #16]
	i2c->sda_pin = pin;
 8003df2:	8282      	strh	r2, [r0, #20]
 8003df4:	4770      	bx	lr

08003df6 <i2c_mon_scl>:
}

/* user scl pin configure */
static void i2c_mon_scl(struct i2c_monitor_t *i2c, GPIO_TypeDef *port, uint16_t pin) {
	i2c->scl_port = port;
 8003df6:	6081      	str	r1, [r0, #8]
	i2c->scl_pin = pin;
 8003df8:	8182      	strh	r2, [r0, #12]
 8003dfa:	4770      	bx	lr

08003dfc <s_hex2ascii>:
/*
 * convert hex to ascii
 */
static void s_hex2ascii(struct i2c_monitor_t *i2c, uint8_t data) {
	uint8_t val;
	if (data >= 0 && data <= 9) {
 8003dfc:	2909      	cmp	r1, #9
 8003dfe:	d809      	bhi.n	8003e14 <s_hex2ascii+0x18>
		val = data + '0';
 8003e00:	3130      	adds	r1, #48	; 0x30
	} else if (data >= 'a' && data <= 'f') {
		val = data -  10 + 0x41;
	} else {
		val = data -  10 + 0x61;
	}
	i2c->i2c_buffer[i2c->i2c_buffer_idx++] = val;
 8003e02:	f8b0 3216 	ldrh.w	r3, [r0, #534]	; 0x216
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	f8a0 2216 	strh.w	r2, [r0, #534]	; 0x216
 8003e0c:	4418      	add	r0, r3
		val = data -  10 + 0x61;
 8003e0e:	b2c9      	uxtb	r1, r1
	i2c->i2c_buffer[i2c->i2c_buffer_idx++] = val;
 8003e10:	7581      	strb	r1, [r0, #22]
 8003e12:	4770      	bx	lr
	} else if (data >= 'a' && data <= 'f') {
 8003e14:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8003e18:	2b05      	cmp	r3, #5
		val = data -  10 + 0x41;
 8003e1a:	bf94      	ite	ls
 8003e1c:	3137      	addls	r1, #55	; 0x37
		val = data -  10 + 0x61;
 8003e1e:	3157      	addhi	r1, #87	; 0x57
 8003e20:	e7ef      	b.n	8003e02 <s_hex2ascii+0x6>

08003e22 <i2c_interrupt_monitor>:
 * i2c monitor callback:
 *    monitor sda and scl when interrupt occurs.
 *    sda - interrupt occurs on both edge
 *    scl - interrupt occurs on rising edge.
 */
static void i2c_interrupt_monitor(struct i2c_monitor_t *i2c, uint16_t GPIO_Pin){
 8003e22:	b570      	push	{r4, r5, r6, lr}
 8003e24:	460d      	mov	r5, r1

	if ((i2c->sda_pin == GPIO_Pin) || (i2c->scl_pin == GPIO_Pin) ) {
 8003e26:	8a81      	ldrh	r1, [r0, #20]
 8003e28:	42a9      	cmp	r1, r5
static void i2c_interrupt_monitor(struct i2c_monitor_t *i2c, uint16_t GPIO_Pin){
 8003e2a:	4604      	mov	r4, r0
	if ((i2c->sda_pin == GPIO_Pin) || (i2c->scl_pin == GPIO_Pin) ) {
 8003e2c:	d003      	beq.n	8003e36 <i2c_interrupt_monitor+0x14>
 8003e2e:	8983      	ldrh	r3, [r0, #12]
 8003e30:	42ab      	cmp	r3, r5
 8003e32:	f040 80a0 	bne.w	8003f76 <i2c_interrupt_monitor+0x154>
		switch(i2c->i2c_state) {
 8003e36:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8003e3a:	b38b      	cbz	r3, 8003ea0 <i2c_interrupt_monitor+0x7e>
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	f200 809a 	bhi.w	8003f76 <i2c_interrupt_monitor+0x154>
				break;
			case I2C_STATUS_START:
			case I2C_STATUS_RESTART:
			case I2C_STATUS_DATA:
				// if scl rising edge detect then log the data.
				if(GPIO_Pin==i2c->scl_pin)	{
 8003e42:	89a3      	ldrh	r3, [r4, #12]
 8003e44:	42ab      	cmp	r3, r5
 8003e46:	d159      	bne.n	8003efc <i2c_interrupt_monitor+0xda>
					if(i2c->i2c_bit_count >= 8) {
 8003e48:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
 8003e4c:	2b07      	cmp	r3, #7
 8003e4e:	d942      	bls.n	8003ed6 <i2c_interrupt_monitor+0xb4>
						i2c->i2c_data_bit |= IsSdaLo(i2c) ? 0x100 : 0;
 8003e50:	6920      	ldr	r0, [r4, #16]
 8003e52:	f7fc fcb9 	bl	80007c8 <HAL_GPIO_ReadPin>
 8003e56:	f8b4 321e 	ldrh.w	r3, [r4, #542]	; 0x21e
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	bf0c      	ite	eq
 8003e5e:	f44f 7580 	moveq.w	r5, #256	; 0x100
 8003e62:	2500      	movne	r5, #0
 8003e64:	431d      	orrs	r5, r3
 8003e66:	b22d      	sxth	r5, r5
 8003e68:	b2ae      	uxth	r6, r5
	s_hex2ascii(i2c, (data  >> 4) & 0xf);
 8003e6a:	f3c6 1103 	ubfx	r1, r6, #4, #4
 8003e6e:	4620      	mov	r0, r4
						i2c->i2c_data_bit |= IsSdaLo(i2c) ? 0x100 : 0;
 8003e70:	f8a4 621e 	strh.w	r6, [r4, #542]	; 0x21e
	s_hex2ascii(i2c, (data  >> 4) & 0xf);
 8003e74:	f7ff ffc2 	bl	8003dfc <s_hex2ascii>
	s_hex2ascii(i2c, (data >>  0) & 0xf);
 8003e78:	f005 010f 	and.w	r1, r5, #15
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f7ff ffbd 	bl	8003dfc <s_hex2ascii>
	s_hex2ascii(i2c, (data >>  12) & 0xf);
 8003e82:	0b31      	lsrs	r1, r6, #12
 8003e84:	4620      	mov	r0, r4
 8003e86:	f7ff ffb9 	bl	8003dfc <s_hex2ascii>
	s_hex2ascii(i2c, (data >>  8) & 0xf);
 8003e8a:	f3c6 2103 	ubfx	r1, r6, #8, #4
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f7ff ffb4 	bl	8003dfc <s_hex2ascii>
						s_add_i2c_data(i2c, i2c->i2c_data_bit);
						i2c->i2c_bit_count = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	f884 321d 	strb.w	r3, [r4, #541]	; 0x21d
						i2c->i2c_data_bit = 0;
 8003e9a:	f8a4 321e 	strh.w	r3, [r4, #542]	; 0x21e
 8003e9e:	bd70      	pop	{r4, r5, r6, pc}
				if(GPIO_Pin==i2c->sda_pin && IsSdaLo(i2c) && IsSclHi(i2c)) {
 8003ea0:	42a9      	cmp	r1, r5
 8003ea2:	d168      	bne.n	8003f76 <i2c_interrupt_monitor+0x154>
 8003ea4:	6920      	ldr	r0, [r4, #16]
 8003ea6:	f7fc fc8f 	bl	80007c8 <HAL_GPIO_ReadPin>
 8003eaa:	4605      	mov	r5, r0
 8003eac:	2800      	cmp	r0, #0
 8003eae:	d162      	bne.n	8003f76 <i2c_interrupt_monitor+0x154>
 8003eb0:	89a1      	ldrh	r1, [r4, #12]
 8003eb2:	68a0      	ldr	r0, [r4, #8]
 8003eb4:	f7fc fc88 	bl	80007c8 <HAL_GPIO_ReadPin>
 8003eb8:	2801      	cmp	r0, #1
 8003eba:	d15c      	bne.n	8003f76 <i2c_interrupt_monitor+0x154>
	i2c->i2c_buffer[i2c->i2c_buffer_idx++] = '[';
 8003ebc:	235b      	movs	r3, #91	; 0x5b
					i2c->i2c_state = I2C_STATUS_START;
 8003ebe:	f884 021c 	strb.w	r0, [r4, #540]	; 0x21c
					i2c->i2c_bit_count = 0;
 8003ec2:	f884 521d 	strb.w	r5, [r4, #541]	; 0x21d
	i2c->i2c_buffer[i2c->i2c_buffer_idx++] = '[';
 8003ec6:	75a3      	strb	r3, [r4, #22]
					i2c->i2c_data_bit = 0;
 8003ec8:	f8a4 521e 	strh.w	r5, [r4, #542]	; 0x21e
					i2c->i2c_done = true;
 8003ecc:	f884 0224 	strb.w	r0, [r4, #548]	; 0x224
	i2c->i2c_buffer[i2c->i2c_buffer_idx++] = '[';
 8003ed0:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
 8003ed4:	bd70      	pop	{r4, r5, r6, pc}
					}
					else {
						i2c->i2c_data_bit = (i2c->i2c_data_bit << 1) + (IsSdaHi(i2c) ? 1 : 0);
 8003ed6:	f8b4 521e 	ldrh.w	r5, [r4, #542]	; 0x21e
 8003eda:	6920      	ldr	r0, [r4, #16]
 8003edc:	f7fc fc74 	bl	80007c8 <HAL_GPIO_ReadPin>
						i2c->i2c_bit_count++;
 8003ee0:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
						i2c->i2c_data_bit = (i2c->i2c_data_bit << 1) + (IsSdaHi(i2c) ? 1 : 0);
 8003ee4:	006d      	lsls	r5, r5, #1
 8003ee6:	b2ad      	uxth	r5, r5
						i2c->i2c_bit_count++;
 8003ee8:	3301      	adds	r3, #1
						i2c->i2c_data_bit = (i2c->i2c_data_bit << 1) + (IsSdaHi(i2c) ? 1 : 0);
 8003eea:	2801      	cmp	r0, #1
 8003eec:	bf14      	ite	ne
 8003eee:	4628      	movne	r0, r5
 8003ef0:	1c68      	addeq	r0, r5, #1
						i2c->i2c_bit_count++;
 8003ef2:	f884 321d 	strb.w	r3, [r4, #541]	; 0x21d
						i2c->i2c_data_bit = (i2c->i2c_data_bit << 1) + (IsSdaHi(i2c) ? 1 : 0);
 8003ef6:	f8a4 021e 	strh.w	r0, [r4, #542]	; 0x21e
 8003efa:	bd70      	pop	{r4, r5, r6, pc}
					}
				}
				// if sda is 0 and scl is 1 //then restarted condition detected
				else if(GPIO_Pin == i2c->sda_pin && IsSdaLo(i2c) && IsSclHi(i2c))  {
 8003efc:	42a9      	cmp	r1, r5
 8003efe:	d112      	bne.n	8003f26 <i2c_interrupt_monitor+0x104>
 8003f00:	6920      	ldr	r0, [r4, #16]
 8003f02:	f7fc fc61 	bl	80007c8 <HAL_GPIO_ReadPin>
 8003f06:	4606      	mov	r6, r0
 8003f08:	b968      	cbnz	r0, 8003f26 <i2c_interrupt_monitor+0x104>
 8003f0a:	89a1      	ldrh	r1, [r4, #12]
 8003f0c:	68a0      	ldr	r0, [r4, #8]
 8003f0e:	f7fc fc5b 	bl	80007c8 <HAL_GPIO_ReadPin>
 8003f12:	2801      	cmp	r0, #1
 8003f14:	d107      	bne.n	8003f26 <i2c_interrupt_monitor+0x104>
					i2c->i2c_state = I2C_STATUS_RESTART;
 8003f16:	2303      	movs	r3, #3
 8003f18:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
					i2c->i2c_bit_count 	= 0;
 8003f1c:	f884 621d 	strb.w	r6, [r4, #541]	; 0x21d
					i2c->i2c_data_bit 	= 0;
 8003f20:	f8a4 621e 	strh.w	r6, [r4, #542]	; 0x21e
 8003f24:	bd70      	pop	{r4, r5, r6, pc}
				}
				// if sda is hi and scl is lo then stopped condition detected
				else if((GPIO_Pin == i2c->sda_pin) && IsSclHi(i2c) && IsSdaHi(i2c))	{
 8003f26:	8aa3      	ldrh	r3, [r4, #20]
 8003f28:	42ab      	cmp	r3, r5
 8003f2a:	d124      	bne.n	8003f76 <i2c_interrupt_monitor+0x154>
 8003f2c:	89a1      	ldrh	r1, [r4, #12]
 8003f2e:	68a0      	ldr	r0, [r4, #8]
 8003f30:	f7fc fc4a 	bl	80007c8 <HAL_GPIO_ReadPin>
 8003f34:	2801      	cmp	r0, #1
 8003f36:	d11e      	bne.n	8003f76 <i2c_interrupt_monitor+0x154>
 8003f38:	8aa1      	ldrh	r1, [r4, #20]
 8003f3a:	6920      	ldr	r0, [r4, #16]
 8003f3c:	f7fc fc44 	bl	80007c8 <HAL_GPIO_ReadPin>
 8003f40:	2801      	cmp	r0, #1
 8003f42:	d118      	bne.n	8003f76 <i2c_interrupt_monitor+0x154>
	i2c->i2c_buffer[i2c->i2c_buffer_idx++] = ']';
 8003f44:	f8b4 3216 	ldrh.w	r3, [r4, #534]	; 0x216
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	4423      	add	r3, r4
 8003f4c:	f8a4 2216 	strh.w	r2, [r4, #534]	; 0x216
 8003f50:	225d      	movs	r2, #93	; 0x5d
 8003f52:	759a      	strb	r2, [r3, #22]
					//get the time stamp
					//get_timestamp(i2c);
					s_add_i2c_end_header(i2c);
					//let the main application know that i2c data is available
					//to process.
					if (i2c->i2c_app_cb) {
 8003f54:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8003f58:	b123      	cbz	r3, 8003f64 <i2c_interrupt_monitor+0x142>
						i2c->i2c_app_cb(i2c->i2c_buffer, &i2c->i2c_buffer_idx);
 8003f5a:	f204 2116 	addw	r1, r4, #534	; 0x216
 8003f5e:	f104 0016 	add.w	r0, r4, #22
 8003f62:	4798      	blx	r3
					}
					//reset all the variables
					i2c->i2c_bit_count	= 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	f884 321d 	strb.w	r3, [r4, #541]	; 0x21d
					i2c->i2c_buffer_idx = 0;
 8003f6a:	f8a4 3216 	strh.w	r3, [r4, #534]	; 0x216
					i2c->i2c_done		= false;
 8003f6e:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
					i2c->i2c_state = I2C_STATUS_IDLE;
 8003f72:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
 8003f76:	bd70      	pop	{r4, r5, r6, pc}

08003f78 <i2c_mon_create>:
}

/* create an instance of i2c */
void i2c_mon_create(struct i2c_monitor_t *i2c, i2c_app_callback callback) {

	i2c->sda_pin_set 			= i2c_mon_sda;
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <i2c_mon_create+0x2c>)
 8003f7a:	6003      	str	r3, [r0, #0]
	i2c->scl_pin_set 			= i2c_mon_scl;
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <i2c_mon_create+0x30>)
 8003f7e:	6043      	str	r3, [r0, #4]
	i2c->i2c_int_cb				= i2c_interrupt_monitor;
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <i2c_mon_create+0x34>)
 8003f82:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
	i2c->i2c_app_cb				= callback;
	i2c->i2c_buffer_idx			= 0;
 8003f86:	2300      	movs	r3, #0
	i2c->i2c_app_cb				= callback;
 8003f88:	f8c0 1220 	str.w	r1, [r0, #544]	; 0x220
	i2c->i2c_buffer_idx			= 0;
 8003f8c:	f8a0 3216 	strh.w	r3, [r0, #534]	; 0x216

	i2c->i2c_state				= I2C_STATUS_IDLE;
 8003f90:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
	i2c->i2c_bit_count			= 0;
 8003f94:	f880 321d 	strb.w	r3, [r0, #541]	; 0x21d
	i2c->i2c_data_bit			= 0;
 8003f98:	f8a0 321e 	strh.w	r3, [r0, #542]	; 0x21e
	i2c->i2c_done				= false;
 8003f9c:	f880 3224 	strb.w	r3, [r0, #548]	; 0x224
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	08003df1 	.word	0x08003df1
 8003fa8:	08003df7 	.word	0x08003df7
 8003fac:	08003e23 	.word	0x08003e23

08003fb0 <vI2cTask>:
}

/*
 * this task receives i2c data and transmit to serial port
 */
static void vI2cTask(void *pagr) {
 8003fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct i2c_dat_t i2c_dat;
	portBASE_TYPE taskWoken;
	while (1) {

		//wait until data in the queue
		if (xQueueReceiveFromISR(xQueue, (void *)&i2c_dat,  &taskWoken) == pdTRUE) {
 8003fb2:	4c08      	ldr	r4, [pc, #32]	; (8003fd4 <vI2cTask+0x24>)
 8003fb4:	6820      	ldr	r0, [r4, #0]
 8003fb6:	aa01      	add	r2, sp, #4
 8003fb8:	a902      	add	r1, sp, #8
 8003fba:	f7ff fabf 	bl	800353c <xQueueReceiveFromISR>
 8003fbe:	2801      	cmp	r0, #1
 8003fc0:	d1f8      	bne.n	8003fb4 <vI2cTask+0x4>
			//point to i2c data
			uint8_t *pdata = (uint8_t *)i2c_dat.pvData;
			CDC_Transmit_FS(pdata, i2c_dat.len);
 8003fc2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8003fc6:	9803      	ldr	r0, [sp, #12]
 8003fc8:	f000 fa3e 	bl	8004448 <CDC_Transmit_FS>
			//free the pointer, was created from i2c callback.
			free(i2c_dat.pvData);
 8003fcc:	9803      	ldr	r0, [sp, #12]
 8003fce:	f000 fc81 	bl	80048d4 <free>
 8003fd2:	e7ef      	b.n	8003fb4 <vI2cTask+0x4>
 8003fd4:	200047d4 	.word	0x200047d4

08003fd8 <i2c_callback>:
static void i2c_callback(uint8_t *pbuf, uint16_t *plen) {
 8003fd8:	b530      	push	{r4, r5, lr}
	pdata = (uint8_t *)calloc(sizeof(uint8_t) * *plen, 0);
 8003fda:	880c      	ldrh	r4, [r1, #0]
static void i2c_callback(uint8_t *pbuf, uint16_t *plen) {
 8003fdc:	b085      	sub	sp, #20
 8003fde:	4605      	mov	r5, r0
	pdata = (uint8_t *)calloc(sizeof(uint8_t) * *plen, 0);
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f000 fc3c 	bl	8004860 <calloc>
	memcpy(pdata, pbuf, *plen);
 8003fe8:	4622      	mov	r2, r4
 8003fea:	4629      	mov	r1, r5
 8003fec:	f000 fc7a 	bl	80048e4 <memcpy>
	i2c_dat.pvData = (void *)pdata;
 8003ff0:	9003      	str	r0, [sp, #12]
	xQueueSendFromISR(xQueue, (void *)&i2c_dat, &taskWoken);
 8003ff2:	4805      	ldr	r0, [pc, #20]	; (8004008 <i2c_callback+0x30>)
	i2c_dat.len = *plen;
 8003ff4:	f8ad 4008 	strh.w	r4, [sp, #8]
	xQueueSendFromISR(xQueue, (void *)&i2c_dat, &taskWoken);
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	aa01      	add	r2, sp, #4
 8003ffc:	a902      	add	r1, sp, #8
 8003ffe:	6800      	ldr	r0, [r0, #0]
 8004000:	f7ff fa3a 	bl	8003478 <xQueueGenericSendFromISR>
}
 8004004:	b005      	add	sp, #20
 8004006:	bd30      	pop	{r4, r5, pc}
 8004008:	200047d4 	.word	0x200047d4

0800400c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800400c:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800400e:	f000 f9cd 	bl	80043ac <MX_USB_DEVICE_Init>
  //osDelay(5000);
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8004012:	4c05      	ldr	r4, [pc, #20]	; (8004028 <StartDefaultTask+0x1c>)
    osDelay(200);
 8004014:	20c8      	movs	r0, #200	; 0xc8
 8004016:	f7fe fe96 	bl	8002d46 <osDelay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800401a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800401e:	4620      	mov	r0, r4
 8004020:	f7fc fbdd 	bl	80007de <HAL_GPIO_TogglePin>
 8004024:	e7f6      	b.n	8004014 <StartDefaultTask+0x8>
 8004026:	bf00      	nop
 8004028:	40020c00 	.word	0x40020c00

0800402c <HAL_GPIO_EXTI_Callback>:
	  i2c_mon.i2c_int_cb(&i2c_mon, GPIO_Pin);
 800402c:	4b02      	ldr	r3, [pc, #8]	; (8004038 <HAL_GPIO_EXTI_Callback+0xc>)
 800402e:	4601      	mov	r1, r0
 8004030:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8004034:	4618      	mov	r0, r3
 8004036:	4710      	bx	r2
 8004038:	20004198 	.word	0x20004198

0800403c <SystemClock_Config>:
{
 800403c:	b530      	push	{r4, r5, lr}
 800403e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004040:	2230      	movs	r2, #48	; 0x30
 8004042:	2100      	movs	r1, #0
 8004044:	a808      	add	r0, sp, #32
 8004046:	f000 fc58 	bl	80048fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800404a:	2100      	movs	r1, #0
 800404c:	2214      	movs	r2, #20
 800404e:	a803      	add	r0, sp, #12
 8004050:	f000 fc53 	bl	80048fa <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8004054:	2400      	movs	r4, #0
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <SystemClock_Config+0x90>)
 8004058:	9401      	str	r4, [sp, #4]
 800405a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800405c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004060:	641a      	str	r2, [r3, #64]	; 0x40
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800406c:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <SystemClock_Config+0x94>)
 800406e:	9402      	str	r4, [sp, #8]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800407e:	9302      	str	r3, [sp, #8]
 8004080:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004082:	2301      	movs	r3, #1
 8004084:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800408a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800408c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004090:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004092:	2308      	movs	r3, #8
 8004094:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004096:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800409a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 800409c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800409e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80040a0:	2307      	movs	r3, #7
 80040a2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040a4:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040a6:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040a8:	f7fd f85e 	bl	8001168 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040ac:	230f      	movs	r3, #15
 80040ae:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80040b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80040b4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80040b6:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80040b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80040bc:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040be:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040c0:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80040c2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80040c4:	f7fd fa00 	bl	80014c8 <HAL_RCC_ClockConfig>
}
 80040c8:	b015      	add	sp, #84	; 0x54
 80040ca:	bd30      	pop	{r4, r5, pc}
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40007000 	.word	0x40007000

080040d4 <main>:
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 80040d8:	f7fc fa02 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 80040dc:	f7ff ffae 	bl	800403c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e0:	2214      	movs	r2, #20
 80040e2:	2100      	movs	r1, #0
 80040e4:	eb0d 0002 	add.w	r0, sp, r2
 80040e8:	f000 fc07 	bl	80048fa <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040ec:	2400      	movs	r4, #0
 80040ee:	4b3f      	ldr	r3, [pc, #252]	; (80041ec <main+0x118>)
 80040f0:	9402      	str	r4, [sp, #8]
 80040f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80040f4:	483e      	ldr	r0, [pc, #248]	; (80041f0 <main+0x11c>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80040f6:	4e3f      	ldr	r6, [pc, #252]	; (80041f4 <main+0x120>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
 80040fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004100:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004104:	9202      	str	r2, [sp, #8]
 8004106:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004108:	9403      	str	r4, [sp, #12]
 800410a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410c:	f042 0208 	orr.w	r2, r2, #8
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
 8004112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004114:	f002 0208 	and.w	r2, r2, #8
 8004118:	9203      	str	r2, [sp, #12]
 800411a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800411c:	9404      	str	r4, [sp, #16]
 800411e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800412c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800412e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8004130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004134:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004136:	f44f 6980 	mov.w	r9, #1024	; 0x400
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800413a:	f7fc fb4b 	bl	80007d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800413e:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <main+0x124>)
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004140:	482b      	ldr	r0, [pc, #172]	; (80041f0 <main+0x11c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004142:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004144:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004146:	f44f 6800 	mov.w	r8, #2048	; 0x800
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800414a:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004150:	f7fc fa5a 	bl	8000608 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004154:	4b29      	ldr	r3, [pc, #164]	; (80041fc <main+0x128>)
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004156:	4826      	ldr	r0, [pc, #152]	; (80041f0 <main+0x11c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004158:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800415a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800415c:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800415e:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004162:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004164:	f7fc fa50 	bl	8000608 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800416c:	a905      	add	r1, sp, #20
 800416e:	4820      	ldr	r0, [pc, #128]	; (80041f0 <main+0x11c>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004170:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004172:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004176:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004178:	f7fc fa46 	bl	8000608 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800417c:	4622      	mov	r2, r4
 800417e:	2105      	movs	r1, #5
 8004180:	2028      	movs	r0, #40	; 0x28
 8004182:	f7fc f9ff 	bl	8000584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004186:	2028      	movs	r0, #40	; 0x28
 8004188:	f7fc fa30 	bl	80005ec <HAL_NVIC_EnableIRQ>
  xQueue = xQueueCreate(NUM_OF_I2C_BUFFER, sizeof(struct i2c_dat_t));
 800418c:	4622      	mov	r2, r4
 800418e:	2108      	movs	r1, #8
 8004190:	2005      	movs	r0, #5
 8004192:	f7ff f94d 	bl	8003430 <xQueueGenericCreate>
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <main+0x12c>)
 8004198:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800419a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800419c:	ad05      	add	r5, sp, #20
 800419e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041a0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80041a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80041a8:	4621      	mov	r1, r4
 80041aa:	a805      	add	r0, sp, #20
 80041ac:	f7fe fda3 	bl	8002cf6 <osThreadCreate>
  i2c_mon_create(&i2c_mon, i2c_callback);
 80041b0:	4d14      	ldr	r5, [pc, #80]	; (8004204 <main+0x130>)
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80041b2:	4b15      	ldr	r3, [pc, #84]	; (8004208 <main+0x134>)
  i2c_mon_create(&i2c_mon, i2c_callback);
 80041b4:	4915      	ldr	r1, [pc, #84]	; (800420c <main+0x138>)
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80041b6:	6018      	str	r0, [r3, #0]
  i2c_mon_create(&i2c_mon, i2c_callback);
 80041b8:	4628      	mov	r0, r5
 80041ba:	f7ff fedd 	bl	8003f78 <i2c_mon_create>
  i2c_mon.sda_pin_set(&i2c_mon, GPIOD, GPIO_PIN_10);
 80041be:	682b      	ldr	r3, [r5, #0]
 80041c0:	490b      	ldr	r1, [pc, #44]	; (80041f0 <main+0x11c>)
 80041c2:	464a      	mov	r2, r9
 80041c4:	4628      	mov	r0, r5
 80041c6:	4798      	blx	r3
  i2c_mon.scl_pin_set(&i2c_mon, GPIOD, GPIO_PIN_11);
 80041c8:	686b      	ldr	r3, [r5, #4]
 80041ca:	4909      	ldr	r1, [pc, #36]	; (80041f0 <main+0x11c>)
 80041cc:	4642      	mov	r2, r8
 80041ce:	4628      	mov	r0, r5
 80041d0:	4798      	blx	r3
  xTaskCreate(vI2cTask, "i2c task", 5*128, 0, 1, 0);
 80041d2:	4623      	mov	r3, r4
 80041d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80041d8:	490d      	ldr	r1, [pc, #52]	; (8004210 <main+0x13c>)
 80041da:	9401      	str	r4, [sp, #4]
 80041dc:	9700      	str	r7, [sp, #0]
 80041de:	480d      	ldr	r0, [pc, #52]	; (8004214 <main+0x140>)
 80041e0:	f7ff fb95 	bl	800390e <xTaskCreate>
  osKernelStart();
 80041e4:	f7fe fd82 	bl	8002cec <osKernelStart>
 80041e8:	e7fe      	b.n	80041e8 <main+0x114>
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40020c00 	.word	0x40020c00
 80041f4:	08004abc 	.word	0x08004abc
 80041f8:	10310000 	.word	0x10310000
 80041fc:	10110000 	.word	0x10110000
 8004200:	200047d4 	.word	0x200047d4
 8004204:	20004198 	.word	0x20004198
 8004208:	200043d0 	.word	0x200043d0
 800420c:	08003fd9 	.word	0x08003fd9
 8004210:	08004add 	.word	0x08004add
 8004214:	08003fb1 	.word	0x08003fb1

08004218 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004218:	6802      	ldr	r2, [r0, #0]
 800421a:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800421c:	429a      	cmp	r2, r3
 800421e:	d101      	bne.n	8004224 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004220:	f7fc b978 	b.w	8000514 <HAL_IncTick>
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40001000 	.word	0x40001000

0800422c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800422c:	4770      	bx	lr
	...

08004230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004230:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004232:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <HAL_MspInit+0x40>)
 8004234:	2200      	movs	r2, #0
 8004236:	9200      	str	r2, [sp, #0]
 8004238:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800423a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800423e:	6459      	str	r1, [r3, #68]	; 0x44
 8004240:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004242:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8004246:	9100      	str	r1, [sp, #0]
 8004248:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	9201      	str	r2, [sp, #4]
 800424c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800424e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004252:	6419      	str	r1, [r3, #64]	; 0x40
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800425c:	210f      	movs	r1, #15
 800425e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004262:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004264:	f7fc f98e 	bl	8000584 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004268:	b003      	add	sp, #12
 800426a:	f85d fb04 	ldr.w	pc, [sp], #4
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800

08004274 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004274:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8004276:	4601      	mov	r1, r0
{
 8004278:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800427a:	2200      	movs	r2, #0
 800427c:	2036      	movs	r0, #54	; 0x36
 800427e:	f7fc f981 	bl	8000584 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8004282:	2036      	movs	r0, #54	; 0x36
 8004284:	f7fc f9b2 	bl	80005ec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004288:	2500      	movs	r5, #0
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <HAL_InitTick+0x6c>)
 800428c:	9502      	str	r5, [sp, #8]
 800428e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004290:	4c14      	ldr	r4, [pc, #80]	; (80042e4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004292:	f042 0210 	orr.w	r2, r2, #16
 8004296:	641a      	str	r2, [r3, #64]	; 0x40
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80042a0:	a901      	add	r1, sp, #4
 80042a2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80042a4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80042a6:	f7fd f9bf 	bl	8001628 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80042aa:	f7fd f9ad 	bl	8001608 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <HAL_InitTick+0x74>)
 80042b0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80042b2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80042b6:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80042b8:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <HAL_InitTick+0x78>)
 80042bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80042c0:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80042c2:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80042c4:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80042c6:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042c8:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80042ca:	f7fd fae9 	bl	80018a0 <HAL_TIM_Base_Init>
 80042ce:	b920      	cbnz	r0, 80042da <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80042d0:	4620      	mov	r0, r4
 80042d2:	f7fd f9c8 	bl	8001666 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80042d6:	b009      	add	sp, #36	; 0x24
 80042d8:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80042da:	2001      	movs	r0, #1
 80042dc:	e7fb      	b.n	80042d6 <HAL_InitTick+0x62>
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800
 80042e4:	20004bd8 	.word	0x20004bd8
 80042e8:	40001000 	.word	0x40001000
 80042ec:	000f4240 	.word	0x000f4240

080042f0 <NMI_Handler>:
 80042f0:	4770      	bx	lr

080042f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042f2:	e7fe      	b.n	80042f2 <HardFault_Handler>

080042f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042f4:	e7fe      	b.n	80042f4 <MemManage_Handler>

080042f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042f6:	e7fe      	b.n	80042f6 <BusFault_Handler>

080042f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042f8:	e7fe      	b.n	80042f8 <UsageFault_Handler>

080042fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042fa:	4770      	bx	lr

080042fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80042fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80042fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004302:	f7fc fa73 	bl	80007ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004306:	f44f 6000 	mov.w	r0, #2048	; 0x800
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800430a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800430e:	f7fc ba6d 	b.w	80007ec <HAL_GPIO_EXTI_IRQHandler>
	...

08004314 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004314:	4801      	ldr	r0, [pc, #4]	; (800431c <TIM6_DAC_IRQHandler+0x8>)
 8004316:	f7fd b9ba 	b.w	800168e <HAL_TIM_IRQHandler>
 800431a:	bf00      	nop
 800431c:	20004bd8 	.word	0x20004bd8

08004320 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004320:	4801      	ldr	r0, [pc, #4]	; (8004328 <OTG_FS_IRQHandler+0x8>)
 8004322:	f7fc bb15 	b.w	8000950 <HAL_PCD_IRQHandler>
 8004326:	bf00      	nop
 8004328:	20005eb4 	.word	0x20005eb4

0800432c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800432c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800432e:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <_sbrk+0x2c>)
 8004330:	6819      	ldr	r1, [r3, #0]
{
 8004332:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004334:	b909      	cbnz	r1, 800433a <_sbrk+0xe>
		heap_end = &end;
 8004336:	4909      	ldr	r1, [pc, #36]	; (800435c <_sbrk+0x30>)
 8004338:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800433a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800433c:	4669      	mov	r1, sp
 800433e:	4402      	add	r2, r0
 8004340:	428a      	cmp	r2, r1
 8004342:	d906      	bls.n	8004352 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004344:	f000 fa94 	bl	8004870 <__errno>
 8004348:	230c      	movs	r3, #12
 800434a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800434c:	f04f 30ff 	mov.w	r0, #4294967295
 8004350:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004352:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004354:	bd08      	pop	{r3, pc}
 8004356:	bf00      	nop
 8004358:	200043c0 	.word	0x200043c0
 800435c:	200064c0 	.word	0x200064c0

08004360 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004360:	490f      	ldr	r1, [pc, #60]	; (80043a0 <SystemInit+0x40>)
 8004362:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004366:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800436e:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <SystemInit+0x44>)
 8004370:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004372:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800437a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004382:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004386:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004388:	4a07      	ldr	r2, [pc, #28]	; (80043a8 <SystemInit+0x48>)
 800438a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004392:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004394:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004396:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800439a:	608b      	str	r3, [r1, #8]
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	e000ed00 	.word	0xe000ed00
 80043a4:	40023800 	.word	0x40023800
 80043a8:	24003010 	.word	0x24003010

080043ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80043ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80043ae:	2200      	movs	r2, #0
 80043b0:	490e      	ldr	r1, [pc, #56]	; (80043ec <MX_USB_DEVICE_Init+0x40>)
 80043b2:	480f      	ldr	r0, [pc, #60]	; (80043f0 <MX_USB_DEVICE_Init+0x44>)
 80043b4:	f7fe f8ff 	bl	80025b6 <USBD_Init>
 80043b8:	b108      	cbz	r0, 80043be <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80043ba:	f7ff ff37 	bl	800422c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80043be:	490d      	ldr	r1, [pc, #52]	; (80043f4 <MX_USB_DEVICE_Init+0x48>)
 80043c0:	480b      	ldr	r0, [pc, #44]	; (80043f0 <MX_USB_DEVICE_Init+0x44>)
 80043c2:	f7fe f90d 	bl	80025e0 <USBD_RegisterClass>
 80043c6:	b108      	cbz	r0, 80043cc <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80043c8:	f7ff ff30 	bl	800422c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80043cc:	490a      	ldr	r1, [pc, #40]	; (80043f8 <MX_USB_DEVICE_Init+0x4c>)
 80043ce:	4808      	ldr	r0, [pc, #32]	; (80043f0 <MX_USB_DEVICE_Init+0x44>)
 80043d0:	f7fe f8b0 	bl	8002534 <USBD_CDC_RegisterInterface>
 80043d4:	b108      	cbz	r0, 80043da <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80043d6:	f7ff ff29 	bl	800422c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80043da:	4805      	ldr	r0, [pc, #20]	; (80043f0 <MX_USB_DEVICE_Init+0x44>)
 80043dc:	f7fe f907 	bl	80025ee <USBD_Start>
 80043e0:	b118      	cbz	r0, 80043ea <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80043e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80043e6:	f7ff bf21 	b.w	800422c <Error_Handler>
 80043ea:	bd08      	pop	{r3, pc}
 80043ec:	2000012c 	.word	0x2000012c
 80043f0:	20004c18 	.word	0x20004c18
 80043f4:	20000004 	.word	0x20000004
 80043f8:	2000011c 	.word	0x2000011c

080043fc <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80043fc:	2000      	movs	r0, #0
 80043fe:	4770      	bx	lr

08004400 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004400:	2000      	movs	r0, #0
 8004402:	4770      	bx	lr

08004404 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004404:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004406:	4c05      	ldr	r4, [pc, #20]	; (800441c <CDC_Receive_FS+0x18>)
 8004408:	4601      	mov	r1, r0
 800440a:	4620      	mov	r0, r4
 800440c:	f7fe f8a1 	bl	8002552 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004410:	4620      	mov	r0, r4
 8004412:	f7fe f8bd 	bl	8002590 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004416:	2000      	movs	r0, #0
 8004418:	bd10      	pop	{r4, pc}
 800441a:	bf00      	nop
 800441c:	20004c18 	.word	0x20004c18

08004420 <CDC_Init_FS>:
{
 8004420:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004422:	4c06      	ldr	r4, [pc, #24]	; (800443c <CDC_Init_FS+0x1c>)
 8004424:	4906      	ldr	r1, [pc, #24]	; (8004440 <CDC_Init_FS+0x20>)
 8004426:	2200      	movs	r2, #0
 8004428:	4620      	mov	r0, r4
 800442a:	f7fe f88a 	bl	8002542 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800442e:	4905      	ldr	r1, [pc, #20]	; (8004444 <CDC_Init_FS+0x24>)
 8004430:	4620      	mov	r0, r4
 8004432:	f7fe f88e 	bl	8002552 <USBD_CDC_SetRxBuffer>
}
 8004436:	2000      	movs	r0, #0
 8004438:	bd10      	pop	{r4, pc}
 800443a:	bf00      	nop
 800443c:	20004c18 	.word	0x20004c18
 8004440:	200056b4 	.word	0x200056b4
 8004444:	20004eb4 	.word	0x20004eb4

08004448 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004448:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800444a:	4c09      	ldr	r4, [pc, #36]	; (8004470 <CDC_Transmit_FS+0x28>)
 800444c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  if (hcdc->TxState != 0){
 8004450:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 8004454:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 8004456:	b943      	cbnz	r3, 800446a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004458:	4601      	mov	r1, r0
 800445a:	4620      	mov	r0, r4
 800445c:	f7fe f871 	bl	8002542 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004460:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8004462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004466:	f7fe b87a 	b.w	800255e <USBD_CDC_TransmitPacket>
}
 800446a:	2001      	movs	r0, #1
 800446c:	bd10      	pop	{r4, pc}
 800446e:	bf00      	nop
 8004470:	20004c18 	.word	0x20004c18

08004474 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004474:	b530      	push	{r4, r5, lr}
 8004476:	4604      	mov	r4, r0
 8004478:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800447a:	2214      	movs	r2, #20
 800447c:	2100      	movs	r1, #0
 800447e:	a803      	add	r0, sp, #12
 8004480:	f000 fa3b 	bl	80048fa <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800448a:	d12e      	bne.n	80044ea <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800448c:	4c18      	ldr	r4, [pc, #96]	; (80044f0 <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800448e:	4819      	ldr	r0, [pc, #100]	; (80044f4 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004490:	2500      	movs	r5, #0
 8004492:	9501      	str	r5, [sp, #4]
 8004494:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	6323      	str	r3, [r4, #48]	; 0x30
 800449c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80044a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80044aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ac:	2302      	movs	r3, #2
 80044ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b0:	2303      	movs	r3, #3
 80044b2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80044b6:	230a      	movs	r3, #10
 80044b8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ba:	f7fc f8a5 	bl	8000608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80044be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c4:	6363      	str	r3, [r4, #52]	; 0x34
 80044c6:	9502      	str	r5, [sp, #8]
 80044c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80044ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044ce:	6463      	str	r3, [r4, #68]	; 0x44
 80044d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80044d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d6:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80044d8:	2043      	movs	r0, #67	; 0x43
 80044da:	462a      	mov	r2, r5
 80044dc:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80044de:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80044e0:	f7fc f850 	bl	8000584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80044e4:	2043      	movs	r0, #67	; 0x43
 80044e6:	f7fc f881 	bl	80005ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80044ea:	b009      	add	sp, #36	; 0x24
 80044ec:	bd30      	pop	{r4, r5, pc}
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40020000 	.word	0x40020000

080044f8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80044f8:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80044fc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004500:	f7fe b88c 	b.w	800261c <USBD_LL_SetupStage>

08004504 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004504:	231c      	movs	r3, #28
 8004506:	fb03 0301 	mla	r3, r3, r1, r0
 800450a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800450e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004512:	f7fe b8b0 	b.w	8002676 <USBD_LL_DataOutStage>

08004516 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004516:	231c      	movs	r3, #28
 8004518:	fb03 0301 	mla	r3, r3, r1, r0
 800451c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004522:	f7fe b8e2 	b.w	80026ea <USBD_LL_DataInStage>

08004526 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004526:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800452a:	f7fe b973 	b.w	8002814 <USBD_LL_SOF>

0800452e <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800452e:	68c1      	ldr	r1, [r0, #12]
{ 
 8004530:	b510      	push	{r4, lr}
 8004532:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8004534:	b121      	cbz	r1, 8004540 <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8004536:	2902      	cmp	r1, #2
 8004538:	d001      	beq.n	800453e <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 800453a:	f7ff fe77 	bl	800422c <Error_Handler>
    speed = USBD_SPEED_FULL;
 800453e:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004540:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8004544:	f7fe f954 	bl	80027f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004548:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800454c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004550:	f7fe b927 	b.w	80027a2 <USBD_LL_Reset>

08004554 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004554:	b510      	push	{r4, lr}
 8004556:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004558:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800455c:	f7fe f94b 	bl	80027f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800456e:	6a23      	ldr	r3, [r4, #32]
 8004570:	b123      	cbz	r3, 800457c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004572:	4a03      	ldr	r2, [pc, #12]	; (8004580 <HAL_PCD_SuspendCallback+0x2c>)
 8004574:	6913      	ldr	r3, [r2, #16]
 8004576:	f043 0306 	orr.w	r3, r3, #6
 800457a:	6113      	str	r3, [r2, #16]
 800457c:	bd10      	pop	{r4, pc}
 800457e:	bf00      	nop
 8004580:	e000ed00 	.word	0xe000ed00

08004584 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004584:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004588:	f7fe b93e 	b.w	8002808 <USBD_LL_Resume>

0800458c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800458c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004590:	f7fe b94e 	b.w	8002830 <USBD_LL_IsoOUTIncomplete>

08004594 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004594:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004598:	f7fe b948 	b.w	800282c <USBD_LL_IsoINIncomplete>

0800459c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800459c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80045a0:	f7fe b948 	b.w	8002834 <USBD_LL_DevConnected>

080045a4 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80045a4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80045a8:	f7fe b946 	b.w	8002838 <USBD_LL_DevDisconnected>

080045ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80045ac:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80045ae:	7802      	ldrb	r2, [r0, #0]
 80045b0:	bb32      	cbnz	r2, 8004600 <USBD_LL_Init+0x54>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80045b2:	4b14      	ldr	r3, [pc, #80]	; (8004604 <USBD_LL_Init+0x58>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80045b4:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 80045b6:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80045ba:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80045be:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80045c2:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80045c6:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80045c8:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80045ca:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80045cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80045ce:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80045d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80045d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80045da:	f7fc f913 	bl	8000804 <HAL_PCD_Init>
 80045de:	b108      	cbz	r0, 80045e4 <USBD_LL_Init+0x38>
  {
    Error_Handler( );
 80045e0:	f7ff fe24 	bl	800422c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80045e4:	2180      	movs	r1, #128	; 0x80
 80045e6:	4807      	ldr	r0, [pc, #28]	; (8004604 <USBD_LL_Init+0x58>)
 80045e8:	f7fc fdb8 	bl	800115c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80045ec:	2240      	movs	r2, #64	; 0x40
 80045ee:	2100      	movs	r1, #0
 80045f0:	4804      	ldr	r0, [pc, #16]	; (8004604 <USBD_LL_Init+0x58>)
 80045f2:	f7fc fd92 	bl	800111a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80045f6:	2280      	movs	r2, #128	; 0x80
 80045f8:	2101      	movs	r1, #1
 80045fa:	4802      	ldr	r0, [pc, #8]	; (8004604 <USBD_LL_Init+0x58>)
 80045fc:	f7fc fd8d 	bl	800111a <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8004600:	2000      	movs	r0, #0
 8004602:	bd08      	pop	{r3, pc}
 8004604:	20005eb4 	.word	0x20005eb4

08004608 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004608:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800460a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800460e:	f7fc f980 	bl	8000912 <HAL_PCD_Start>
 8004612:	2803      	cmp	r0, #3
 8004614:	bf9a      	itte	ls
 8004616:	4b02      	ldrls	r3, [pc, #8]	; (8004620 <USBD_LL_Start+0x18>)
 8004618:	5c18      	ldrbls	r0, [r3, r0]
 800461a:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 800461c:	bd08      	pop	{r3, pc}
 800461e:	bf00      	nop
 8004620:	08004b0a 	.word	0x08004b0a

08004624 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004624:	b510      	push	{r4, lr}
 8004626:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004628:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800462c:	4613      	mov	r3, r2
 800462e:	4622      	mov	r2, r4
 8004630:	f7fc fc5c 	bl	8000eec <HAL_PCD_EP_Open>
 8004634:	2803      	cmp	r0, #3
 8004636:	bf9a      	itte	ls
 8004638:	4b01      	ldrls	r3, [pc, #4]	; (8004640 <USBD_LL_OpenEP+0x1c>)
 800463a:	5c18      	ldrbls	r0, [r3, r0]
 800463c:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800463e:	bd10      	pop	{r4, pc}
 8004640:	08004b0a 	.word	0x08004b0a

08004644 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004644:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004646:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800464a:	f7fc fc84 	bl	8000f56 <HAL_PCD_EP_Close>
 800464e:	2803      	cmp	r0, #3
 8004650:	bf9a      	itte	ls
 8004652:	4b02      	ldrls	r3, [pc, #8]	; (800465c <USBD_LL_CloseEP+0x18>)
 8004654:	5c18      	ldrbls	r0, [r3, r0]
 8004656:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 8004658:	bd08      	pop	{r3, pc}
 800465a:	bf00      	nop
 800465c:	08004b0a 	.word	0x08004b0a

08004660 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004660:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004662:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004666:	f7fc fcec 	bl	8001042 <HAL_PCD_EP_SetStall>
 800466a:	2803      	cmp	r0, #3
 800466c:	bf9a      	itte	ls
 800466e:	4b02      	ldrls	r3, [pc, #8]	; (8004678 <USBD_LL_StallEP+0x18>)
 8004670:	5c18      	ldrbls	r0, [r3, r0]
 8004672:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8004674:	bd08      	pop	{r3, pc}
 8004676:	bf00      	nop
 8004678:	08004b0a 	.word	0x08004b0a

0800467c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800467c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800467e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004682:	f7fc fd18 	bl	80010b6 <HAL_PCD_EP_ClrStall>
 8004686:	2803      	cmp	r0, #3
 8004688:	bf9a      	itte	ls
 800468a:	4b02      	ldrls	r3, [pc, #8]	; (8004694 <USBD_LL_ClearStallEP+0x18>)
 800468c:	5c18      	ldrbls	r0, [r3, r0]
 800468e:	2002      	movhi	r0, #2
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 8004690:	bd08      	pop	{r3, pc}
 8004692:	bf00      	nop
 8004694:	08004b0a 	.word	0x08004b0a

08004698 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004698:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800469c:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 80046a0:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80046a4:	bf1b      	ittet	ne
 80046a6:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80046aa:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80046ae:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80046b2:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80046b6:	bf08      	it	eq
 80046b8:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 80046bc:	4770      	bx	lr
	...

080046c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80046c0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80046c2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80046c6:	f7fc fbfd 	bl	8000ec4 <HAL_PCD_SetAddress>
 80046ca:	2803      	cmp	r0, #3
 80046cc:	bf9a      	itte	ls
 80046ce:	4b02      	ldrls	r3, [pc, #8]	; (80046d8 <USBD_LL_SetUSBAddress+0x18>)
 80046d0:	5c18      	ldrbls	r0, [r3, r0]
 80046d2:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 80046d4:	bd08      	pop	{r3, pc}
 80046d6:	bf00      	nop
 80046d8:	08004b0a 	.word	0x08004b0a

080046dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80046dc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80046de:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80046e2:	f7fc fc8e 	bl	8001002 <HAL_PCD_EP_Transmit>
 80046e6:	2803      	cmp	r0, #3
 80046e8:	bf9a      	itte	ls
 80046ea:	4b02      	ldrls	r3, [pc, #8]	; (80046f4 <USBD_LL_Transmit+0x18>)
 80046ec:	5c18      	ldrbls	r0, [r3, r0]
 80046ee:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 80046f0:	bd08      	pop	{r3, pc}
 80046f2:	bf00      	nop
 80046f4:	08004b0a 	.word	0x08004b0a

080046f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80046f8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80046fa:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80046fe:	f7fc fc54 	bl	8000faa <HAL_PCD_EP_Receive>
 8004702:	2803      	cmp	r0, #3
 8004704:	bf9a      	itte	ls
 8004706:	4b02      	ldrls	r3, [pc, #8]	; (8004710 <USBD_LL_PrepareReceive+0x18>)
 8004708:	5c18      	ldrbls	r0, [r3, r0]
 800470a:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 800470c:	bd08      	pop	{r3, pc}
 800470e:	bf00      	nop
 8004710:	08004b0a 	.word	0x08004b0a

08004714 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004714:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004718:	f7fc bc6b 	b.w	8000ff2 <HAL_PCD_EP_GetRxCount>

0800471c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800471c:	2312      	movs	r3, #18
 800471e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004720:	4800      	ldr	r0, [pc, #0]	; (8004724 <USBD_FS_DeviceDescriptor+0x8>)
 8004722:	4770      	bx	lr
 8004724:	20000148 	.word	0x20000148

08004728 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004728:	2304      	movs	r3, #4
 800472a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800472c:	4800      	ldr	r0, [pc, #0]	; (8004730 <USBD_FS_LangIDStrDescriptor+0x8>)
 800472e:	4770      	bx	lr
 8004730:	2000015c 	.word	0x2000015c

08004734 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004734:	2300      	movs	r3, #0
{
 8004736:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8004738:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 800473a:	b2dc      	uxtb	r4, r3
 800473c:	42a2      	cmp	r2, r4
 800473e:	d800      	bhi.n	8004742 <IntToUnicode+0xe>
  }
}
 8004740:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8004742:	0f04      	lsrs	r4, r0, #28
 8004744:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8004746:	bf94      	ite	ls
 8004748:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800474a:	3437      	addhi	r4, #55	; 0x37
 800474c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8004750:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8004754:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8004756:	7065      	strb	r5, [r4, #1]
 8004758:	3301      	adds	r3, #1
 800475a:	e7ee      	b.n	800473a <IntToUnicode+0x6>

0800475c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800475c:	231a      	movs	r3, #26
{
 800475e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004760:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <USBD_FS_SerialStrDescriptor+0x2c>)
 8004764:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004766:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8004768:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800476a:	18c0      	adds	r0, r0, r3
 800476c:	d00a      	beq.n	8004784 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800476e:	4b07      	ldr	r3, [pc, #28]	; (800478c <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004770:	4907      	ldr	r1, [pc, #28]	; (8004790 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004772:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004774:	2208      	movs	r2, #8
 8004776:	f7ff ffdd 	bl	8004734 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800477a:	2204      	movs	r2, #4
 800477c:	4905      	ldr	r1, [pc, #20]	; (8004794 <USBD_FS_SerialStrDescriptor+0x38>)
 800477e:	4620      	mov	r0, r4
 8004780:	f7ff ffd8 	bl	8004734 <IntToUnicode>
}
 8004784:	4804      	ldr	r0, [pc, #16]	; (8004798 <USBD_FS_SerialStrDescriptor+0x3c>)
 8004786:	bd10      	pop	{r4, pc}
 8004788:	1fff7a10 	.word	0x1fff7a10
 800478c:	1fff7a14 	.word	0x1fff7a14
 8004790:	20000162 	.word	0x20000162
 8004794:	20000172 	.word	0x20000172
 8004798:	20000160 	.word	0x20000160

0800479c <USBD_FS_ManufacturerStrDescriptor>:
{
 800479c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800479e:	4c04      	ldr	r4, [pc, #16]	; (80047b0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80047a0:	4804      	ldr	r0, [pc, #16]	; (80047b4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80047a2:	460a      	mov	r2, r1
 80047a4:	4621      	mov	r1, r4
 80047a6:	f7fe fa43 	bl	8002c30 <USBD_GetString>
}
 80047aa:	4620      	mov	r0, r4
 80047ac:	bd10      	pop	{r4, pc}
 80047ae:	bf00      	nop
 80047b0:	200062bc 	.word	0x200062bc
 80047b4:	08004b27 	.word	0x08004b27

080047b8 <USBD_FS_ProductStrDescriptor>:
{
 80047b8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80047ba:	4c04      	ldr	r4, [pc, #16]	; (80047cc <USBD_FS_ProductStrDescriptor+0x14>)
 80047bc:	4804      	ldr	r0, [pc, #16]	; (80047d0 <USBD_FS_ProductStrDescriptor+0x18>)
 80047be:	460a      	mov	r2, r1
 80047c0:	4621      	mov	r1, r4
 80047c2:	f7fe fa35 	bl	8002c30 <USBD_GetString>
}
 80047c6:	4620      	mov	r0, r4
 80047c8:	bd10      	pop	{r4, pc}
 80047ca:	bf00      	nop
 80047cc:	200062bc 	.word	0x200062bc
 80047d0:	08004b3a 	.word	0x08004b3a

080047d4 <USBD_FS_ConfigStrDescriptor>:
{
 80047d4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80047d6:	4c04      	ldr	r4, [pc, #16]	; (80047e8 <USBD_FS_ConfigStrDescriptor+0x14>)
 80047d8:	4804      	ldr	r0, [pc, #16]	; (80047ec <USBD_FS_ConfigStrDescriptor+0x18>)
 80047da:	460a      	mov	r2, r1
 80047dc:	4621      	mov	r1, r4
 80047de:	f7fe fa27 	bl	8002c30 <USBD_GetString>
}
 80047e2:	4620      	mov	r0, r4
 80047e4:	bd10      	pop	{r4, pc}
 80047e6:	bf00      	nop
 80047e8:	200062bc 	.word	0x200062bc
 80047ec:	08004b0e 	.word	0x08004b0e

080047f0 <USBD_FS_InterfaceStrDescriptor>:
{
 80047f0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80047f2:	4c04      	ldr	r4, [pc, #16]	; (8004804 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80047f4:	4804      	ldr	r0, [pc, #16]	; (8004808 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80047f6:	460a      	mov	r2, r1
 80047f8:	4621      	mov	r1, r4
 80047fa:	f7fe fa19 	bl	8002c30 <USBD_GetString>
}
 80047fe:	4620      	mov	r0, r4
 8004800:	bd10      	pop	{r4, pc}
 8004802:	bf00      	nop
 8004804:	200062bc 	.word	0x200062bc
 8004808:	08004b19 	.word	0x08004b19

0800480c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800480c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004844 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004810:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004812:	e003      	b.n	800481c <LoopCopyDataInit>

08004814 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004816:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004818:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800481a:	3104      	adds	r1, #4

0800481c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800481c:	480b      	ldr	r0, [pc, #44]	; (800484c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800481e:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004820:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004822:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004824:	d3f6      	bcc.n	8004814 <CopyDataInit>
  ldr  r2, =_sbss
 8004826:	4a0b      	ldr	r2, [pc, #44]	; (8004854 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004828:	e002      	b.n	8004830 <LoopFillZerobss>

0800482a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800482a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800482c:	f842 3b04 	str.w	r3, [r2], #4

08004830 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004830:	4b09      	ldr	r3, [pc, #36]	; (8004858 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004832:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004834:	d3f9      	bcc.n	800482a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004836:	f7ff fd93 	bl	8004360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800483a:	f000 f81f 	bl	800487c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800483e:	f7ff fc49 	bl	80040d4 <main>
  bx  lr    
 8004842:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004844:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004848:	08004b60 	.word	0x08004b60
  ldr  r0, =_sdata
 800484c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004850:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8004854:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8004858:	200064c0 	.word	0x200064c0

0800485c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800485c:	e7fe      	b.n	800485c <ADC_IRQHandler>
	...

08004860 <calloc>:
 8004860:	4b02      	ldr	r3, [pc, #8]	; (800486c <calloc+0xc>)
 8004862:	460a      	mov	r2, r1
 8004864:	4601      	mov	r1, r0
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	f000 b84f 	b.w	800490a <_calloc_r>
 800486c:	2000017c 	.word	0x2000017c

08004870 <__errno>:
 8004870:	4b01      	ldr	r3, [pc, #4]	; (8004878 <__errno+0x8>)
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	2000017c 	.word	0x2000017c

0800487c <__libc_init_array>:
 800487c:	b570      	push	{r4, r5, r6, lr}
 800487e:	4e0d      	ldr	r6, [pc, #52]	; (80048b4 <__libc_init_array+0x38>)
 8004880:	4c0d      	ldr	r4, [pc, #52]	; (80048b8 <__libc_init_array+0x3c>)
 8004882:	1ba4      	subs	r4, r4, r6
 8004884:	10a4      	asrs	r4, r4, #2
 8004886:	2500      	movs	r5, #0
 8004888:	42a5      	cmp	r5, r4
 800488a:	d109      	bne.n	80048a0 <__libc_init_array+0x24>
 800488c:	4e0b      	ldr	r6, [pc, #44]	; (80048bc <__libc_init_array+0x40>)
 800488e:	4c0c      	ldr	r4, [pc, #48]	; (80048c0 <__libc_init_array+0x44>)
 8004890:	f000 f908 	bl	8004aa4 <_init>
 8004894:	1ba4      	subs	r4, r4, r6
 8004896:	10a4      	asrs	r4, r4, #2
 8004898:	2500      	movs	r5, #0
 800489a:	42a5      	cmp	r5, r4
 800489c:	d105      	bne.n	80048aa <__libc_init_array+0x2e>
 800489e:	bd70      	pop	{r4, r5, r6, pc}
 80048a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048a4:	4798      	blx	r3
 80048a6:	3501      	adds	r5, #1
 80048a8:	e7ee      	b.n	8004888 <__libc_init_array+0xc>
 80048aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048ae:	4798      	blx	r3
 80048b0:	3501      	adds	r5, #1
 80048b2:	e7f2      	b.n	800489a <__libc_init_array+0x1e>
 80048b4:	08004b58 	.word	0x08004b58
 80048b8:	08004b58 	.word	0x08004b58
 80048bc:	08004b58 	.word	0x08004b58
 80048c0:	08004b5c 	.word	0x08004b5c

080048c4 <malloc>:
 80048c4:	4b02      	ldr	r3, [pc, #8]	; (80048d0 <malloc+0xc>)
 80048c6:	4601      	mov	r1, r0
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	f000 b87b 	b.w	80049c4 <_malloc_r>
 80048ce:	bf00      	nop
 80048d0:	2000017c 	.word	0x2000017c

080048d4 <free>:
 80048d4:	4b02      	ldr	r3, [pc, #8]	; (80048e0 <free+0xc>)
 80048d6:	4601      	mov	r1, r0
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	f000 b825 	b.w	8004928 <_free_r>
 80048de:	bf00      	nop
 80048e0:	2000017c 	.word	0x2000017c

080048e4 <memcpy>:
 80048e4:	b510      	push	{r4, lr}
 80048e6:	1e43      	subs	r3, r0, #1
 80048e8:	440a      	add	r2, r1
 80048ea:	4291      	cmp	r1, r2
 80048ec:	d100      	bne.n	80048f0 <memcpy+0xc>
 80048ee:	bd10      	pop	{r4, pc}
 80048f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048f8:	e7f7      	b.n	80048ea <memcpy+0x6>

080048fa <memset>:
 80048fa:	4402      	add	r2, r0
 80048fc:	4603      	mov	r3, r0
 80048fe:	4293      	cmp	r3, r2
 8004900:	d100      	bne.n	8004904 <memset+0xa>
 8004902:	4770      	bx	lr
 8004904:	f803 1b01 	strb.w	r1, [r3], #1
 8004908:	e7f9      	b.n	80048fe <memset+0x4>

0800490a <_calloc_r>:
 800490a:	b538      	push	{r3, r4, r5, lr}
 800490c:	fb02 f401 	mul.w	r4, r2, r1
 8004910:	4621      	mov	r1, r4
 8004912:	f000 f857 	bl	80049c4 <_malloc_r>
 8004916:	4605      	mov	r5, r0
 8004918:	b118      	cbz	r0, 8004922 <_calloc_r+0x18>
 800491a:	4622      	mov	r2, r4
 800491c:	2100      	movs	r1, #0
 800491e:	f7ff ffec 	bl	80048fa <memset>
 8004922:	4628      	mov	r0, r5
 8004924:	bd38      	pop	{r3, r4, r5, pc}
	...

08004928 <_free_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4605      	mov	r5, r0
 800492c:	2900      	cmp	r1, #0
 800492e:	d045      	beq.n	80049bc <_free_r+0x94>
 8004930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004934:	1f0c      	subs	r4, r1, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	bfb8      	it	lt
 800493a:	18e4      	addlt	r4, r4, r3
 800493c:	f000 f8b0 	bl	8004aa0 <__malloc_lock>
 8004940:	4a1f      	ldr	r2, [pc, #124]	; (80049c0 <_free_r+0x98>)
 8004942:	6813      	ldr	r3, [r2, #0]
 8004944:	4610      	mov	r0, r2
 8004946:	b933      	cbnz	r3, 8004956 <_free_r+0x2e>
 8004948:	6063      	str	r3, [r4, #4]
 800494a:	6014      	str	r4, [r2, #0]
 800494c:	4628      	mov	r0, r5
 800494e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004952:	f000 b8a6 	b.w	8004aa2 <__malloc_unlock>
 8004956:	42a3      	cmp	r3, r4
 8004958:	d90c      	bls.n	8004974 <_free_r+0x4c>
 800495a:	6821      	ldr	r1, [r4, #0]
 800495c:	1862      	adds	r2, r4, r1
 800495e:	4293      	cmp	r3, r2
 8004960:	bf04      	itt	eq
 8004962:	681a      	ldreq	r2, [r3, #0]
 8004964:	685b      	ldreq	r3, [r3, #4]
 8004966:	6063      	str	r3, [r4, #4]
 8004968:	bf04      	itt	eq
 800496a:	1852      	addeq	r2, r2, r1
 800496c:	6022      	streq	r2, [r4, #0]
 800496e:	6004      	str	r4, [r0, #0]
 8004970:	e7ec      	b.n	800494c <_free_r+0x24>
 8004972:	4613      	mov	r3, r2
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	b10a      	cbz	r2, 800497c <_free_r+0x54>
 8004978:	42a2      	cmp	r2, r4
 800497a:	d9fa      	bls.n	8004972 <_free_r+0x4a>
 800497c:	6819      	ldr	r1, [r3, #0]
 800497e:	1858      	adds	r0, r3, r1
 8004980:	42a0      	cmp	r0, r4
 8004982:	d10b      	bne.n	800499c <_free_r+0x74>
 8004984:	6820      	ldr	r0, [r4, #0]
 8004986:	4401      	add	r1, r0
 8004988:	1858      	adds	r0, r3, r1
 800498a:	4282      	cmp	r2, r0
 800498c:	6019      	str	r1, [r3, #0]
 800498e:	d1dd      	bne.n	800494c <_free_r+0x24>
 8004990:	6810      	ldr	r0, [r2, #0]
 8004992:	6852      	ldr	r2, [r2, #4]
 8004994:	605a      	str	r2, [r3, #4]
 8004996:	4401      	add	r1, r0
 8004998:	6019      	str	r1, [r3, #0]
 800499a:	e7d7      	b.n	800494c <_free_r+0x24>
 800499c:	d902      	bls.n	80049a4 <_free_r+0x7c>
 800499e:	230c      	movs	r3, #12
 80049a0:	602b      	str	r3, [r5, #0]
 80049a2:	e7d3      	b.n	800494c <_free_r+0x24>
 80049a4:	6820      	ldr	r0, [r4, #0]
 80049a6:	1821      	adds	r1, r4, r0
 80049a8:	428a      	cmp	r2, r1
 80049aa:	bf04      	itt	eq
 80049ac:	6811      	ldreq	r1, [r2, #0]
 80049ae:	6852      	ldreq	r2, [r2, #4]
 80049b0:	6062      	str	r2, [r4, #4]
 80049b2:	bf04      	itt	eq
 80049b4:	1809      	addeq	r1, r1, r0
 80049b6:	6021      	streq	r1, [r4, #0]
 80049b8:	605c      	str	r4, [r3, #4]
 80049ba:	e7c7      	b.n	800494c <_free_r+0x24>
 80049bc:	bd38      	pop	{r3, r4, r5, pc}
 80049be:	bf00      	nop
 80049c0:	200043c4 	.word	0x200043c4

080049c4 <_malloc_r>:
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	1ccd      	adds	r5, r1, #3
 80049c8:	f025 0503 	bic.w	r5, r5, #3
 80049cc:	3508      	adds	r5, #8
 80049ce:	2d0c      	cmp	r5, #12
 80049d0:	bf38      	it	cc
 80049d2:	250c      	movcc	r5, #12
 80049d4:	2d00      	cmp	r5, #0
 80049d6:	4606      	mov	r6, r0
 80049d8:	db01      	blt.n	80049de <_malloc_r+0x1a>
 80049da:	42a9      	cmp	r1, r5
 80049dc:	d903      	bls.n	80049e6 <_malloc_r+0x22>
 80049de:	230c      	movs	r3, #12
 80049e0:	6033      	str	r3, [r6, #0]
 80049e2:	2000      	movs	r0, #0
 80049e4:	bd70      	pop	{r4, r5, r6, pc}
 80049e6:	f000 f85b 	bl	8004aa0 <__malloc_lock>
 80049ea:	4a23      	ldr	r2, [pc, #140]	; (8004a78 <_malloc_r+0xb4>)
 80049ec:	6814      	ldr	r4, [r2, #0]
 80049ee:	4621      	mov	r1, r4
 80049f0:	b991      	cbnz	r1, 8004a18 <_malloc_r+0x54>
 80049f2:	4c22      	ldr	r4, [pc, #136]	; (8004a7c <_malloc_r+0xb8>)
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	b91b      	cbnz	r3, 8004a00 <_malloc_r+0x3c>
 80049f8:	4630      	mov	r0, r6
 80049fa:	f000 f841 	bl	8004a80 <_sbrk_r>
 80049fe:	6020      	str	r0, [r4, #0]
 8004a00:	4629      	mov	r1, r5
 8004a02:	4630      	mov	r0, r6
 8004a04:	f000 f83c 	bl	8004a80 <_sbrk_r>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d126      	bne.n	8004a5a <_malloc_r+0x96>
 8004a0c:	230c      	movs	r3, #12
 8004a0e:	6033      	str	r3, [r6, #0]
 8004a10:	4630      	mov	r0, r6
 8004a12:	f000 f846 	bl	8004aa2 <__malloc_unlock>
 8004a16:	e7e4      	b.n	80049e2 <_malloc_r+0x1e>
 8004a18:	680b      	ldr	r3, [r1, #0]
 8004a1a:	1b5b      	subs	r3, r3, r5
 8004a1c:	d41a      	bmi.n	8004a54 <_malloc_r+0x90>
 8004a1e:	2b0b      	cmp	r3, #11
 8004a20:	d90f      	bls.n	8004a42 <_malloc_r+0x7e>
 8004a22:	600b      	str	r3, [r1, #0]
 8004a24:	50cd      	str	r5, [r1, r3]
 8004a26:	18cc      	adds	r4, r1, r3
 8004a28:	4630      	mov	r0, r6
 8004a2a:	f000 f83a 	bl	8004aa2 <__malloc_unlock>
 8004a2e:	f104 000b 	add.w	r0, r4, #11
 8004a32:	1d23      	adds	r3, r4, #4
 8004a34:	f020 0007 	bic.w	r0, r0, #7
 8004a38:	1ac3      	subs	r3, r0, r3
 8004a3a:	d01b      	beq.n	8004a74 <_malloc_r+0xb0>
 8004a3c:	425a      	negs	r2, r3
 8004a3e:	50e2      	str	r2, [r4, r3]
 8004a40:	bd70      	pop	{r4, r5, r6, pc}
 8004a42:	428c      	cmp	r4, r1
 8004a44:	bf0d      	iteet	eq
 8004a46:	6863      	ldreq	r3, [r4, #4]
 8004a48:	684b      	ldrne	r3, [r1, #4]
 8004a4a:	6063      	strne	r3, [r4, #4]
 8004a4c:	6013      	streq	r3, [r2, #0]
 8004a4e:	bf18      	it	ne
 8004a50:	460c      	movne	r4, r1
 8004a52:	e7e9      	b.n	8004a28 <_malloc_r+0x64>
 8004a54:	460c      	mov	r4, r1
 8004a56:	6849      	ldr	r1, [r1, #4]
 8004a58:	e7ca      	b.n	80049f0 <_malloc_r+0x2c>
 8004a5a:	1cc4      	adds	r4, r0, #3
 8004a5c:	f024 0403 	bic.w	r4, r4, #3
 8004a60:	42a0      	cmp	r0, r4
 8004a62:	d005      	beq.n	8004a70 <_malloc_r+0xac>
 8004a64:	1a21      	subs	r1, r4, r0
 8004a66:	4630      	mov	r0, r6
 8004a68:	f000 f80a 	bl	8004a80 <_sbrk_r>
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d0cd      	beq.n	8004a0c <_malloc_r+0x48>
 8004a70:	6025      	str	r5, [r4, #0]
 8004a72:	e7d9      	b.n	8004a28 <_malloc_r+0x64>
 8004a74:	bd70      	pop	{r4, r5, r6, pc}
 8004a76:	bf00      	nop
 8004a78:	200043c4 	.word	0x200043c4
 8004a7c:	200043c8 	.word	0x200043c8

08004a80 <_sbrk_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4c06      	ldr	r4, [pc, #24]	; (8004a9c <_sbrk_r+0x1c>)
 8004a84:	2300      	movs	r3, #0
 8004a86:	4605      	mov	r5, r0
 8004a88:	4608      	mov	r0, r1
 8004a8a:	6023      	str	r3, [r4, #0]
 8004a8c:	f7ff fc4e 	bl	800432c <_sbrk>
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	d102      	bne.n	8004a9a <_sbrk_r+0x1a>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	b103      	cbz	r3, 8004a9a <_sbrk_r+0x1a>
 8004a98:	602b      	str	r3, [r5, #0]
 8004a9a:	bd38      	pop	{r3, r4, r5, pc}
 8004a9c:	200064bc 	.word	0x200064bc

08004aa0 <__malloc_lock>:
 8004aa0:	4770      	bx	lr

08004aa2 <__malloc_unlock>:
 8004aa2:	4770      	bx	lr

08004aa4 <_init>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr

08004ab0 <_fini>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	bf00      	nop
 8004ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab6:	bc08      	pop	{r3}
 8004ab8:	469e      	mov	lr, r3
 8004aba:	4770      	bx	lr
